Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o (exit)
/usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
                              ./main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

richtung            0x1               ./main.o
esuml               0x2               ./main.o
S                   0x1               ./main.o
esum                0x2               ./main.o
esumr               0x2               ./main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800100 0x000000000000ff00 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
LOAD ./main.o
LOAD /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a
LOAD /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/libc.a
LOAD /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0xb5e
 *(.vectors)
 .vectors       0x0000000000000000       0x94 /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000094                . = ALIGN (0x2)
                0x0000000000000094                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000094        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000094                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000094                __ctors_start = .
 *(.ctors)
                0x0000000000000094                __ctors_end = .
                0x0000000000000094                __dtors_start = .
 *(.dtors)
                0x0000000000000094                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000094        0x0 /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
                0x0000000000000094                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000094        0xc /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000000000000a0       0x10 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
                0x00000000000000a0                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000b0        0x8 /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
 *(.init9)
 *(.text)
 .text          0x00000000000000b8        0x4 /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
                0x00000000000000b8                __vector_22
                0x00000000000000b8                __vector_28
                0x00000000000000b8                __vector_1
                0x00000000000000b8                __vector_32
                0x00000000000000b8                __vector_34
                0x00000000000000b8                __vector_24
                0x00000000000000b8                __vector_12
                0x00000000000000b8                __bad_interrupt
                0x00000000000000b8                __vector_6
                0x00000000000000b8                __vector_31
                0x00000000000000b8                __vector_35
                0x00000000000000b8                __vector_23
                0x00000000000000b8                __vector_30
                0x00000000000000b8                __vector_25
                0x00000000000000b8                __vector_11
                0x00000000000000b8                __vector_13
                0x00000000000000b8                __vector_17
                0x00000000000000b8                __vector_19
                0x00000000000000b8                __vector_7
                0x00000000000000b8                __vector_27
                0x00000000000000b8                __vector_5
                0x00000000000000b8                __vector_33
                0x00000000000000b8                __vector_9
                0x00000000000000b8                __vector_2
                0x00000000000000b8                __vector_21
                0x00000000000000b8                __vector_15
                0x00000000000000b8                __vector_36
                0x00000000000000b8                __vector_29
                0x00000000000000b8                __vector_8
                0x00000000000000b8                __vector_26
                0x00000000000000b8                __vector_14
                0x00000000000000b8                __vector_10
                0x00000000000000b8                __vector_16
                0x00000000000000b8                __vector_18
                0x00000000000000b8                __vector_20
 .text          0x00000000000000bc      0x9dc ./main.o
                0x00000000000000bc                init
                0x000000000000015c                lineInit
                0x0000000000000162                distInit
                0x000000000000016a                stopall
                0x00000000000001ac                setSpeed_1
                0x00000000000001d6                steuer
                0x00000000000001ee                setSpeed_2
                0x0000000000000218                setMotorBaseSpeed_1
                0x000000000000023e                setMotorBaseSpeed_2
                0x0000000000000264                modMotorBaseSpeed_1
                0x00000000000002aa                modMotorBaseSpeed_2
                0x00000000000002f0                modMotorSpeed_1
                0x0000000000000336                modMotorSpeed_2
                0x000000000000037c                setMotorSpeed_1
                0x0000000000000386                setMotorSpeed_2
                0x0000000000000390                adjSpeed
                0x000000000000040c                pushButton
                0x00000000000004be                setADC
                0x00000000000004e6                getData
                0x0000000000000504                __vector_3
                0x0000000000000546                __vector_4
                0x0000000000000588                line
                0x0000000000000718                dist
                0x0000000000000830                strecke
                0x0000000000000902                blink
                0x0000000000000968                display
                0x00000000000009fc                bar
 .text          0x0000000000000a98        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .text          0x0000000000000a98        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
                0x0000000000000a98                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000000a98       0xc2 ./main.o
                0x0000000000000a98                main
 .text.libgcc.mul
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
                0x0000000000000b5a                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000b5a        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
                0x0000000000000b5a                exit
                0x0000000000000b5a                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000b5a        0x4 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000b5e                _etext = .

.data           0x0000000000800100        0x0 load address 0x0000000000000b5e
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
 .data          0x0000000000800100        0x0 ./main.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800100                . = ALIGN (0x2)
                0x0000000000800100                _edata = .
                0x0000000000800100                PROVIDE (__data_end, .)

.bss            0x0000000000800100       0x18
                0x0000000000800100                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800100        0x0 /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
 .bss           0x0000000000800100       0x10 ./main.o
                0x0000000000800100                Motor_2_adjSpeed
                0x0000000000800102                Motor_1_adjSpeed
                0x0000000000800104                Motor_old_2_Speed
                0x0000000000800106                Motor_old_1_Speed
                0x0000000000800108                Motor_2_Speed
                0x000000000080010a                Motor_1_Speed
                0x000000000080010c                ticksrechts
                0x000000000080010e                tickslinks
 .bss           0x0000000000800110        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
 .bss           0x0000000000800110        0x0 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800110        0x8 ./main.o
                0x0000000000800110                richtung
                0x0000000000800111                esuml
                0x0000000000800113                S
                0x0000000000800114                esum
                0x0000000000800116                esumr
                0x0000000000800118                PROVIDE (__bss_end, .)
                0x0000000000000b5e                __data_load_start = LOADADDR (.data)
                0x0000000000000b5e                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800118        0x0
                0x0000000000800118                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800118                PROVIDE (__noinit_end, .)
                0x0000000000800118                _end = .
                0x0000000000800118                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x20f4
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o
 .stab          0x00000000000006cc     0x1908 ./main.o
                                       0x1914 (size before relaxing)
 .stab          0x0000000000001fd4       0x6c /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_exit.o)
                                         0x78 (size before relaxing)
 .stab          0x0000000000002040       0xb4 /usr/lib/gcc/avr/4.7.1/avr51/libgcc.a(_clear_bss.o)
                                         0xc0 (size before relaxing)

.stabstr        0x0000000000000000      0xc29
 *(.stabstr)
 .stabstr       0x0000000000000000      0xc29 /usr/lib/gcc/avr/4.7.1/../../../../avr/lib/avr51/crtcan128.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 ./main.o
                                         0x12 (size before relaxing)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(PKESintro.elf elf32-avr)
LOAD linker stubs
