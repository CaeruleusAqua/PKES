
PKESintro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800100  00800100  00000bd2  2**0
                  ALLOC
  2 .stab         000020f4  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c29  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000038f1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_3>
  10:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_4>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a8 31       	cpi	r26, 0x18	; 24
  ac:	b1 07       	cpc	r27, r17
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 4c 05 	call	0xa98	; 0xa98 <main>
  b4:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <init>:
	//     - intermediate
	//       DDRA=1+2+4+8;
	//     - using processor makros
	//       DDRA=((1<<DDA0) | (1<<DDA1) | (1<<DDA2) | (1<<DDA3));
	//     - using hardware specific makros
	DDRA |= ((1 << LED_0) | (1 << LED_1) | (1 << LED_2) | (1 << LED_3));
  bc:	81 b1       	in	r24, 0x01	; 1
  be:	8f 60       	ori	r24, 0x0F	; 15
  c0:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xff;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	87 b9       	out	0x07, r24	; 7
	// disable leds
	PORTA &= ~((1 << LED_0) | (1 << LED_1) | (1 << LED_2) | (1 << LED_3));
  c6:	82 b1       	in	r24, 0x02	; 2
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	82 b9       	out	0x02, r24	; 2
	//--------------------------------  ADMUX  -------------------------------
	//interne Referenz setzen
	ADMUX |= ((1 << REFS0) | (1 << REFS1));
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 6c       	ori	r24, 0xC0	; 192
  d4:	80 83       	st	Z, r24
	//adc rechtsbuendig
	ADMUX &= ~(1 << ADLAR);
  d6:	80 81       	ld	r24, Z
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	80 83       	st	Z, r24
	//kanal 0 setzen
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
  dc:	80 81       	ld	r24, Z
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	80 83       	st	Z, r24
	//-------------------------------- ADCSRA -------------------------------
	//vorteiler auf 128
	ADCSRA |= ((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	80 83       	st	Z, r24

	//---------------------------------- PWM --------------------------------
	DDRB |= ((1 << OC1A) | (1 << OC1B)); //OC1A/OC1B auf Ausgang
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	80 66       	ori	r24, 0x60	; 96
  f0:	84 b9       	out	0x04, r24	; 4
	TCCR1A = ((1 << WGM10) | (1 << COM1A1) | (1 << COM1B1)); // PMW-Mode (1) Phase Correct, 8 Bit
  f2:	81 ea       	ldi	r24, 0xA1	; 161
  f4:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = ((1 << CS11) | (1 << CS10)); // Prescaler auf 64
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	80 93 81 00 	sts	0x0081, r24

	//--------------------------------- Motor -------------------------------
	// PortE 2/3 auf Ausgang (Motor_1 rechts)
	DDRE |= ((1 << 2) | (1 << 3));
  fe:	8d b1       	in	r24, 0x0d	; 13
 100:	8c 60       	ori	r24, 0x0C	; 12
 102:	8d b9       	out	0x0d, r24	; 13
	PORTE &= ~(1 << 2);
 104:	72 98       	cbi	0x0e, 2	; 14
	PORTE |= (1 << 3);
 106:	73 9a       	sbi	0x0e, 3	; 14
	// PortG 0/1 auf Ausgang (Motor_2 links)
	DDRG |= ((1 << 0) | (1 << 1));
 108:	83 b3       	in	r24, 0x13	; 19
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	83 bb       	out	0x13, r24	; 19
	PORTG &= ~(1 << 1);
 10e:	a1 98       	cbi	0x14, 1	; 20
	PORTG |= (1 << 0);
 110:	a0 9a       	sbi	0x14, 0	; 20
	OCR1A = 0;
 112:	10 92 89 00 	sts	0x0089, r1
 116:	10 92 88 00 	sts	0x0088, r1
	// PWM 1 auf null
	OCR1B = 0;
 11a:	10 92 8b 00 	sts	0x008B, r1
 11e:	10 92 8a 00 	sts	0x008A, r1
	// PWM 2 auf null
	//---------------------------------- Space --------------------------------
	S.bSbutton_S0 = 0;
 122:	80 91 13 01 	lds	r24, 0x0113
	S.bSbutton_S1 = 0;
	S.bSbutton_S2 = 0;
	S.bSbutton_S3 = 0;
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	87 7f       	andi	r24, 0xF7	; 247
 12a:	80 93 13 01 	sts	0x0113, r24
	tickslinks=0;
 12e:	10 92 0f 01 	sts	0x010F, r1
 132:	10 92 0e 01 	sts	0x010E, r1
	ticksrechts=0;
 136:	10 92 0d 01 	sts	0x010D, r1
 13a:	10 92 0c 01 	sts	0x010C, r1
	richtung=gerade;
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	80 93 10 01 	sts	0x0110, r24
	//-------------------------------- Interrupt ------------------------------
	EIMSK=0;
 144:	1d ba       	out	0x1d, r1	; 29
	EICRA=0;
 146:	e9 e6       	ldi	r30, 0x69	; 105
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	10 82       	st	Z, r1
	EICRA |= ((1 << ISC21) | (0 << ISC20) | (1 << ISC31) | (0 << ISC30));
 14c:	80 81       	ld	r24, Z
 14e:	80 6a       	ori	r24, 0xA0	; 160
 150:	80 83       	st	Z, r24
	EIMSK |= ((1 << INT2) | (1 << INT3));
 152:	8d b3       	in	r24, 0x1d	; 29
 154:	8c 60       	ori	r24, 0x0C	; 12
 156:	8d bb       	out	0x1d, r24	; 29
	DDRD = 0; // alles auf eingang
 158:	1a b8       	out	0x0a, r1	; 10
 15a:	08 95       	ret

0000015c <lineInit>:
}

void lineInit(){
	VccOn(CNY70_1);
 15c:	44 98       	cbi	0x08, 4	; 8
	VccOn(CNY70_2);
 15e:	43 98       	cbi	0x08, 3	; 8
 160:	08 95       	ret

00000162 <distInit>:
}

void distInit(){
	VccOn(ds1);
 162:	40 98       	cbi	0x08, 0	; 8
	VccOn(ds2);
 164:	41 98       	cbi	0x08, 1	; 8
	VccOn(ds3);
 166:	42 98       	cbi	0x08, 2	; 8
 168:	08 95       	ret

0000016a <stopall>:
 *  Created on: 24.05.2012
 *      Author: time
 */

void stopall() {
	Motor_old_1_Speed=Motor_1_Speed;
 16a:	80 91 0a 01 	lds	r24, 0x010A
 16e:	90 91 0b 01 	lds	r25, 0x010B
 172:	90 93 07 01 	sts	0x0107, r25
 176:	80 93 06 01 	sts	0x0106, r24
	Motor_old_2_Speed=Motor_2_Speed;
 17a:	80 91 08 01 	lds	r24, 0x0108
 17e:	90 91 09 01 	lds	r25, 0x0109
 182:	90 93 05 01 	sts	0x0105, r25
 186:	80 93 04 01 	sts	0x0104, r24
	Motor_1_Speed = 0;
 18a:	10 92 0b 01 	sts	0x010B, r1
 18e:	10 92 0a 01 	sts	0x010A, r1
	Motor_2_Speed = 0;
 192:	10 92 09 01 	sts	0x0109, r1
 196:	10 92 08 01 	sts	0x0108, r1
	Motor_1_adjSpeed = 0;
 19a:	10 92 03 01 	sts	0x0103, r1
 19e:	10 92 02 01 	sts	0x0102, r1
	Motor_2_adjSpeed = 0;
 1a2:	10 92 01 01 	sts	0x0101, r1
 1a6:	10 92 00 01 	sts	0x0100, r1
 1aa:	08 95       	ret

000001ac <setSpeed_1>:

}
void setSpeed_1(int16_t speed) {
	if (speed >= 0) {
 1ac:	97 fd       	sbrc	r25, 7
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <setSpeed_1+0xa>
		// motor_1 vorwärts
		PORTE &= ~(1 << 3);
 1b0:	73 98       	cbi	0x0e, 3	; 14
		PORTE |= (1 << 2);
 1b2:	72 9a       	sbi	0x0e, 2	; 14
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <setSpeed_1+0x20>
	} else {
		speed = -speed;
		if (speed > 255)
			speed = 255;
		// motor_1 rückwärts
		PORTE &= ~(1 << 2);
 1b6:	72 98       	cbi	0x0e, 2	; 14
		PORTE |= (1 << 3);
 1b8:	73 9a       	sbi	0x0e, 3	; 14
		OCR1A = speed;
 1ba:	91 95       	neg	r25
 1bc:	81 95       	neg	r24
 1be:	91 09       	sbc	r25, r1
 1c0:	8f 3f       	cpi	r24, 0xFF	; 255
 1c2:	91 05       	cpc	r25, r1
 1c4:	19 f0       	breq	.+6      	; 0x1cc <setSpeed_1+0x20>
 1c6:	14 f0       	brlt	.+4      	; 0x1cc <setSpeed_1+0x20>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 89 00 	sts	0x0089, r25
 1d0:	80 93 88 00 	sts	0x0088, r24
 1d4:	08 95       	ret

000001d6 <steuer>:
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 1d6:	90 93 03 01 	sts	0x0103, r25
 1da:	80 93 02 01 	sts	0x0102, r24
	}
}

void steuer(int16_t richtung) {
	setMotorSpeed_1(richtung);
	setMotorSpeed_2(-richtung);
 1de:	91 95       	neg	r25
 1e0:	81 95       	neg	r24
 1e2:	91 09       	sbc	r25, r1
}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 1e4:	90 93 01 01 	sts	0x0101, r25
 1e8:	80 93 00 01 	sts	0x0100, r24
 1ec:	08 95       	ret

000001ee <setSpeed_2>:
	setMotorSpeed_1(richtung);
	setMotorSpeed_2(-richtung);
}

void setSpeed_2(int16_t speed) {
	if (speed >= 0) {
 1ee:	97 fd       	sbrc	r25, 7
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <setSpeed_2+0xa>
		// motor_2 vorwärts
		PORTG &= ~(1 << 0);
 1f2:	a0 98       	cbi	0x14, 0	; 20
		PORTG |= (1 << 1);
 1f4:	a1 9a       	sbi	0x14, 1	; 20
 1f6:	0b c0       	rjmp	.+22     	; 0x20e <setSpeed_2+0x20>
	} else {
		speed = -speed;
		if (speed > 255)
			speed = 255;
		// motor_2 rückwärts
		PORTG &= ~(1 << 1);
 1f8:	a1 98       	cbi	0x14, 1	; 20
		PORTG |= (1 << 0);
 1fa:	a0 9a       	sbi	0x14, 0	; 20

		OCR1B = speed;
 1fc:	91 95       	neg	r25
 1fe:	81 95       	neg	r24
 200:	91 09       	sbc	r25, r1
 202:	8f 3f       	cpi	r24, 0xFF	; 255
 204:	91 05       	cpc	r25, r1
 206:	19 f0       	breq	.+6      	; 0x20e <setSpeed_2+0x20>
 208:	14 f0       	brlt	.+4      	; 0x20e <setSpeed_2+0x20>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 8b 00 	sts	0x008B, r25
 212:	80 93 8a 00 	sts	0x008A, r24
 216:	08 95       	ret

00000218 <setMotorBaseSpeed_1>:

	}
}

void setMotorBaseSpeed_1(int16_t speed) {
	if (speed > 255)
 218:	8f 3f       	cpi	r24, 0xFF	; 255
 21a:	91 05       	cpc	r25, r1
 21c:	09 f0       	breq	.+2      	; 0x220 <setMotorBaseSpeed_1+0x8>
 21e:	2c f4       	brge	.+10     	; 0x22a <setMotorBaseSpeed_1+0x12>
		speed = 255;
	if (speed < -255)
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	92 07       	cpc	r25, r18
 226:	24 f0       	brlt	.+8      	; 0x230 <setMotorBaseSpeed_1+0x18>
 228:	05 c0       	rjmp	.+10     	; 0x234 <setMotorBaseSpeed_1+0x1c>
	}
}

void setMotorBaseSpeed_1(int16_t speed) {
	if (speed > 255)
		speed = 255;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <setMotorBaseSpeed_1+0x1c>
	if (speed < -255)
		speed = -255;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	9f ef       	ldi	r25, 0xFF	; 255
	Motor_1_Speed = speed;
 234:	90 93 0b 01 	sts	0x010B, r25
 238:	80 93 0a 01 	sts	0x010A, r24
 23c:	08 95       	ret

0000023e <setMotorBaseSpeed_2>:

}

void setMotorBaseSpeed_2(int16_t speed) {
	if (speed > 255)
 23e:	8f 3f       	cpi	r24, 0xFF	; 255
 240:	91 05       	cpc	r25, r1
 242:	09 f0       	breq	.+2      	; 0x246 <setMotorBaseSpeed_2+0x8>
 244:	2c f4       	brge	.+10     	; 0x250 <setMotorBaseSpeed_2+0x12>
		speed = 255;
	if (speed < -255)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	92 07       	cpc	r25, r18
 24c:	24 f0       	brlt	.+8      	; 0x256 <setMotorBaseSpeed_2+0x18>
 24e:	05 c0       	rjmp	.+10     	; 0x25a <setMotorBaseSpeed_2+0x1c>

}

void setMotorBaseSpeed_2(int16_t speed) {
	if (speed > 255)
		speed = 255;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <setMotorBaseSpeed_2+0x1c>
	if (speed < -255)
		speed = -255;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	9f ef       	ldi	r25, 0xFF	; 255
	Motor_2_Speed = speed;
 25a:	90 93 09 01 	sts	0x0109, r25
 25e:	80 93 08 01 	sts	0x0108, r24
 262:	08 95       	ret

00000264 <modMotorBaseSpeed_1>:

}

void modMotorBaseSpeed_1(int16_t speed) {
	Motor_1_Speed += speed;
 264:	20 91 0a 01 	lds	r18, 0x010A
 268:	30 91 0b 01 	lds	r19, 0x010B
 26c:	28 0f       	add	r18, r24
 26e:	39 1f       	adc	r19, r25
	if (Motor_1_Speed > 255)
 270:	2f 3f       	cpi	r18, 0xFF	; 255
 272:	31 05       	cpc	r19, r1
 274:	09 f0       	breq	.+2      	; 0x278 <modMotorBaseSpeed_1+0x14>
 276:	2c f4       	brge	.+10     	; 0x282 <modMotorBaseSpeed_1+0x1e>
	Motor_2_Speed = speed;

}

void modMotorBaseSpeed_1(int16_t speed) {
	Motor_1_Speed += speed;
 278:	30 93 0b 01 	sts	0x010B, r19
 27c:	20 93 0a 01 	sts	0x010A, r18
 280:	06 c0       	rjmp	.+12     	; 0x28e <modMotorBaseSpeed_1+0x2a>
	if (Motor_1_Speed > 255)
		Motor_1_Speed = 255;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 0b 01 	sts	0x010B, r25
 28a:	80 93 0a 01 	sts	0x010A, r24
	if (Motor_1_Speed < -255)
 28e:	80 91 0a 01 	lds	r24, 0x010A
 292:	90 91 0b 01 	lds	r25, 0x010B
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	9f 4f       	sbci	r25, 0xFF	; 255
 29a:	34 f4       	brge	.+12     	; 0x2a8 <modMotorBaseSpeed_1+0x44>
		Motor_1_Speed = -255;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	9f ef       	ldi	r25, 0xFF	; 255
 2a0:	90 93 0b 01 	sts	0x010B, r25
 2a4:	80 93 0a 01 	sts	0x010A, r24
 2a8:	08 95       	ret

000002aa <modMotorBaseSpeed_2>:
}

void modMotorBaseSpeed_2(int16_t speed) {
	Motor_2_Speed += speed;
 2aa:	20 91 08 01 	lds	r18, 0x0108
 2ae:	30 91 09 01 	lds	r19, 0x0109
 2b2:	28 0f       	add	r18, r24
 2b4:	39 1f       	adc	r19, r25
	if (Motor_2_Speed > 255)
 2b6:	2f 3f       	cpi	r18, 0xFF	; 255
 2b8:	31 05       	cpc	r19, r1
 2ba:	09 f0       	breq	.+2      	; 0x2be <modMotorBaseSpeed_2+0x14>
 2bc:	2c f4       	brge	.+10     	; 0x2c8 <modMotorBaseSpeed_2+0x1e>
	if (Motor_1_Speed < -255)
		Motor_1_Speed = -255;
}

void modMotorBaseSpeed_2(int16_t speed) {
	Motor_2_Speed += speed;
 2be:	30 93 09 01 	sts	0x0109, r19
 2c2:	20 93 08 01 	sts	0x0108, r18
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <modMotorBaseSpeed_2+0x2a>
	if (Motor_2_Speed > 255)
		Motor_2_Speed = 255;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 09 01 	sts	0x0109, r25
 2d0:	80 93 08 01 	sts	0x0108, r24
	if (Motor_2_Speed < -255)
 2d4:	80 91 08 01 	lds	r24, 0x0108
 2d8:	90 91 09 01 	lds	r25, 0x0109
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	34 f4       	brge	.+12     	; 0x2ee <modMotorBaseSpeed_2+0x44>
		Motor_2_Speed = -255;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	9f ef       	ldi	r25, 0xFF	; 255
 2e6:	90 93 09 01 	sts	0x0109, r25
 2ea:	80 93 08 01 	sts	0x0108, r24
 2ee:	08 95       	ret

000002f0 <modMotorSpeed_1>:
}

void modMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed += speed;
 2f0:	20 91 02 01 	lds	r18, 0x0102
 2f4:	30 91 03 01 	lds	r19, 0x0103
 2f8:	28 0f       	add	r18, r24
 2fa:	39 1f       	adc	r19, r25
	if (Motor_1_adjSpeed > 255)
 2fc:	2f 3f       	cpi	r18, 0xFF	; 255
 2fe:	31 05       	cpc	r19, r1
 300:	09 f0       	breq	.+2      	; 0x304 <modMotorSpeed_1+0x14>
 302:	2c f4       	brge	.+10     	; 0x30e <modMotorSpeed_1+0x1e>
	if (Motor_2_Speed < -255)
		Motor_2_Speed = -255;
}

void modMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed += speed;
 304:	30 93 03 01 	sts	0x0103, r19
 308:	20 93 02 01 	sts	0x0102, r18
 30c:	06 c0       	rjmp	.+12     	; 0x31a <modMotorSpeed_1+0x2a>
	if (Motor_1_adjSpeed > 255)
		Motor_1_adjSpeed = 255;
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 03 01 	sts	0x0103, r25
 316:	80 93 02 01 	sts	0x0102, r24
	if (Motor_1_adjSpeed < -255)
 31a:	80 91 02 01 	lds	r24, 0x0102
 31e:	90 91 03 01 	lds	r25, 0x0103
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	34 f4       	brge	.+12     	; 0x334 <modMotorSpeed_1+0x44>
		Motor_1_adjSpeed = -255;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	9f ef       	ldi	r25, 0xFF	; 255
 32c:	90 93 03 01 	sts	0x0103, r25
 330:	80 93 02 01 	sts	0x0102, r24
 334:	08 95       	ret

00000336 <modMotorSpeed_2>:

}
void modMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed += speed;
 336:	20 91 00 01 	lds	r18, 0x0100
 33a:	30 91 01 01 	lds	r19, 0x0101
 33e:	28 0f       	add	r18, r24
 340:	39 1f       	adc	r19, r25
	if (Motor_2_adjSpeed > 255)
 342:	2f 3f       	cpi	r18, 0xFF	; 255
 344:	31 05       	cpc	r19, r1
 346:	09 f0       	breq	.+2      	; 0x34a <modMotorSpeed_2+0x14>
 348:	2c f4       	brge	.+10     	; 0x354 <modMotorSpeed_2+0x1e>
	if (Motor_1_adjSpeed < -255)
		Motor_1_adjSpeed = -255;

}
void modMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed += speed;
 34a:	30 93 01 01 	sts	0x0101, r19
 34e:	20 93 00 01 	sts	0x0100, r18
 352:	06 c0       	rjmp	.+12     	; 0x360 <modMotorSpeed_2+0x2a>
	if (Motor_2_adjSpeed > 255)
		Motor_2_adjSpeed = 255;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 01 01 	sts	0x0101, r25
 35c:	80 93 00 01 	sts	0x0100, r24
	if (Motor_2_adjSpeed < -255)
 360:	80 91 00 01 	lds	r24, 0x0100
 364:	90 91 01 01 	lds	r25, 0x0101
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	34 f4       	brge	.+12     	; 0x37a <modMotorSpeed_2+0x44>
		Motor_2_adjSpeed = -255;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	90 93 01 01 	sts	0x0101, r25
 376:	80 93 00 01 	sts	0x0100, r24
 37a:	08 95       	ret

0000037c <setMotorSpeed_1>:

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 37c:	90 93 03 01 	sts	0x0103, r25
 380:	80 93 02 01 	sts	0x0102, r24
 384:	08 95       	ret

00000386 <setMotorSpeed_2>:
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 386:	90 93 01 01 	sts	0x0101, r25
 38a:	80 93 00 01 	sts	0x0100, r24
 38e:	08 95       	ret

00000390 <adjSpeed>:
}

void adjSpeed() {
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
	int m1 = Motor_1_Speed + Motor_1_adjSpeed;
 394:	80 91 0a 01 	lds	r24, 0x010A
 398:	90 91 0b 01 	lds	r25, 0x010B
 39c:	20 91 02 01 	lds	r18, 0x0102
 3a0:	30 91 03 01 	lds	r19, 0x0103
 3a4:	82 0f       	add	r24, r18
 3a6:	93 1f       	adc	r25, r19
	int m2 = Motor_2_Speed + Motor_2_adjSpeed;
 3a8:	e0 90 08 01 	lds	r14, 0x0108
 3ac:	f0 90 09 01 	lds	r15, 0x0109
 3b0:	20 91 00 01 	lds	r18, 0x0100
 3b4:	30 91 01 01 	lds	r19, 0x0101
 3b8:	e2 0e       	add	r14, r18
 3ba:	f3 1e       	adc	r15, r19
	if (m1 > 255)
 3bc:	8f 3f       	cpi	r24, 0xFF	; 255
 3be:	91 05       	cpc	r25, r1
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <adjSpeed+0x34>
 3c2:	2c f4       	brge	.+10     	; 0x3ce <adjSpeed+0x3e>
		m1 = 255;
	if (m1 < -255)
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	92 07       	cpc	r25, r18
 3ca:	24 f0       	brlt	.+8      	; 0x3d4 <adjSpeed+0x44>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <adjSpeed+0x48>

void adjSpeed() {
	int m1 = Motor_1_Speed + Motor_1_adjSpeed;
	int m2 = Motor_2_Speed + Motor_2_adjSpeed;
	if (m1 > 255)
		m1 = 255;
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <adjSpeed+0x48>
	if (m1 < -255)
		m1 = -255;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
	if (m2 > 255)
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	e2 16       	cp	r14, r18
 3dc:	f1 04       	cpc	r15, r1
 3de:	09 f0       	breq	.+2      	; 0x3e2 <adjSpeed+0x52>
 3e0:	34 f4       	brge	.+12     	; 0x3ee <adjSpeed+0x5e>
		m2 = 255;
	if (m2 < -255)
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	e2 16       	cp	r14, r18
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	f2 06       	cpc	r15, r18
 3ea:	2c f0       	brlt	.+10     	; 0x3f6 <adjSpeed+0x66>
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <adjSpeed+0x6e>
	if (m1 > 255)
		m1 = 255;
	if (m1 < -255)
		m1 = -255;
	if (m2 > 255)
		m2 = 255;
 3ee:	ee 24       	eor	r14, r14
 3f0:	ea 94       	dec	r14
 3f2:	f1 2c       	mov	r15, r1
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <adjSpeed+0x6e>
	if (m2 < -255)
		m2 = -255;
 3f6:	ee 24       	eor	r14, r14
 3f8:	e3 94       	inc	r14
 3fa:	ff 24       	eor	r15, r15
 3fc:	fa 94       	dec	r15
	setSpeed_1(m1);
 3fe:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setSpeed_1>
	setSpeed_2(m2);
 402:	c7 01       	movw	r24, r14

}
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
	if (m2 > 255)
		m2 = 255;
	if (m2 < -255)
		m2 = -255;
	setSpeed_1(m1);
	setSpeed_2(m2);
 408:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <setSpeed_2>

0000040c <pushButton>:
 *  Created on: 24.05.2012
 *      Author: time
 */

uint8_t pushButton(uint8_t button) {
	switch (button) {
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	c9 f0       	breq	.+50     	; 0x442 <pushButton+0x36>
 410:	30 f0       	brcs	.+12     	; 0x41e <pushButton+0x12>
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	49 f1       	breq	.+82     	; 0x468 <pushButton+0x5c>
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	09 f0       	breq	.+2      	; 0x41c <pushButton+0x10>
 41a:	4f c0       	rjmp	.+158    	; 0x4ba <pushButton+0xae>
 41c:	38 c0       	rjmp	.+112    	; 0x48e <pushButton+0x82>
	case 0: {
		if (S.bSbutton_S0 == 1 && button(0) == 0) {
 41e:	80 91 13 01 	lds	r24, 0x0113
 422:	80 ff       	sbrs	r24, 0
 424:	04 c0       	rjmp	.+8      	; 0x42e <pushButton+0x22>
 426:	04 9b       	sbis	0x00, 4	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <pushButton+0x22>
			S.bSbutton_S0 = 0;
 42a:	8e 7f       	andi	r24, 0xFE	; 254
 42c:	37 c0       	rjmp	.+110    	; 0x49c <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S0 = button(0);
 42e:	80 b1       	in	r24, 0x00	; 0
 430:	82 95       	swap	r24
 432:	81 70       	andi	r24, 0x01	; 1
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	89 27       	eor	r24, r25
 438:	90 91 13 01 	lds	r25, 0x0113
 43c:	80 fb       	bst	r24, 0
 43e:	90 f9       	bld	r25, 0
 440:	3a c0       	rjmp	.+116    	; 0x4b6 <pushButton+0xaa>
		return 0;
	}
	case 1: {
		if (S.bSbutton_S1 == 1 && button(1) == 0) {
 442:	80 91 13 01 	lds	r24, 0x0113
 446:	81 ff       	sbrs	r24, 1
 448:	04 c0       	rjmp	.+8      	; 0x452 <pushButton+0x46>
 44a:	05 9b       	sbis	0x00, 5	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <pushButton+0x46>
			S.bSbutton_S1 = 0;
 44e:	8d 7f       	andi	r24, 0xFD	; 253
 450:	25 c0       	rjmp	.+74     	; 0x49c <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S1 = button(1);
 452:	80 b1       	in	r24, 0x00	; 0
 454:	85 fb       	bst	r24, 5
 456:	88 27       	eor	r24, r24
 458:	80 f9       	bld	r24, 0
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	89 27       	eor	r24, r25
 45e:	90 91 13 01 	lds	r25, 0x0113
 462:	80 fb       	bst	r24, 0
 464:	91 f9       	bld	r25, 1
 466:	27 c0       	rjmp	.+78     	; 0x4b6 <pushButton+0xaa>
		return 0;
	}
	case 2: {
		if (S.bSbutton_S2 == 1 && button(2) == 0) {
 468:	80 91 13 01 	lds	r24, 0x0113
 46c:	82 ff       	sbrs	r24, 2
 46e:	04 c0       	rjmp	.+8      	; 0x478 <pushButton+0x6c>
 470:	06 9b       	sbis	0x00, 6	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <pushButton+0x6c>
			S.bSbutton_S2 = 0;
 474:	8b 7f       	andi	r24, 0xFB	; 251
 476:	12 c0       	rjmp	.+36     	; 0x49c <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S2 = button(2);
 478:	80 b1       	in	r24, 0x00	; 0
 47a:	86 fb       	bst	r24, 6
 47c:	88 27       	eor	r24, r24
 47e:	80 f9       	bld	r24, 0
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	89 27       	eor	r24, r25
 484:	90 91 13 01 	lds	r25, 0x0113
 488:	80 fb       	bst	r24, 0
 48a:	92 f9       	bld	r25, 2
 48c:	14 c0       	rjmp	.+40     	; 0x4b6 <pushButton+0xaa>
		return 0;
	}
	case 3: {
		if (S.bSbutton_S3 == 1 && button(3) == 0) {
 48e:	80 91 13 01 	lds	r24, 0x0113
 492:	83 ff       	sbrs	r24, 3
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <pushButton+0x98>
 496:	07 9b       	sbis	0x00, 7	; 0
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <pushButton+0x98>
			S.bSbutton_S3 = 0;
 49a:	87 7f       	andi	r24, 0xF7	; 247
 49c:	80 93 13 01 	sts	0x0113, r24
			return 1;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
		}
		S.bSbutton_S3 = button(3);
 4a4:	80 b1       	in	r24, 0x00	; 0
 4a6:	80 95       	com	r24
 4a8:	88 1f       	adc	r24, r24
 4aa:	88 27       	eor	r24, r24
 4ac:	88 1f       	adc	r24, r24
 4ae:	90 91 13 01 	lds	r25, 0x0113
 4b2:	80 fb       	bst	r24, 0
 4b4:	93 f9       	bld	r25, 3
 4b6:	90 93 13 01 	sts	0x0113, r25
		return 0;
	}
	}
	return 0;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
}
 4bc:	08 95       	ret

000004be <setADC>:
 *      Author: time
 */


void setADC(uint8_t channel){
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
 4be:	90 91 7c 00 	lds	r25, 0x007C
 4c2:	90 7f       	andi	r25, 0xF0	; 240
 4c4:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel;
 4c8:	90 91 7c 00 	lds	r25, 0x007C
 4cc:	98 2b       	or	r25, r24
 4ce:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1 << ADSC);
 4d2:	80 91 7a 00 	lds	r24, 0x007A
 4d6:	80 64       	ori	r24, 0x40	; 64
 4d8:	80 93 7a 00 	sts	0x007A, r24
	while ((1 << ADSC) & ADCSRA) {}
 4dc:	80 91 7a 00 	lds	r24, 0x007A
 4e0:	86 fd       	sbrc	r24, 6
 4e2:	fc cf       	rjmp	.-8      	; 0x4dc <setADC+0x1e>


}
 4e4:	08 95       	ret

000004e6 <getData>:
uint16_t getData() {
	ADCSRA |= (1 << ADSC);
 4e6:	80 91 7a 00 	lds	r24, 0x007A
 4ea:	80 64       	ori	r24, 0x40	; 64
 4ec:	80 93 7a 00 	sts	0x007A, r24
	while ((1 << ADSC) & ADCSRA) {
 4f0:	80 91 7a 00 	lds	r24, 0x007A
 4f4:	86 fd       	sbrc	r24, 6
 4f6:	fc cf       	rjmp	.-8      	; 0x4f0 <getData+0xa>
	}
	return ADC;
 4f8:	20 91 78 00 	lds	r18, 0x0078
 4fc:	30 91 79 00 	lds	r19, 0x0079
}
 500:	c9 01       	movw	r24, r18
 502:	08 95       	ret

00000504 <__vector_3>:
 *
 *  Created on: 26.05.2012
 *      Author: time
 */

ISR( INT2_vect) {
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
	tickslinks++;
 512:	80 91 0e 01 	lds	r24, 0x010E
 516:	90 91 0f 01 	lds	r25, 0x010F
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	90 93 0f 01 	sts	0x010F, r25
 520:	80 93 0e 01 	sts	0x010E, r24
	if(tickslinks>100)ledOff(0);
 524:	80 91 0e 01 	lds	r24, 0x010E
 528:	90 91 0f 01 	lds	r25, 0x010F
 52c:	85 36       	cpi	r24, 0x65	; 101
 52e:	91 05       	cpc	r25, r1
 530:	10 f0       	brcs	.+4      	; 0x536 <__vector_3+0x32>
 532:	10 98       	cbi	0x02, 0	; 2
 534:	01 c0       	rjmp	.+2      	; 0x538 <__vector_3+0x34>
	else ledOn(0);
 536:	10 9a       	sbi	0x02, 0	; 2
}
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__vector_4>:

ISR( INT3_vect) {
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
	ticksrechts++;
 554:	80 91 0c 01 	lds	r24, 0x010C
 558:	90 91 0d 01 	lds	r25, 0x010D
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	90 93 0d 01 	sts	0x010D, r25
 562:	80 93 0c 01 	sts	0x010C, r24
	if(ticksrechts>100)ledOff(1);
 566:	80 91 0c 01 	lds	r24, 0x010C
 56a:	90 91 0d 01 	lds	r25, 0x010D
 56e:	85 36       	cpi	r24, 0x65	; 101
 570:	91 05       	cpc	r25, r1
 572:	10 f0       	brcs	.+4      	; 0x578 <__vector_4+0x32>
 574:	11 98       	cbi	0x02, 1	; 2
 576:	01 c0       	rjmp	.+2      	; 0x57a <__vector_4+0x34>
	else ledOn(1);
 578:	11 9a       	sbi	0x02, 1	; 2
}
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <line>:
 */

#ifndef REGLER_H_
#define REGLER_H_

void line() {
 588:	af 92       	push	r10
 58a:	bf 92       	push	r11
 58c:	cf 92       	push	r12
 58e:	df 92       	push	r13
 590:	ef 92       	push	r14
 592:	ff 92       	push	r15
	setADC(CNY70_1);
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	0e 94 5f 02 	call	0x4be	; 0x4be <setADC>
 59a:	f4 e0       	ldi	r31, 0x04	; 4
 59c:	cf 2e       	mov	r12, r31
 59e:	d1 2c       	mov	r13, r1
	uint16_t cny1 = 0;
 5a0:	e1 2c       	mov	r14, r1
 5a2:	f1 2c       	mov	r15, r1
	uint16_t cny2 = 0;
	for (int i = 0; i < 4; i++) {
		cny1 += getData();
 5a4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <getData>
 5a8:	e8 0e       	add	r14, r24
 5aa:	f9 1e       	adc	r15, r25
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	c2 1a       	sub	r12, r18
 5b0:	d1 08       	sbc	r13, r1

void line() {
	setADC(CNY70_1);
	uint16_t cny1 = 0;
	uint16_t cny2 = 0;
	for (int i = 0; i < 4; i++) {
 5b2:	c1 f7       	brne	.-16     	; 0x5a4 <line+0x1c>
		cny1 += getData();
	}
	cny1 >>= 2;
 5b4:	57 01       	movw	r10, r14
 5b6:	b6 94       	lsr	r11
 5b8:	a7 94       	ror	r10
 5ba:	b6 94       	lsr	r11
 5bc:	a7 94       	ror	r10
	setADC(CNY70_2);
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	0e 94 5f 02 	call	0x4be	; 0x4be <setADC>
 5c4:	e4 e0       	ldi	r30, 0x04	; 4
 5c6:	ce 2e       	mov	r12, r30
 5c8:	d1 2c       	mov	r13, r1
#define REGLER_H_

void line() {
	setADC(CNY70_1);
	uint16_t cny1 = 0;
	uint16_t cny2 = 0;
 5ca:	e1 2c       	mov	r14, r1
 5cc:	f1 2c       	mov	r15, r1
		cny1 += getData();
	}
	cny1 >>= 2;
	setADC(CNY70_2);
	for (int i = 0; i < 4; i++) {
		cny2 += getData();
 5ce:	0e 94 73 02 	call	0x4e6	; 0x4e6 <getData>
 5d2:	e8 0e       	add	r14, r24
 5d4:	f9 1e       	adc	r15, r25
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	c4 1a       	sub	r12, r20
 5da:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 4; i++) {
		cny1 += getData();
	}
	cny1 >>= 2;
	setADC(CNY70_2);
	for (int i = 0; i < 4; i++) {
 5dc:	c1 f7       	brne	.-16     	; 0x5ce <line+0x46>
		cny2 += getData();
	}
	cny2 >>= 2;
 5de:	97 01       	movw	r18, r14
 5e0:	36 95       	lsr	r19
 5e2:	27 95       	ror	r18
 5e4:	36 95       	lsr	r19
 5e6:	27 95       	ror	r18
 5e8:	80 91 14 01 	lds	r24, 0x0114
 5ec:	90 91 15 01 	lds	r25, 0x0115
	//rechts weiß
	if ((cny1 >= 800) && (cny2 < 800)) {
 5f0:	40 e2       	ldi	r20, 0x20	; 32
 5f2:	a4 16       	cp	r10, r20
 5f4:	43 e0       	ldi	r20, 0x03	; 3
 5f6:	b4 06       	cpc	r11, r20
 5f8:	08 f4       	brcc	.+2      	; 0x5fc <line+0x74>
 5fa:	67 c0       	rjmp	.+206    	; 0x6ca <line+0x142>
 5fc:	20 32       	cpi	r18, 0x20	; 32
 5fe:	33 40       	sbci	r19, 0x03	; 3
 600:	08 f0       	brcs	.+2      	; 0x604 <line+0x7c>
 602:	67 c0       	rjmp	.+206    	; 0x6d2 <line+0x14a>
		esum -= 4;
 604:	9c 01       	movw	r18, r24
 606:	24 50       	subi	r18, 0x04	; 4
 608:	31 09       	sbc	r19, r1
 60a:	30 93 15 01 	sts	0x0115, r19
 60e:	20 93 14 01 	sts	0x0114, r18
		//fahre links
		steuer(-80 + esum);
 612:	84 55       	subi	r24, 0x54	; 84
 614:	91 09       	sbc	r25, r1
 616:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <steuer>
		ledOn(1);
 61a:	11 9a       	sbi	0x02, 1	; 2
		richtung = links;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	6d c0       	rjmp	.+218    	; 0x6fa <line+0x172>
	}
	// links weiß
	if ((cny1 < 800) && (cny2 >= 800)) {
		//fahre rechts
		esum += 4;
 620:	9c 01       	movw	r18, r24
 622:	2c 5f       	subi	r18, 0xFC	; 252
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	30 93 15 01 	sts	0x0115, r19
 62a:	20 93 14 01 	sts	0x0114, r18
		steuer(80 + esum);
 62e:	8c 5a       	subi	r24, 0xAC	; 172
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <steuer>
		ledOn(0);
 636:	10 9a       	sbi	0x02, 0	; 2
		richtung = rechts;
 638:	10 92 10 01 	sts	0x0110, r1
 63c:	2b c0       	rjmp	.+86     	; 0x694 <line+0x10c>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 63e:	88 e5       	ldi	r24, 0x58	; 88
 640:	92 e0       	ldi	r25, 0x02	; 2
 642:	90 93 03 01 	sts	0x0103, r25
 646:	80 93 02 01 	sts	0x0102, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 64a:	88 ea       	ldi	r24, 0xA8	; 168
 64c:	9d ef       	ldi	r25, 0xFD	; 253
 64e:	90 93 01 01 	sts	0x0101, r25
 652:	80 93 00 01 	sts	0x0100, r24
	}
	//beide weiß
	if ((cny1 < 800) && (cny2 < 800)) {
		if (richtung == rechts) {
			steuer(600);
			ledOn(0);
 656:	10 9a       	sbi	0x02, 0	; 2
		}
		if (richtung == links) {
 658:	80 91 10 01 	lds	r24, 0x0110
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	69 f4       	brne	.+26     	; 0x67a <line+0xf2>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 660:	88 ea       	ldi	r24, 0xA8	; 168
 662:	9d ef       	ldi	r25, 0xFD	; 253
 664:	90 93 03 01 	sts	0x0103, r25
 668:	80 93 02 01 	sts	0x0102, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 66c:	88 e5       	ldi	r24, 0x58	; 88
 66e:	92 e0       	ldi	r25, 0x02	; 2
 670:	90 93 01 01 	sts	0x0101, r25
 674:	80 93 00 01 	sts	0x0100, r24
			steuer(-600);
			ledOn(1);
 678:	11 9a       	sbi	0x02, 1	; 2
		}
		esum >>= 4;
 67a:	80 91 14 01 	lds	r24, 0x0114
 67e:	90 91 15 01 	lds	r25, 0x0115
 682:	54 e0       	ldi	r21, 0x04	; 4
 684:	95 95       	asr	r25
 686:	87 95       	ror	r24
 688:	5a 95       	dec	r21
 68a:	e1 f7       	brne	.-8      	; 0x684 <line+0xfc>
 68c:	90 93 15 01 	sts	0x0115, r25
 690:	80 93 14 01 	sts	0x0114, r24

	}

	//Begrenzung I-Anteil
	if (esum < -100) {
 694:	80 91 14 01 	lds	r24, 0x0114
 698:	90 91 15 01 	lds	r25, 0x0115
 69c:	8c 39       	cpi	r24, 0x9C	; 156
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	34 f4       	brge	.+12     	; 0x6ae <line+0x126>
		esum = -100;
 6a2:	8c e9       	ldi	r24, 0x9C	; 156
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	90 93 15 01 	sts	0x0115, r25
 6aa:	80 93 14 01 	sts	0x0114, r24
	}
	if (esum > 100) {
 6ae:	80 91 14 01 	lds	r24, 0x0114
 6b2:	90 91 15 01 	lds	r25, 0x0115
 6b6:	85 36       	cpi	r24, 0x65	; 101
 6b8:	91 05       	cpc	r25, r1
 6ba:	3c f1       	brlt	.+78     	; 0x70a <line+0x182>
		esum = 100;
 6bc:	84 e6       	ldi	r24, 0x64	; 100
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 15 01 	sts	0x0115, r25
 6c4:	80 93 14 01 	sts	0x0114, r24
 6c8:	20 c0       	rjmp	.+64     	; 0x70a <line+0x182>
		steuer(-80 + esum);
		ledOn(1);
		richtung = links;
	}
	// links weiß
	if ((cny1 < 800) && (cny2 >= 800)) {
 6ca:	20 32       	cpi	r18, 0x20	; 32
 6cc:	33 40       	sbci	r19, 0x03	; 3
 6ce:	c0 f0       	brcs	.+48     	; 0x700 <line+0x178>
 6d0:	a7 cf       	rjmp	.-178    	; 0x620 <line+0x98>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 6d2:	10 92 03 01 	sts	0x0103, r1
 6d6:	10 92 02 01 	sts	0x0102, r1
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 6da:	10 92 01 01 	sts	0x0101, r1
 6de:	10 92 00 01 	sts	0x0100, r1
		richtung = rechts;
	}
	//beide schwarz
	if ((cny1 >= 800) && (cny2 >= 800)) {
		steuer(0);
		ledOff(0);
 6e2:	10 98       	cbi	0x02, 0	; 2
		ledOff(1);
 6e4:	11 98       	cbi	0x02, 1	; 2
		esum >>= 4;
 6e6:	44 e0       	ldi	r20, 0x04	; 4
 6e8:	95 95       	asr	r25
 6ea:	87 95       	ror	r24
 6ec:	4a 95       	dec	r20
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <line+0x160>
 6f0:	90 93 15 01 	sts	0x0115, r25
 6f4:	80 93 14 01 	sts	0x0114, r24
		richtung = gerade;
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	80 93 10 01 	sts	0x0110, r24
 6fe:	ca cf       	rjmp	.-108    	; 0x694 <line+0x10c>
	}
	//beide weiß
	if ((cny1 < 800) && (cny2 < 800)) {
		if (richtung == rechts) {
 700:	80 91 10 01 	lds	r24, 0x0110
 704:	81 11       	cpse	r24, r1
 706:	a8 cf       	rjmp	.-176    	; 0x658 <line+0xd0>
 708:	9a cf       	rjmp	.-204    	; 0x63e <line+0xb6>
		esum = -100;
	}
	if (esum > 100) {
		esum = 100;
	}
}
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	df 90       	pop	r13
 710:	cf 90       	pop	r12
 712:	bf 90       	pop	r11
 714:	af 90       	pop	r10
 716:	08 95       	ret

00000718 <dist>:

void dist() {
 718:	8f 92       	push	r8
 71a:	9f 92       	push	r9
 71c:	af 92       	push	r10
 71e:	bf 92       	push	r11
 720:	cf 92       	push	r12
 722:	df 92       	push	r13
 724:	ef 92       	push	r14
 726:	ff 92       	push	r15
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	0e 94 5f 02 	call	0x4be	; 0x4be <setADC>
 72e:	38 e0       	ldi	r19, 0x08	; 8
 730:	c3 2e       	mov	r12, r19
 732:	d1 2c       	mov	r13, r1
		esum = 100;
	}
}

void dist() {
	uint16_t dds1 = 0;
 734:	e1 2c       	mov	r14, r1
 736:	f1 2c       	mov	r15, r1
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
	for (int i = 0; i < 8; i++) {
		dds1 += getData();
 738:	0e 94 73 02 	call	0x4e6	; 0x4e6 <getData>
 73c:	e8 0e       	add	r14, r24
 73e:	f9 1e       	adc	r15, r25
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	c8 1a       	sub	r12, r24
 744:	d1 08       	sbc	r13, r1
void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
	for (int i = 0; i < 8; i++) {
 746:	c1 f7       	brne	.-16     	; 0x738 <dist+0x20>
		dds1 += getData();
	}
	dds1 >>= 3;
 748:	57 01       	movw	r10, r14
 74a:	93 e0       	ldi	r25, 0x03	; 3
 74c:	b6 94       	lsr	r11
 74e:	a7 94       	ror	r10
 750:	9a 95       	dec	r25
 752:	e1 f7       	brne	.-8      	; 0x74c <dist+0x34>
	setADC(ds2);
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 5f 02 	call	0x4be	; 0x4be <setADC>
 75a:	28 e0       	ldi	r18, 0x08	; 8
 75c:	c2 2e       	mov	r12, r18
 75e:	d1 2c       	mov	r13, r1
	}
}

void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
 760:	e1 2c       	mov	r14, r1
 762:	f1 2c       	mov	r15, r1
		dds1 += getData();
	}
	dds1 >>= 3;
	setADC(ds2);
	for (int i = 0; i < 8; i++) {
		dds2 += getData();
 764:	0e 94 73 02 	call	0x4e6	; 0x4e6 <getData>
 768:	e8 0e       	add	r14, r24
 76a:	f9 1e       	adc	r15, r25
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	c8 1a       	sub	r12, r24
 770:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 8; i++) {
		dds1 += getData();
	}
	dds1 >>= 3;
	setADC(ds2);
	for (int i = 0; i < 8; i++) {
 772:	c1 f7       	brne	.-16     	; 0x764 <dist+0x4c>
		dds2 += getData();
	}
	dds2 >>= 3;
 774:	47 01       	movw	r8, r14
 776:	b3 e0       	ldi	r27, 0x03	; 3
 778:	96 94       	lsr	r9
 77a:	87 94       	ror	r8
 77c:	ba 95       	dec	r27
 77e:	e1 f7       	brne	.-8      	; 0x778 <dist+0x60>
	setADC(ds3);
 780:	82 e0       	ldi	r24, 0x02	; 2
 782:	0e 94 5f 02 	call	0x4be	; 0x4be <setADC>
 786:	88 e0       	ldi	r24, 0x08	; 8
 788:	c8 2e       	mov	r12, r24
 78a:	d1 2c       	mov	r13, r1
}

void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
 78c:	e1 2c       	mov	r14, r1
 78e:	f1 2c       	mov	r15, r1
		dds2 += getData();
	}
	dds2 >>= 3;
	setADC(ds3);
	for (int i = 0; i < 8; i++) {
		dds3 += getData();
 790:	0e 94 73 02 	call	0x4e6	; 0x4e6 <getData>
 794:	e8 0e       	add	r14, r24
 796:	f9 1e       	adc	r15, r25
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	c8 1a       	sub	r12, r24
 79c:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 8; i++) {
		dds2 += getData();
	}
	dds2 >>= 3;
	setADC(ds3);
	for (int i = 0; i < 8; i++) {
 79e:	c1 f7       	brne	.-16     	; 0x790 <dist+0x78>
		dds3 += getData();
	}
	dds3 >>= 3;
 7a0:	a3 e0       	ldi	r26, 0x03	; 3
 7a2:	f6 94       	lsr	r15
 7a4:	e7 94       	ror	r14
 7a6:	aa 95       	dec	r26
 7a8:	e1 f7       	brne	.-8      	; 0x7a2 <dist+0x8a>
	if (dds2 > 200) {
 7aa:	89 ec       	ldi	r24, 0xC9	; 201
 7ac:	88 16       	cp	r8, r24
 7ae:	91 04       	cpc	r9, r1
 7b0:	d0 f0       	brcs	.+52     	; 0x7e6 <dist+0xce>
		if (dds1 > 200)
 7b2:	89 ec       	ldi	r24, 0xC9	; 201
 7b4:	a8 16       	cp	r10, r24
 7b6:	b1 04       	cpc	r11, r1
 7b8:	48 f0       	brcs	.+18     	; 0x7cc <dist+0xb4>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 7ba:	88 ea       	ldi	r24, 0xA8	; 168
 7bc:	9d ef       	ldi	r25, 0xFD	; 253
 7be:	90 93 03 01 	sts	0x0103, r25
 7c2:	80 93 02 01 	sts	0x0102, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 7c6:	88 e5       	ldi	r24, 0x58	; 88
 7c8:	92 e0       	ldi	r25, 0x02	; 2
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <dist+0xc4>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 7cc:	88 e5       	ldi	r24, 0x58	; 88
 7ce:	92 e0       	ldi	r25, 0x02	; 2
 7d0:	90 93 03 01 	sts	0x0103, r25
 7d4:	80 93 02 01 	sts	0x0102, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 7d8:	88 ea       	ldi	r24, 0xA8	; 168
 7da:	9d ef       	ldi	r25, 0xFD	; 253
 7dc:	90 93 01 01 	sts	0x0101, r25
 7e0:	80 93 00 01 	sts	0x0100, r24
 7e4:	0c c0       	rjmp	.+24     	; 0x7fe <dist+0xe6>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 7e6:	10 92 03 01 	sts	0x0103, r1
 7ea:	10 92 02 01 	sts	0x0102, r1
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 7ee:	10 92 01 01 	sts	0x0101, r1
 7f2:	10 92 00 01 	sts	0x0100, r1
		else
			steuer(600);

	} else
		steuer(0);
	if (dds1 > 200)
 7f6:	89 ec       	ldi	r24, 0xC9	; 201
 7f8:	a8 16       	cp	r10, r24
 7fa:	b1 04       	cpc	r11, r1
 7fc:	f0 f6       	brcc	.-68     	; 0x7ba <dist+0xa2>
		steuer(-600);
	if (dds3 > 200)
 7fe:	89 ec       	ldi	r24, 0xC9	; 201
 800:	e8 16       	cp	r14, r24
 802:	f1 04       	cpc	r15, r1
 804:	60 f0       	brcs	.+24     	; 0x81e <dist+0x106>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 806:	88 e5       	ldi	r24, 0x58	; 88
 808:	92 e0       	ldi	r25, 0x02	; 2
 80a:	90 93 03 01 	sts	0x0103, r25
 80e:	80 93 02 01 	sts	0x0102, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 812:	88 ea       	ldi	r24, 0xA8	; 168
 814:	9d ef       	ldi	r25, 0xFD	; 253
 816:	90 93 01 01 	sts	0x0101, r25
 81a:	80 93 00 01 	sts	0x0100, r24
		steuer(600);

}
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	df 90       	pop	r13
 824:	cf 90       	pop	r12
 826:	bf 90       	pop	r11
 828:	af 90       	pop	r10
 82a:	9f 90       	pop	r9
 82c:	8f 90       	pop	r8
 82e:	08 95       	ret

00000830 <strecke>:

void strecke(uint16_t s){
 830:	ef 92       	push	r14
 832:	ff 92       	push	r15
	int el=s-tickslinks;
 834:	20 91 0e 01 	lds	r18, 0x010E
 838:	30 91 0f 01 	lds	r19, 0x010F
 83c:	bc 01       	movw	r22, r24
 83e:	62 1b       	sub	r22, r18
 840:	73 0b       	sbc	r23, r19
	int er=s-ticksrechts;
 842:	20 91 0c 01 	lds	r18, 0x010C
 846:	30 91 0d 01 	lds	r19, 0x010D
 84a:	7c 01       	movw	r14, r24
 84c:	e2 1a       	sub	r14, r18
 84e:	f3 0a       	sbc	r15, r19
	esuml+=el;
 850:	80 91 11 01 	lds	r24, 0x0111
 854:	90 91 12 01 	lds	r25, 0x0112
 858:	86 0f       	add	r24, r22
 85a:	97 1f       	adc	r25, r23
 85c:	90 93 12 01 	sts	0x0112, r25
 860:	80 93 11 01 	sts	0x0111, r24
	esumr+=er;
 864:	40 91 16 01 	lds	r20, 0x0116
 868:	50 91 17 01 	lds	r21, 0x0117
 86c:	4e 0d       	add	r20, r14
 86e:	5f 1d       	adc	r21, r15
 870:	50 93 17 01 	sts	0x0117, r21
 874:	40 93 16 01 	sts	0x0116, r20
	modMotorSpeed_1(el+esuml);
 878:	86 0f       	add	r24, r22
 87a:	97 1f       	adc	r25, r23
 87c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <modMotorSpeed_1>
	modMotorSpeed_2(er-esuml);
 880:	80 91 11 01 	lds	r24, 0x0111
 884:	90 91 12 01 	lds	r25, 0x0112
 888:	97 01       	movw	r18, r14
 88a:	28 1b       	sub	r18, r24
 88c:	39 0b       	sbc	r19, r25
 88e:	c9 01       	movw	r24, r18
 890:	0e 94 9b 01 	call	0x336	; 0x336 <modMotorSpeed_2>
	if (esuml < -200) {
 894:	80 91 11 01 	lds	r24, 0x0111
 898:	90 91 12 01 	lds	r25, 0x0112
 89c:	88 33       	cpi	r24, 0x38	; 56
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	34 f4       	brge	.+12     	; 0x8ae <strecke+0x7e>
		esuml = -200;
 8a2:	88 e3       	ldi	r24, 0x38	; 56
 8a4:	9f ef       	ldi	r25, 0xFF	; 255
 8a6:	90 93 12 01 	sts	0x0112, r25
 8aa:	80 93 11 01 	sts	0x0111, r24
	}
	if (esuml > 200) {
 8ae:	80 91 11 01 	lds	r24, 0x0111
 8b2:	90 91 12 01 	lds	r25, 0x0112
 8b6:	89 3c       	cpi	r24, 0xC9	; 201
 8b8:	91 05       	cpc	r25, r1
 8ba:	34 f0       	brlt	.+12     	; 0x8c8 <strecke+0x98>
		esuml = 200;
 8bc:	88 ec       	ldi	r24, 0xC8	; 200
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	90 93 12 01 	sts	0x0112, r25
 8c4:	80 93 11 01 	sts	0x0111, r24
	}
	if (esumr < -200) {
 8c8:	80 91 16 01 	lds	r24, 0x0116
 8cc:	90 91 17 01 	lds	r25, 0x0117
 8d0:	88 33       	cpi	r24, 0x38	; 56
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	34 f4       	brge	.+12     	; 0x8e2 <strecke+0xb2>
		esumr = -200;
 8d6:	88 e3       	ldi	r24, 0x38	; 56
 8d8:	9f ef       	ldi	r25, 0xFF	; 255
 8da:	90 93 17 01 	sts	0x0117, r25
 8de:	80 93 16 01 	sts	0x0116, r24
	}
	if (esumr > 200) {
 8e2:	80 91 16 01 	lds	r24, 0x0116
 8e6:	90 91 17 01 	lds	r25, 0x0117
 8ea:	89 3c       	cpi	r24, 0xC9	; 201
 8ec:	91 05       	cpc	r25, r1
 8ee:	34 f0       	brlt	.+12     	; 0x8fc <strecke+0xcc>
		esumr = 200;
 8f0:	88 ec       	ldi	r24, 0xC8	; 200
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	90 93 17 01 	sts	0x0117, r25
 8f8:	80 93 16 01 	sts	0x0116, r24
	}
}
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	08 95       	ret

00000902 <blink>:
 *
 *  Created on: 24.05.2012
 *      Author: time
 */
void blink(int8_t x) {
	ledOff(0);
 902:	10 98       	cbi	0x02, 0	; 2
	ledOff(1);
 904:	11 98       	cbi	0x02, 1	; 2
	ledOff(2);
 906:	12 98       	cbi	0x02, 2	; 2
	ledOff(3);
 908:	13 98       	cbi	0x02, 3	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 90a:	2f ef       	ldi	r18, 0xFF	; 255
 90c:	33 ec       	ldi	r19, 0xC3	; 195
 90e:	49 e0       	ldi	r20, 0x09	; 9
 910:	21 50       	subi	r18, 0x01	; 1
 912:	30 40       	sbci	r19, 0x00	; 0
 914:	40 40       	sbci	r20, 0x00	; 0
 916:	e1 f7       	brne	.-8      	; 0x910 <blink+0xe>
 918:	00 c0       	rjmp	.+0      	; 0x91a <blink+0x18>
 91a:	00 00       	nop
	_delay_ms(200);
	for (int i = 0; i < x; i++) {
 91c:	20 e0       	ldi	r18, 0x00	; 0
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	99 27       	eor	r25, r25
 922:	87 fd       	sbrc	r24, 7
 924:	90 95       	com	r25
 926:	1c c0       	rjmp	.+56     	; 0x960 <blink+0x5e>
		ledOn(0);
 928:	10 9a       	sbi	0x02, 0	; 2
		ledOn(1);
 92a:	11 9a       	sbi	0x02, 1	; 2
		ledOn(2);
 92c:	12 9a       	sbi	0x02, 2	; 2
		ledOn(3);
 92e:	13 9a       	sbi	0x02, 3	; 2
 930:	5f ef       	ldi	r21, 0xFF	; 255
 932:	63 ec       	ldi	r22, 0xC3	; 195
 934:	49 e0       	ldi	r20, 0x09	; 9
 936:	51 50       	subi	r21, 0x01	; 1
 938:	60 40       	sbci	r22, 0x00	; 0
 93a:	40 40       	sbci	r20, 0x00	; 0
 93c:	e1 f7       	brne	.-8      	; 0x936 <blink+0x34>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <blink+0x3e>
 940:	00 00       	nop
		_delay_ms(200);
		ledOff(0);
 942:	10 98       	cbi	0x02, 0	; 2
		ledOff(1);
 944:	11 98       	cbi	0x02, 1	; 2
		ledOff(2);
 946:	12 98       	cbi	0x02, 2	; 2
		ledOff(3);
 948:	13 98       	cbi	0x02, 3	; 2
 94a:	5f ef       	ldi	r21, 0xFF	; 255
 94c:	63 ec       	ldi	r22, 0xC3	; 195
 94e:	49 e0       	ldi	r20, 0x09	; 9
 950:	51 50       	subi	r21, 0x01	; 1
 952:	60 40       	sbci	r22, 0x00	; 0
 954:	40 40       	sbci	r20, 0x00	; 0
 956:	e1 f7       	brne	.-8      	; 0x950 <blink+0x4e>
 958:	00 c0       	rjmp	.+0      	; 0x95a <blink+0x58>
 95a:	00 00       	nop
	ledOff(0);
	ledOff(1);
	ledOff(2);
	ledOff(3);
	_delay_ms(200);
	for (int i = 0; i < x; i++) {
 95c:	2f 5f       	subi	r18, 0xFF	; 255
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	28 17       	cp	r18, r24
 962:	39 07       	cpc	r19, r25
 964:	0c f3       	brlt	.-62     	; 0x928 <blink+0x26>
		ledOff(2);
		ledOff(3);
		_delay_ms(200);
	}

}
 966:	08 95       	ret

00000968 <display>:

void display(int16_t number) {
 968:	ef 92       	push	r14
 96a:	ff 92       	push	r15
 96c:	7c 01       	movw	r14, r24
	blink(1);
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	0e 94 81 04 	call	0x902	; 0x902 <blink>
	ledOff(0);
 974:	10 98       	cbi	0x02, 0	; 2
	ledOff(1);
 976:	11 98       	cbi	0x02, 1	; 2
	ledOff(2);
 978:	12 98       	cbi	0x02, 2	; 2
	ledOff(3);
 97a:	13 98       	cbi	0x02, 3	; 2
	if (number & (1 << 0)) {
 97c:	e0 fc       	sbrc	r14, 0
		ledOn(0);
 97e:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 1)) {
 980:	e1 fc       	sbrc	r14, 1
		ledOn(1);
 982:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 2)) {
 984:	e2 fc       	sbrc	r14, 2
		ledOn(2);
 986:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 3)) {
 988:	e3 fc       	sbrc	r14, 3
		ledOn(3);
 98a:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 992:	88 23       	and	r24, r24
 994:	d9 f3       	breq	.-10     	; 0x98c <display+0x24>
			break;
	}
	blink(2);
 996:	82 e0       	ldi	r24, 0x02	; 2
 998:	0e 94 81 04 	call	0x902	; 0x902 <blink>
	if (number & (1 << 4)) {
 99c:	e4 fc       	sbrc	r14, 4
		ledOn(0);
 99e:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 5)) {
 9a0:	e5 fc       	sbrc	r14, 5
		ledOn(1);
 9a2:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 6)) {
 9a4:	e6 fc       	sbrc	r14, 6
		ledOn(2);
 9a6:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 7)) {
 9a8:	e7 fc       	sbrc	r14, 7
		ledOn(3);
 9aa:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 9b2:	88 23       	and	r24, r24
 9b4:	d9 f3       	breq	.-10     	; 0x9ac <display+0x44>
			break;
	}
	blink(3);
 9b6:	83 e0       	ldi	r24, 0x03	; 3
 9b8:	0e 94 81 04 	call	0x902	; 0x902 <blink>
	if (number & (1 << 8)) {
 9bc:	f0 fc       	sbrc	r15, 0
		ledOn(0);
 9be:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 9)) {
 9c0:	f1 fc       	sbrc	r15, 1
		ledOn(1);
 9c2:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 10)) {
 9c4:	f2 fc       	sbrc	r15, 2
		ledOn(2);
 9c6:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 11)) {
 9c8:	f3 fc       	sbrc	r15, 3
		ledOn(3);
 9ca:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 9d2:	88 23       	and	r24, r24
 9d4:	d9 f3       	breq	.-10     	; 0x9cc <display+0x64>
			break;
	}
	blink(4);
 9d6:	84 e0       	ldi	r24, 0x04	; 4
 9d8:	0e 94 81 04 	call	0x902	; 0x902 <blink>
	if (number & (1 << 12)) {
 9dc:	f4 fc       	sbrc	r15, 4
		ledOn(0);
 9de:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 13)) {
 9e0:	f5 fc       	sbrc	r15, 5
		ledOn(1);
 9e2:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 14)) {
 9e4:	f6 fc       	sbrc	r15, 6
		ledOn(2);
 9e6:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 15)) {
 9e8:	f7 fc       	sbrc	r15, 7
		ledOn(3);
 9ea:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 9f2:	88 23       	and	r24, r24
 9f4:	d9 f3       	breq	.-10     	; 0x9ec <display+0x84>
			break;
	}

}
 9f6:	ff 90       	pop	r15
 9f8:	ef 90       	pop	r14
 9fa:	08 95       	ret

000009fc <bar>:

void bar(int8_t channel){
 9fc:	cf 92       	push	r12
 9fe:	df 92       	push	r13
 a00:	ef 92       	push	r14
 a02:	ff 92       	push	r15
	setADC(channel);
 a04:	0e 94 5f 02 	call	0x4be	; 0x4be <setADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a08:	83 ef       	ldi	r24, 0xF3	; 243
 a0a:	91 e0       	ldi	r25, 0x01	; 1
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	f1 f7       	brne	.-4      	; 0xa0c <bar+0x10>
 a10:	00 c0       	rjmp	.+0      	; 0xa12 <bar+0x16>
 a12:	00 00       	nop
 a14:	58 e0       	ldi	r21, 0x08	; 8
 a16:	c5 2e       	mov	r12, r21
 a18:	d1 2c       	mov	r13, r1
	int16_t data=0;
 a1a:	e1 2c       	mov	r14, r1
 a1c:	f1 2c       	mov	r15, r1
	_delay_us(125);
	for (int i = 0; i < 8; i++) {
			data += getData();
 a1e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <getData>
 a22:	e8 0e       	add	r14, r24
 a24:	f9 1e       	adc	r15, r25
 a26:	91 e0       	ldi	r25, 0x01	; 1
 a28:	c9 1a       	sub	r12, r25
 a2a:	d1 08       	sbc	r13, r1

void bar(int8_t channel){
	setADC(channel);
	int16_t data=0;
	_delay_us(125);
	for (int i = 0; i < 8; i++) {
 a2c:	c1 f7       	brne	.-16     	; 0xa1e <bar+0x22>
			data += getData();
		}
		data >>= 3;
 a2e:	c7 01       	movw	r24, r14
 a30:	43 e0       	ldi	r20, 0x03	; 3
 a32:	95 95       	asr	r25
 a34:	87 95       	ror	r24
 a36:	4a 95       	dec	r20
 a38:	e1 f7       	brne	.-8      	; 0xa32 <bar+0x36>
	if (data < 100) {
 a3a:	84 36       	cpi	r24, 0x64	; 100
 a3c:	91 05       	cpc	r25, r1
 a3e:	24 f4       	brge	.+8      	; 0xa48 <bar+0x4c>
				ledOff(0);
 a40:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 a42:	11 98       	cbi	0x02, 1	; 2
				ledOff(2);
 a44:	12 98       	cbi	0x02, 2	; 2
				ledOff(3);
 a46:	13 98       	cbi	0x02, 3	; 2
			}
			if (data < 300 && data >= 100) {
 a48:	9c 01       	movw	r18, r24
 a4a:	24 56       	subi	r18, 0x64	; 100
 a4c:	31 09       	sbc	r19, r1
 a4e:	28 3c       	cpi	r18, 0xC8	; 200
 a50:	31 05       	cpc	r19, r1
 a52:	20 f4       	brcc	.+8      	; 0xa5c <bar+0x60>
				ledOff(0);
 a54:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 a56:	11 98       	cbi	0x02, 1	; 2
				ledOff(2);
 a58:	12 98       	cbi	0x02, 2	; 2
				ledOn(3);
 a5a:	13 9a       	sbi	0x02, 3	; 2
			}
			if (data < 500 && data >= 300) {
 a5c:	9c 01       	movw	r18, r24
 a5e:	2c 52       	subi	r18, 0x2C	; 44
 a60:	31 40       	sbci	r19, 0x01	; 1
 a62:	28 3c       	cpi	r18, 0xC8	; 200
 a64:	31 05       	cpc	r19, r1
 a66:	20 f4       	brcc	.+8      	; 0xa70 <bar+0x74>
				ledOff(0);
 a68:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 a6a:	11 98       	cbi	0x02, 1	; 2
				ledOn(2);
 a6c:	12 9a       	sbi	0x02, 2	; 2
				ledOn(3);
 a6e:	13 9a       	sbi	0x02, 3	; 2
			}
			if (data < 800 && data >= 500) {
 a70:	9c 01       	movw	r18, r24
 a72:	24 5f       	subi	r18, 0xF4	; 244
 a74:	31 40       	sbci	r19, 0x01	; 1
 a76:	2c 32       	cpi	r18, 0x2C	; 44
 a78:	31 40       	sbci	r19, 0x01	; 1
 a7a:	10 f4       	brcc	.+4      	; 0xa80 <bar+0x84>
				ledOff(0);
 a7c:	10 98       	cbi	0x02, 0	; 2
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <bar+0x8c>
				ledOn(1);
				ledOn(2);
				ledOn(3);
			}
			if (data >= 800) {
 a80:	80 32       	cpi	r24, 0x20	; 32
 a82:	93 40       	sbci	r25, 0x03	; 3
 a84:	24 f0       	brlt	.+8      	; 0xa8e <bar+0x92>
				ledOn(0);
 a86:	10 9a       	sbi	0x02, 0	; 2
				ledOn(1);
 a88:	11 9a       	sbi	0x02, 1	; 2
				ledOn(2);
 a8a:	12 9a       	sbi	0x02, 2	; 2
				ledOn(3);
 a8c:	13 9a       	sbi	0x02, 3	; 2
			}
}
 a8e:	ff 90       	pop	r15
 a90:	ef 90       	pop	r14
 a92:	df 90       	pop	r13
 a94:	cf 90       	pop	r12
 a96:	08 95       	ret

00000a98 <main>:
#include "interrupt.h"
#include "regler.h"
#include "debug.h"

int main(void) {
	init();
 a98:	0e 94 5e 00 	call	0xbc	; 0xbc <init>
	sei();
 a9c:	78 94       	sei
	//enableACD();
	//lineInit();
	//distInit();
	VccOn(6);
 a9e:	46 98       	cbi	0x08, 6	; 8
	VccOn(7);
 aa0:	47 98       	cbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 aa2:	2f ef       	ldi	r18, 0xFF	; 255
 aa4:	81 ee       	ldi	r24, 0xE1	; 225
 aa6:	94 e0       	ldi	r25, 0x04	; 4
 aa8:	21 50       	subi	r18, 0x01	; 1
 aaa:	80 40       	sbci	r24, 0x00	; 0
 aac:	90 40       	sbci	r25, 0x00	; 0
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <main+0x10>
 ab0:	00 c0       	rjmp	.+0      	; 0xab2 <main+0x1a>
 ab2:	00 00       	nop
	_delay_ms(100);
	while (1) {
		//line();
		//dist();
		if (tickslinks < 500)
 ab4:	80 91 0e 01 	lds	r24, 0x010E
 ab8:	90 91 0f 01 	lds	r25, 0x010F
 abc:	84 3f       	cpi	r24, 0xF4	; 244
 abe:	91 40       	sbci	r25, 0x01	; 1
 ac0:	18 f4       	brcc	.+6      	; 0xac8 <main+0x30>
			setMotorBaseSpeed_1(500);
 ac2:	84 ef       	ldi	r24, 0xF4	; 244
 ac4:	91 e0       	ldi	r25, 0x01	; 1
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <main+0x34>
		else
			setMotorBaseSpeed_1(0);
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 0c 01 	call	0x218	; 0x218 <setMotorBaseSpeed_1>

		if (ticksrechts < 500)
 ad0:	80 91 0c 01 	lds	r24, 0x010C
 ad4:	90 91 0d 01 	lds	r25, 0x010D
 ad8:	84 3f       	cpi	r24, 0xF4	; 244
 ada:	91 40       	sbci	r25, 0x01	; 1
 adc:	18 f4       	brcc	.+6      	; 0xae4 <main+0x4c>
			setMotorBaseSpeed_2(500);
 ade:	84 ef       	ldi	r24, 0xF4	; 244
 ae0:	91 e0       	ldi	r25, 0x01	; 1
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <main+0x50>
		else
			setMotorBaseSpeed_2(0);
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 1f 01 	call	0x23e	; 0x23e <setMotorBaseSpeed_2>

		if (pushButton(2)) {
 aec:	82 e0       	ldi	r24, 0x02	; 2
 aee:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 af2:	88 23       	and	r24, r24
 af4:	41 f0       	breq	.+16     	; 0xb06 <main+0x6e>
			modMotorBaseSpeed_1(50);
 af6:	82 e3       	ldi	r24, 0x32	; 50
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 32 01 	call	0x264	; 0x264 <modMotorBaseSpeed_1>
			modMotorBaseSpeed_2(50);
 afe:	82 e3       	ldi	r24, 0x32	; 50
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0e 94 55 01 	call	0x2aa	; 0x2aa <modMotorBaseSpeed_2>
		}
		if (pushButton(0)) {
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 b0c:	88 23       	and	r24, r24
 b0e:	41 f0       	breq	.+16     	; 0xb20 <main+0x88>
			modMotorBaseSpeed_1(-50);
 b10:	8e ec       	ldi	r24, 0xCE	; 206
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	0e 94 32 01 	call	0x264	; 0x264 <modMotorBaseSpeed_1>
			modMotorBaseSpeed_2(-50);
 b18:	8e ec       	ldi	r24, 0xCE	; 206
 b1a:	9f ef       	ldi	r25, 0xFF	; 255
 b1c:	0e 94 55 01 	call	0x2aa	; 0x2aa <modMotorBaseSpeed_2>
		}
		if (pushButton(0)) {
 b20:	80 e0       	ldi	r24, 0x00	; 0
 b22:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 b26:	88 23       	and	r24, r24
 b28:	41 f0       	breq	.+16     	; 0xb3a <main+0xa2>
			modMotorBaseSpeed_1(-50);
 b2a:	8e ec       	ldi	r24, 0xCE	; 206
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
 b2e:	0e 94 32 01 	call	0x264	; 0x264 <modMotorBaseSpeed_1>
			modMotorBaseSpeed_2(-50);
 b32:	8e ec       	ldi	r24, 0xCE	; 206
 b34:	9f ef       	ldi	r25, 0xFF	; 255
 b36:	0e 94 55 01 	call	0x2aa	; 0x2aa <modMotorBaseSpeed_2>
		}
		if (pushButton(1)) {
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	0e 94 06 02 	call	0x40c	; 0x40c <pushButton>
 b40:	88 23       	and	r24, r24
 b42:	41 f0       	breq	.+16     	; 0xb54 <main+0xbc>
			modMotorBaseSpeed_1(255);
 b44:	8f ef       	ldi	r24, 0xFF	; 255
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 32 01 	call	0x264	; 0x264 <modMotorBaseSpeed_1>
			modMotorBaseSpeed_2(255);
 b4c:	8f ef       	ldi	r24, 0xFF	; 255
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 55 01 	call	0x2aa	; 0x2aa <modMotorBaseSpeed_2>
		}
		adjSpeed();
 b54:	0e 94 c8 01 	call	0x390	; 0x390 <adjSpeed>
	}
 b58:	ad cf       	rjmp	.-166    	; 0xab4 <main+0x1c>

00000b5a <_exit>:
 b5a:	f8 94       	cli

00000b5c <__stop_program>:
 b5c:	ff cf       	rjmp	.-2      	; 0xb5c <__stop_program>
