
PKESintro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000bfc  00000c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800118  00800118  00000ca8  2**0
                  ALLOC
  3 .stab         000023d0  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e6d  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ee5  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_3>
  10:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_4>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec ef       	ldi	r30, 0xFC	; 252
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a8 31       	cpi	r26, 0x18	; 24
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a8 e1       	ldi	r26, 0x18	; 24
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 35       	cpi	r26, 0x51	; 81
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 ef 05 	call	0xbde	; 0xbde <main>
  ce:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <init>:
	//     - intermediate
	//       DDRA=1+2+4+8;
	//     - using processor makros
	//       DDRA=((1<<DDA0) | (1<<DDA1) | (1<<DDA2) | (1<<DDA3));
	//     - using hardware specific makros
	DDRA |= ((1 << LED_0) | (1 << LED_1) | (1 << LED_2) | (1 << LED_3));
  d6:	81 b1       	in	r24, 0x01	; 1
  d8:	8f 60       	ori	r24, 0x0F	; 15
  da:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xff;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 b9       	out	0x07, r24	; 7
	// disable leds
	PORTA &= ~((1 << LED_0) | (1 << LED_1) | (1 << LED_2) | (1 << LED_3));
  e0:	82 b1       	in	r24, 0x02	; 2
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	82 b9       	out	0x02, r24	; 2
	//--------------------------------  ADMUX  -------------------------------
	//interne Referenz setzen
	ADMUX |= ((1 << REFS0) | (1 << REFS1));
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 6c       	ori	r24, 0xC0	; 192
  ee:	80 83       	st	Z, r24
	//adc rechtsbuendig
	ADMUX &= ~(1 << ADLAR);
  f0:	80 81       	ld	r24, Z
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	80 83       	st	Z, r24
	//kanal 0 setzen
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
  f6:	80 81       	ld	r24, Z
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	80 83       	st	Z, r24
	//-------------------------------- ADCSRA -------------------------------
	//vorteiler auf 128
	ADCSRA |= ((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	87 60       	ori	r24, 0x07	; 7
 104:	80 83       	st	Z, r24

	//---------------------------------- PWM --------------------------------
	DDRB |= ((1 << OC1A) | (1 << OC1B)); //OC1A/OC1B auf Ausgang
 106:	84 b1       	in	r24, 0x04	; 4
 108:	80 66       	ori	r24, 0x60	; 96
 10a:	84 b9       	out	0x04, r24	; 4
	TCCR1A = ((1 << WGM10) | (1 << COM1A1) | (1 << COM1B1)); // PMW-Mode (1) Phase Correct, 8 Bit
 10c:	81 ea       	ldi	r24, 0xA1	; 161
 10e:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = ((1 << CS11) | (1 << CS10)); // Prescaler auf 64
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	80 93 81 00 	sts	0x0081, r24

	//--------------------------------- Motor -------------------------------
	// PortE 2/3 auf Ausgang (Motor_1 rechts)
	DDRE |= ((1 << 2) | (1 << 3));
 118:	8d b1       	in	r24, 0x0d	; 13
 11a:	8c 60       	ori	r24, 0x0C	; 12
 11c:	8d b9       	out	0x0d, r24	; 13
	PORTE &= ~(1 << 2);
 11e:	72 98       	cbi	0x0e, 2	; 14
	PORTE |= (1 << 3);
 120:	73 9a       	sbi	0x0e, 3	; 14
	// PortG 0/1 auf Ausgang (Motor_2 links)
	DDRG |= ((1 << 0) | (1 << 1));
 122:	83 b3       	in	r24, 0x13	; 19
 124:	83 60       	ori	r24, 0x03	; 3
 126:	83 bb       	out	0x13, r24	; 19
	PORTG &= ~(1 << 1);
 128:	a1 98       	cbi	0x14, 1	; 20
	PORTG |= (1 << 0);
 12a:	a0 9a       	sbi	0x14, 0	; 20
	OCR1A = 0;
 12c:	10 92 89 00 	sts	0x0089, r1
 130:	10 92 88 00 	sts	0x0088, r1
	// PWM 1 auf null
	OCR1B = 0;
 134:	10 92 8b 00 	sts	0x008B, r1
 138:	10 92 8a 00 	sts	0x008A, r1
	// PWM 2 auf null
	//---------------------------------- Space --------------------------------
	S.bSbutton_S0 = 0;
 13c:	80 91 4c 01 	lds	r24, 0x014C
	S.bSbutton_S1 = 0;
	S.bSbutton_S2 = 0;
	S.bSbutton_S3 = 0;
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	87 7f       	andi	r24, 0xF7	; 247
 144:	80 93 4c 01 	sts	0x014C, r24
	tickslinks = 0;
 148:	10 92 48 01 	sts	0x0148, r1
 14c:	10 92 47 01 	sts	0x0147, r1
	ticksrechts = 0;
 150:	10 92 46 01 	sts	0x0146, r1
 154:	10 92 45 01 	sts	0x0145, r1
	richtung = gerade;
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 93 49 01 	sts	0x0149, r24
	 //--------------------------------- UART ----------------------------------
	 */
	/* Set baud rate */
	//DDRD=0;
	//DDRD|=(1 << 3);
	UBRR1H = UBRRH_VALUE;
 15e:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = UBRRL_VALUE;
 162:	83 e3       	ldi	r24, 0x33	; 51
 164:	80 93 cc 00 	sts	0x00CC, r24
	/* Set frame format: 8data, no parity & 2 stop bits */
	UCSR1C = (0 << UMSEL1) | (0 << UPM1) | (1 << USBS1) | (3 << UCSZ1);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	80 93 ca 00 	sts	0x00CA, r24
	/* Enable receiver and transmitter */
	UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
 16e:	88 e9       	ldi	r24, 0x98	; 152
 170:	80 93 c9 00 	sts	0x00C9, r24
 174:	08 95       	ret

00000176 <lineInit>:
}

void lineInit() {
	VccOn(CNY70_1);
 176:	44 98       	cbi	0x08, 4	; 8
	VccOn(CNY70_2);
 178:	43 98       	cbi	0x08, 3	; 8
 17a:	08 95       	ret

0000017c <distInit>:
}

void distInit() {
	VccOn(ds1);
 17c:	40 98       	cbi	0x08, 0	; 8
	VccOn(ds2);
 17e:	41 98       	cbi	0x08, 1	; 8
	VccOn(ds3);
 180:	42 98       	cbi	0x08, 2	; 8
 182:	08 95       	ret

00000184 <stopall>:
 *  Created on: 24.05.2012
 *      Author: time
 */

void stopall() {
	Motor_old_1_Speed=Motor_1_Speed;
 184:	80 91 22 01 	lds	r24, 0x0122
 188:	90 91 23 01 	lds	r25, 0x0123
 18c:	90 93 1f 01 	sts	0x011F, r25
 190:	80 93 1e 01 	sts	0x011E, r24
	Motor_old_2_Speed=Motor_2_Speed;
 194:	80 91 20 01 	lds	r24, 0x0120
 198:	90 91 21 01 	lds	r25, 0x0121
 19c:	90 93 1d 01 	sts	0x011D, r25
 1a0:	80 93 1c 01 	sts	0x011C, r24
	Motor_1_Speed = 0;
 1a4:	10 92 23 01 	sts	0x0123, r1
 1a8:	10 92 22 01 	sts	0x0122, r1
	Motor_2_Speed = 0;
 1ac:	10 92 21 01 	sts	0x0121, r1
 1b0:	10 92 20 01 	sts	0x0120, r1
	Motor_1_adjSpeed = 0;
 1b4:	10 92 1b 01 	sts	0x011B, r1
 1b8:	10 92 1a 01 	sts	0x011A, r1
	Motor_2_adjSpeed = 0;
 1bc:	10 92 19 01 	sts	0x0119, r1
 1c0:	10 92 18 01 	sts	0x0118, r1
 1c4:	08 95       	ret

000001c6 <setSpeed_1>:

}
void setSpeed_1(int16_t speed) {
	if (speed >= 0) {
 1c6:	97 fd       	sbrc	r25, 7
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <setSpeed_1+0xa>
		// motor_1 vorw√§rts
		PORTE &= ~(1 << 3);
 1ca:	73 98       	cbi	0x0e, 3	; 14
		PORTE |= (1 << 2);
 1cc:	72 9a       	sbi	0x0e, 2	; 14
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <setSpeed_1+0x20>
	} else {
		speed = -speed;
		if (speed > 255)
			speed = 255;
		// motor_1 r√ºckw√§rts
		PORTE &= ~(1 << 2);
 1d0:	72 98       	cbi	0x0e, 2	; 14
		PORTE |= (1 << 3);
 1d2:	73 9a       	sbi	0x0e, 3	; 14
		OCR1A = speed;
 1d4:	91 95       	neg	r25
 1d6:	81 95       	neg	r24
 1d8:	91 09       	sbc	r25, r1
 1da:	8f 3f       	cpi	r24, 0xFF	; 255
 1dc:	91 05       	cpc	r25, r1
 1de:	19 f0       	breq	.+6      	; 0x1e6 <setSpeed_1+0x20>
 1e0:	14 f0       	brlt	.+4      	; 0x1e6 <setSpeed_1+0x20>
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 89 00 	sts	0x0089, r25
 1ea:	80 93 88 00 	sts	0x0088, r24
 1ee:	08 95       	ret

000001f0 <steuer>:
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 1f0:	90 93 1b 01 	sts	0x011B, r25
 1f4:	80 93 1a 01 	sts	0x011A, r24
	}
}

void steuer(int16_t richtung) {
	setMotorSpeed_1(richtung);
	setMotorSpeed_2(-richtung);
 1f8:	91 95       	neg	r25
 1fa:	81 95       	neg	r24
 1fc:	91 09       	sbc	r25, r1
}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 1fe:	90 93 19 01 	sts	0x0119, r25
 202:	80 93 18 01 	sts	0x0118, r24
 206:	08 95       	ret

00000208 <setSpeed_2>:
	setMotorSpeed_1(richtung);
	setMotorSpeed_2(-richtung);
}

void setSpeed_2(int16_t speed) {
	if (speed >= 0) {
 208:	97 fd       	sbrc	r25, 7
 20a:	03 c0       	rjmp	.+6      	; 0x212 <setSpeed_2+0xa>
		// motor_2 vorw√§rts
		PORTG &= ~(1 << 0);
 20c:	a0 98       	cbi	0x14, 0	; 20
		PORTG |= (1 << 1);
 20e:	a1 9a       	sbi	0x14, 1	; 20
 210:	0b c0       	rjmp	.+22     	; 0x228 <setSpeed_2+0x20>
	} else {
		speed = -speed;
		if (speed > 255)
			speed = 255;
		// motor_2 r√ºckw√§rts
		PORTG &= ~(1 << 1);
 212:	a1 98       	cbi	0x14, 1	; 20
		PORTG |= (1 << 0);
 214:	a0 9a       	sbi	0x14, 0	; 20

		OCR1B = speed;
 216:	91 95       	neg	r25
 218:	81 95       	neg	r24
 21a:	91 09       	sbc	r25, r1
 21c:	8f 3f       	cpi	r24, 0xFF	; 255
 21e:	91 05       	cpc	r25, r1
 220:	19 f0       	breq	.+6      	; 0x228 <setSpeed_2+0x20>
 222:	14 f0       	brlt	.+4      	; 0x228 <setSpeed_2+0x20>
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 8b 00 	sts	0x008B, r25
 22c:	80 93 8a 00 	sts	0x008A, r24
 230:	08 95       	ret

00000232 <setMotorBaseSpeed_1>:

	}
}

void setMotorBaseSpeed_1(int16_t speed) {
	if (speed > 255)
 232:	8f 3f       	cpi	r24, 0xFF	; 255
 234:	91 05       	cpc	r25, r1
 236:	09 f0       	breq	.+2      	; 0x23a <setMotorBaseSpeed_1+0x8>
 238:	2c f4       	brge	.+10     	; 0x244 <setMotorBaseSpeed_1+0x12>
		speed = 255;
	if (speed < -255)
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	92 07       	cpc	r25, r18
 240:	24 f0       	brlt	.+8      	; 0x24a <setMotorBaseSpeed_1+0x18>
 242:	05 c0       	rjmp	.+10     	; 0x24e <setMotorBaseSpeed_1+0x1c>
	}
}

void setMotorBaseSpeed_1(int16_t speed) {
	if (speed > 255)
		speed = 255;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <setMotorBaseSpeed_1+0x1c>
	if (speed < -255)
		speed = -255;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	9f ef       	ldi	r25, 0xFF	; 255
	Motor_1_Speed = speed;
 24e:	90 93 23 01 	sts	0x0123, r25
 252:	80 93 22 01 	sts	0x0122, r24
 256:	08 95       	ret

00000258 <setMotorBaseSpeed_2>:

}

void setMotorBaseSpeed_2(int16_t speed) {
	if (speed > 255)
 258:	8f 3f       	cpi	r24, 0xFF	; 255
 25a:	91 05       	cpc	r25, r1
 25c:	09 f0       	breq	.+2      	; 0x260 <setMotorBaseSpeed_2+0x8>
 25e:	2c f4       	brge	.+10     	; 0x26a <setMotorBaseSpeed_2+0x12>
		speed = 255;
	if (speed < -255)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	92 07       	cpc	r25, r18
 266:	24 f0       	brlt	.+8      	; 0x270 <setMotorBaseSpeed_2+0x18>
 268:	05 c0       	rjmp	.+10     	; 0x274 <setMotorBaseSpeed_2+0x1c>

}

void setMotorBaseSpeed_2(int16_t speed) {
	if (speed > 255)
		speed = 255;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <setMotorBaseSpeed_2+0x1c>
	if (speed < -255)
		speed = -255;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	9f ef       	ldi	r25, 0xFF	; 255
	Motor_2_Speed = speed;
 274:	90 93 21 01 	sts	0x0121, r25
 278:	80 93 20 01 	sts	0x0120, r24
 27c:	08 95       	ret

0000027e <modMotorBaseSpeed_1>:

}

void modMotorBaseSpeed_1(int16_t speed) {
	Motor_1_Speed += speed;
 27e:	20 91 22 01 	lds	r18, 0x0122
 282:	30 91 23 01 	lds	r19, 0x0123
 286:	28 0f       	add	r18, r24
 288:	39 1f       	adc	r19, r25
	if (Motor_1_Speed > 255)
 28a:	2f 3f       	cpi	r18, 0xFF	; 255
 28c:	31 05       	cpc	r19, r1
 28e:	09 f0       	breq	.+2      	; 0x292 <modMotorBaseSpeed_1+0x14>
 290:	2c f4       	brge	.+10     	; 0x29c <modMotorBaseSpeed_1+0x1e>
	Motor_2_Speed = speed;

}

void modMotorBaseSpeed_1(int16_t speed) {
	Motor_1_Speed += speed;
 292:	30 93 23 01 	sts	0x0123, r19
 296:	20 93 22 01 	sts	0x0122, r18
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <modMotorBaseSpeed_1+0x2a>
	if (Motor_1_Speed > 255)
		Motor_1_Speed = 255;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 23 01 	sts	0x0123, r25
 2a4:	80 93 22 01 	sts	0x0122, r24
	if (Motor_1_Speed < -255)
 2a8:	80 91 22 01 	lds	r24, 0x0122
 2ac:	90 91 23 01 	lds	r25, 0x0123
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	34 f4       	brge	.+12     	; 0x2c2 <modMotorBaseSpeed_1+0x44>
		Motor_1_Speed = -255;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
 2ba:	90 93 23 01 	sts	0x0123, r25
 2be:	80 93 22 01 	sts	0x0122, r24
 2c2:	08 95       	ret

000002c4 <modMotorBaseSpeed_2>:
}

void modMotorBaseSpeed_2(int16_t speed) {
	Motor_2_Speed += speed;
 2c4:	20 91 20 01 	lds	r18, 0x0120
 2c8:	30 91 21 01 	lds	r19, 0x0121
 2cc:	28 0f       	add	r18, r24
 2ce:	39 1f       	adc	r19, r25
	if (Motor_2_Speed > 255)
 2d0:	2f 3f       	cpi	r18, 0xFF	; 255
 2d2:	31 05       	cpc	r19, r1
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <modMotorBaseSpeed_2+0x14>
 2d6:	2c f4       	brge	.+10     	; 0x2e2 <modMotorBaseSpeed_2+0x1e>
	if (Motor_1_Speed < -255)
		Motor_1_Speed = -255;
}

void modMotorBaseSpeed_2(int16_t speed) {
	Motor_2_Speed += speed;
 2d8:	30 93 21 01 	sts	0x0121, r19
 2dc:	20 93 20 01 	sts	0x0120, r18
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <modMotorBaseSpeed_2+0x2a>
	if (Motor_2_Speed > 255)
		Motor_2_Speed = 255;
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 21 01 	sts	0x0121, r25
 2ea:	80 93 20 01 	sts	0x0120, r24
	if (Motor_2_Speed < -255)
 2ee:	80 91 20 01 	lds	r24, 0x0120
 2f2:	90 91 21 01 	lds	r25, 0x0121
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	34 f4       	brge	.+12     	; 0x308 <modMotorBaseSpeed_2+0x44>
		Motor_2_Speed = -255;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	9f ef       	ldi	r25, 0xFF	; 255
 300:	90 93 21 01 	sts	0x0121, r25
 304:	80 93 20 01 	sts	0x0120, r24
 308:	08 95       	ret

0000030a <modMotorSpeed_1>:
}

void modMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed += speed;
 30a:	20 91 1a 01 	lds	r18, 0x011A
 30e:	30 91 1b 01 	lds	r19, 0x011B
 312:	28 0f       	add	r18, r24
 314:	39 1f       	adc	r19, r25
	if (Motor_1_adjSpeed > 255)
 316:	2f 3f       	cpi	r18, 0xFF	; 255
 318:	31 05       	cpc	r19, r1
 31a:	09 f0       	breq	.+2      	; 0x31e <modMotorSpeed_1+0x14>
 31c:	2c f4       	brge	.+10     	; 0x328 <modMotorSpeed_1+0x1e>
	if (Motor_2_Speed < -255)
		Motor_2_Speed = -255;
}

void modMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed += speed;
 31e:	30 93 1b 01 	sts	0x011B, r19
 322:	20 93 1a 01 	sts	0x011A, r18
 326:	06 c0       	rjmp	.+12     	; 0x334 <modMotorSpeed_1+0x2a>
	if (Motor_1_adjSpeed > 255)
		Motor_1_adjSpeed = 255;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	90 93 1b 01 	sts	0x011B, r25
 330:	80 93 1a 01 	sts	0x011A, r24
	if (Motor_1_adjSpeed < -255)
 334:	80 91 1a 01 	lds	r24, 0x011A
 338:	90 91 1b 01 	lds	r25, 0x011B
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	34 f4       	brge	.+12     	; 0x34e <modMotorSpeed_1+0x44>
		Motor_1_adjSpeed = -255;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	90 93 1b 01 	sts	0x011B, r25
 34a:	80 93 1a 01 	sts	0x011A, r24
 34e:	08 95       	ret

00000350 <modMotorSpeed_2>:

}
void modMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed += speed;
 350:	20 91 18 01 	lds	r18, 0x0118
 354:	30 91 19 01 	lds	r19, 0x0119
 358:	28 0f       	add	r18, r24
 35a:	39 1f       	adc	r19, r25
	if (Motor_2_adjSpeed > 255)
 35c:	2f 3f       	cpi	r18, 0xFF	; 255
 35e:	31 05       	cpc	r19, r1
 360:	09 f0       	breq	.+2      	; 0x364 <modMotorSpeed_2+0x14>
 362:	2c f4       	brge	.+10     	; 0x36e <modMotorSpeed_2+0x1e>
	if (Motor_1_adjSpeed < -255)
		Motor_1_adjSpeed = -255;

}
void modMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed += speed;
 364:	30 93 19 01 	sts	0x0119, r19
 368:	20 93 18 01 	sts	0x0118, r18
 36c:	06 c0       	rjmp	.+12     	; 0x37a <modMotorSpeed_2+0x2a>
	if (Motor_2_adjSpeed > 255)
		Motor_2_adjSpeed = 255;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 19 01 	sts	0x0119, r25
 376:	80 93 18 01 	sts	0x0118, r24
	if (Motor_2_adjSpeed < -255)
 37a:	80 91 18 01 	lds	r24, 0x0118
 37e:	90 91 19 01 	lds	r25, 0x0119
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	34 f4       	brge	.+12     	; 0x394 <modMotorSpeed_2+0x44>
		Motor_2_adjSpeed = -255;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	90 93 19 01 	sts	0x0119, r25
 390:	80 93 18 01 	sts	0x0118, r24
 394:	08 95       	ret

00000396 <setMotorSpeed_1>:

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 396:	90 93 1b 01 	sts	0x011B, r25
 39a:	80 93 1a 01 	sts	0x011A, r24
 39e:	08 95       	ret

000003a0 <setMotorSpeed_2>:
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 3a0:	90 93 19 01 	sts	0x0119, r25
 3a4:	80 93 18 01 	sts	0x0118, r24
 3a8:	08 95       	ret

000003aa <adjSpeed>:
}

void adjSpeed() {
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
	int m1 = Motor_1_Speed + Motor_1_adjSpeed;
 3ae:	80 91 22 01 	lds	r24, 0x0122
 3b2:	90 91 23 01 	lds	r25, 0x0123
 3b6:	20 91 1a 01 	lds	r18, 0x011A
 3ba:	30 91 1b 01 	lds	r19, 0x011B
 3be:	82 0f       	add	r24, r18
 3c0:	93 1f       	adc	r25, r19
	int m2 = Motor_2_Speed + Motor_2_adjSpeed;
 3c2:	e0 90 20 01 	lds	r14, 0x0120
 3c6:	f0 90 21 01 	lds	r15, 0x0121
 3ca:	20 91 18 01 	lds	r18, 0x0118
 3ce:	30 91 19 01 	lds	r19, 0x0119
 3d2:	e2 0e       	add	r14, r18
 3d4:	f3 1e       	adc	r15, r19
	if (m1 > 255)
 3d6:	8f 3f       	cpi	r24, 0xFF	; 255
 3d8:	91 05       	cpc	r25, r1
 3da:	09 f0       	breq	.+2      	; 0x3de <adjSpeed+0x34>
 3dc:	2c f4       	brge	.+10     	; 0x3e8 <adjSpeed+0x3e>
		m1 = 255;
	if (m1 < -255)
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	92 07       	cpc	r25, r18
 3e4:	24 f0       	brlt	.+8      	; 0x3ee <adjSpeed+0x44>
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <adjSpeed+0x48>

void adjSpeed() {
	int m1 = Motor_1_Speed + Motor_1_adjSpeed;
	int m2 = Motor_2_Speed + Motor_2_adjSpeed;
	if (m1 > 255)
		m1 = 255;
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <adjSpeed+0x48>
	if (m1 < -255)
		m1 = -255;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
	if (m2 > 255)
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	e2 16       	cp	r14, r18
 3f6:	f1 04       	cpc	r15, r1
 3f8:	09 f0       	breq	.+2      	; 0x3fc <adjSpeed+0x52>
 3fa:	34 f4       	brge	.+12     	; 0x408 <adjSpeed+0x5e>
		m2 = 255;
	if (m2 < -255)
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	e2 16       	cp	r14, r18
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	f2 06       	cpc	r15, r18
 404:	2c f0       	brlt	.+10     	; 0x410 <adjSpeed+0x66>
 406:	08 c0       	rjmp	.+16     	; 0x418 <adjSpeed+0x6e>
	if (m1 > 255)
		m1 = 255;
	if (m1 < -255)
		m1 = -255;
	if (m2 > 255)
		m2 = 255;
 408:	ee 24       	eor	r14, r14
 40a:	ea 94       	dec	r14
 40c:	f1 2c       	mov	r15, r1
 40e:	04 c0       	rjmp	.+8      	; 0x418 <adjSpeed+0x6e>
	if (m2 < -255)
		m2 = -255;
 410:	ee 24       	eor	r14, r14
 412:	e3 94       	inc	r14
 414:	ff 24       	eor	r15, r15
 416:	fa 94       	dec	r15
	setSpeed_1(m1);
 418:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <setSpeed_1>
	setSpeed_2(m2);
 41c:	c7 01       	movw	r24, r14

}
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
	if (m2 > 255)
		m2 = 255;
	if (m2 < -255)
		m2 = -255;
	setSpeed_1(m1);
	setSpeed_2(m2);
 422:	0c 94 04 01 	jmp	0x208	; 0x208 <setSpeed_2>

00000426 <pushButton>:
 *  Created on: 24.05.2012
 *      Author: time
 */

uint8_t pushButton(uint8_t button) {
	switch (button) {
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	c9 f0       	breq	.+50     	; 0x45c <pushButton+0x36>
 42a:	30 f0       	brcs	.+12     	; 0x438 <pushButton+0x12>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	49 f1       	breq	.+82     	; 0x482 <pushButton+0x5c>
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	09 f0       	breq	.+2      	; 0x436 <pushButton+0x10>
 434:	4f c0       	rjmp	.+158    	; 0x4d4 <pushButton+0xae>
 436:	38 c0       	rjmp	.+112    	; 0x4a8 <pushButton+0x82>
	case 0: {
		if (S.bSbutton_S0 == 1 && button(0) == 0) {
 438:	80 91 4c 01 	lds	r24, 0x014C
 43c:	80 ff       	sbrs	r24, 0
 43e:	04 c0       	rjmp	.+8      	; 0x448 <pushButton+0x22>
 440:	04 9b       	sbis	0x00, 4	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <pushButton+0x22>
			S.bSbutton_S0 = 0;
 444:	8e 7f       	andi	r24, 0xFE	; 254
 446:	37 c0       	rjmp	.+110    	; 0x4b6 <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S0 = button(0);
 448:	80 b1       	in	r24, 0x00	; 0
 44a:	82 95       	swap	r24
 44c:	81 70       	andi	r24, 0x01	; 1
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	89 27       	eor	r24, r25
 452:	90 91 4c 01 	lds	r25, 0x014C
 456:	80 fb       	bst	r24, 0
 458:	90 f9       	bld	r25, 0
 45a:	3a c0       	rjmp	.+116    	; 0x4d0 <pushButton+0xaa>
		return 0;
	}
	case 1: {
		if (S.bSbutton_S1 == 1 && button(1) == 0) {
 45c:	80 91 4c 01 	lds	r24, 0x014C
 460:	81 ff       	sbrs	r24, 1
 462:	04 c0       	rjmp	.+8      	; 0x46c <pushButton+0x46>
 464:	05 9b       	sbis	0x00, 5	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <pushButton+0x46>
			S.bSbutton_S1 = 0;
 468:	8d 7f       	andi	r24, 0xFD	; 253
 46a:	25 c0       	rjmp	.+74     	; 0x4b6 <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S1 = button(1);
 46c:	80 b1       	in	r24, 0x00	; 0
 46e:	85 fb       	bst	r24, 5
 470:	88 27       	eor	r24, r24
 472:	80 f9       	bld	r24, 0
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	89 27       	eor	r24, r25
 478:	90 91 4c 01 	lds	r25, 0x014C
 47c:	80 fb       	bst	r24, 0
 47e:	91 f9       	bld	r25, 1
 480:	27 c0       	rjmp	.+78     	; 0x4d0 <pushButton+0xaa>
		return 0;
	}
	case 2: {
		if (S.bSbutton_S2 == 1 && button(2) == 0) {
 482:	80 91 4c 01 	lds	r24, 0x014C
 486:	82 ff       	sbrs	r24, 2
 488:	04 c0       	rjmp	.+8      	; 0x492 <pushButton+0x6c>
 48a:	06 9b       	sbis	0x00, 6	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <pushButton+0x6c>
			S.bSbutton_S2 = 0;
 48e:	8b 7f       	andi	r24, 0xFB	; 251
 490:	12 c0       	rjmp	.+36     	; 0x4b6 <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S2 = button(2);
 492:	80 b1       	in	r24, 0x00	; 0
 494:	86 fb       	bst	r24, 6
 496:	88 27       	eor	r24, r24
 498:	80 f9       	bld	r24, 0
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	89 27       	eor	r24, r25
 49e:	90 91 4c 01 	lds	r25, 0x014C
 4a2:	80 fb       	bst	r24, 0
 4a4:	92 f9       	bld	r25, 2
 4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <pushButton+0xaa>
		return 0;
	}
	case 3: {
		if (S.bSbutton_S3 == 1 && button(3) == 0) {
 4a8:	80 91 4c 01 	lds	r24, 0x014C
 4ac:	83 ff       	sbrs	r24, 3
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <pushButton+0x98>
 4b0:	07 9b       	sbis	0x00, 7	; 0
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <pushButton+0x98>
			S.bSbutton_S3 = 0;
 4b4:	87 7f       	andi	r24, 0xF7	; 247
 4b6:	80 93 4c 01 	sts	0x014C, r24
			return 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	08 95       	ret
		}
		S.bSbutton_S3 = button(3);
 4be:	80 b1       	in	r24, 0x00	; 0
 4c0:	80 95       	com	r24
 4c2:	88 1f       	adc	r24, r24
 4c4:	88 27       	eor	r24, r24
 4c6:	88 1f       	adc	r24, r24
 4c8:	90 91 4c 01 	lds	r25, 0x014C
 4cc:	80 fb       	bst	r24, 0
 4ce:	93 f9       	bld	r25, 3
 4d0:	90 93 4c 01 	sts	0x014C, r25
		return 0;
	}
	}
	return 0;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
}
 4d6:	08 95       	ret

000004d8 <setADC>:
 *      Author: time
 */


void setADC(uint8_t channel){
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
 4d8:	90 91 7c 00 	lds	r25, 0x007C
 4dc:	90 7f       	andi	r25, 0xF0	; 240
 4de:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel;
 4e2:	90 91 7c 00 	lds	r25, 0x007C
 4e6:	98 2b       	or	r25, r24
 4e8:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1 << ADSC);
 4ec:	80 91 7a 00 	lds	r24, 0x007A
 4f0:	80 64       	ori	r24, 0x40	; 64
 4f2:	80 93 7a 00 	sts	0x007A, r24
	while ((1 << ADSC) & ADCSRA) {}
 4f6:	80 91 7a 00 	lds	r24, 0x007A
 4fa:	86 fd       	sbrc	r24, 6
 4fc:	fc cf       	rjmp	.-8      	; 0x4f6 <setADC+0x1e>


}
 4fe:	08 95       	ret

00000500 <getData>:
uint16_t getData() {
	ADCSRA |= (1 << ADSC);
 500:	80 91 7a 00 	lds	r24, 0x007A
 504:	80 64       	ori	r24, 0x40	; 64
 506:	80 93 7a 00 	sts	0x007A, r24
	while ((1 << ADSC) & ADCSRA) {
 50a:	80 91 7a 00 	lds	r24, 0x007A
 50e:	86 fd       	sbrc	r24, 6
 510:	fc cf       	rjmp	.-8      	; 0x50a <getData+0xa>
	}
	return ADC;
 512:	20 91 78 00 	lds	r18, 0x0078
 516:	30 91 79 00 	lds	r19, 0x0079
}
 51a:	c9 01       	movw	r24, r18
 51c:	08 95       	ret

0000051e <__vector_3>:
 *
 *  Created on: 26.05.2012
 *      Author: time
 */

ISR( INT2_vect) {
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
	tickslinks++;
 52c:	80 91 47 01 	lds	r24, 0x0147
 530:	90 91 48 01 	lds	r25, 0x0148
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	90 93 48 01 	sts	0x0148, r25
 53a:	80 93 47 01 	sts	0x0147, r24
	if(tickslinks>120)ledOff(0);
 53e:	80 91 47 01 	lds	r24, 0x0147
 542:	90 91 48 01 	lds	r25, 0x0148
 546:	89 37       	cpi	r24, 0x79	; 121
 548:	91 05       	cpc	r25, r1
 54a:	10 f0       	brcs	.+4      	; 0x550 <__vector_3+0x32>
 54c:	10 98       	cbi	0x02, 0	; 2
 54e:	01 c0       	rjmp	.+2      	; 0x552 <__vector_3+0x34>
	else ledOn(0);
 550:	10 9a       	sbi	0x02, 0	; 2
}
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_4>:

ISR( INT3_vect) {
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
	ticksrechts++;
 56e:	80 91 45 01 	lds	r24, 0x0145
 572:	90 91 46 01 	lds	r25, 0x0146
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	90 93 46 01 	sts	0x0146, r25
 57c:	80 93 45 01 	sts	0x0145, r24
	if(ticksrechts>120)ledOff(1);
 580:	80 91 45 01 	lds	r24, 0x0145
 584:	90 91 46 01 	lds	r25, 0x0146
 588:	89 37       	cpi	r24, 0x79	; 121
 58a:	91 05       	cpc	r25, r1
 58c:	10 f0       	brcs	.+4      	; 0x592 <__vector_4+0x32>
 58e:	11 98       	cbi	0x02, 1	; 2
 590:	01 c0       	rjmp	.+2      	; 0x594 <__vector_4+0x34>
	else ledOn(1);
 592:	11 9a       	sbi	0x02, 1	; 2
}
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <line>:
 */

#ifndef REGLER_H_
#define REGLER_H_

void line() {
 5a2:	af 92       	push	r10
 5a4:	bf 92       	push	r11
 5a6:	cf 92       	push	r12
 5a8:	df 92       	push	r13
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
	setADC(CNY70_1);
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setADC>
 5b4:	f4 e0       	ldi	r31, 0x04	; 4
 5b6:	cf 2e       	mov	r12, r31
 5b8:	d1 2c       	mov	r13, r1
	uint16_t cny1 = 0;
 5ba:	e1 2c       	mov	r14, r1
 5bc:	f1 2c       	mov	r15, r1
	uint16_t cny2 = 0;
	for (int i = 0; i < 4; i++) {
		cny1 += getData();
 5be:	0e 94 80 02 	call	0x500	; 0x500 <getData>
 5c2:	e8 0e       	add	r14, r24
 5c4:	f9 1e       	adc	r15, r25
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	c2 1a       	sub	r12, r18
 5ca:	d1 08       	sbc	r13, r1

void line() {
	setADC(CNY70_1);
	uint16_t cny1 = 0;
	uint16_t cny2 = 0;
	for (int i = 0; i < 4; i++) {
 5cc:	c1 f7       	brne	.-16     	; 0x5be <line+0x1c>
		cny1 += getData();
	}
	cny1 >>= 2;
 5ce:	57 01       	movw	r10, r14
 5d0:	b6 94       	lsr	r11
 5d2:	a7 94       	ror	r10
 5d4:	b6 94       	lsr	r11
 5d6:	a7 94       	ror	r10
	setADC(CNY70_2);
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setADC>
 5de:	e4 e0       	ldi	r30, 0x04	; 4
 5e0:	ce 2e       	mov	r12, r30
 5e2:	d1 2c       	mov	r13, r1
#define REGLER_H_

void line() {
	setADC(CNY70_1);
	uint16_t cny1 = 0;
	uint16_t cny2 = 0;
 5e4:	e1 2c       	mov	r14, r1
 5e6:	f1 2c       	mov	r15, r1
		cny1 += getData();
	}
	cny1 >>= 2;
	setADC(CNY70_2);
	for (int i = 0; i < 4; i++) {
		cny2 += getData();
 5e8:	0e 94 80 02 	call	0x500	; 0x500 <getData>
 5ec:	e8 0e       	add	r14, r24
 5ee:	f9 1e       	adc	r15, r25
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	c4 1a       	sub	r12, r20
 5f4:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 4; i++) {
		cny1 += getData();
	}
	cny1 >>= 2;
	setADC(CNY70_2);
	for (int i = 0; i < 4; i++) {
 5f6:	c1 f7       	brne	.-16     	; 0x5e8 <line+0x46>
		cny2 += getData();
	}
	cny2 >>= 2;
 5f8:	97 01       	movw	r18, r14
 5fa:	36 95       	lsr	r19
 5fc:	27 95       	ror	r18
 5fe:	36 95       	lsr	r19
 600:	27 95       	ror	r18
 602:	80 91 4d 01 	lds	r24, 0x014D
 606:	90 91 4e 01 	lds	r25, 0x014E
	//rechts wei√ü
	if ((cny1 >= 800) && (cny2 < 800)) {
 60a:	40 e2       	ldi	r20, 0x20	; 32
 60c:	a4 16       	cp	r10, r20
 60e:	43 e0       	ldi	r20, 0x03	; 3
 610:	b4 06       	cpc	r11, r20
 612:	08 f4       	brcc	.+2      	; 0x616 <line+0x74>
 614:	67 c0       	rjmp	.+206    	; 0x6e4 <line+0x142>
 616:	20 32       	cpi	r18, 0x20	; 32
 618:	33 40       	sbci	r19, 0x03	; 3
 61a:	08 f0       	brcs	.+2      	; 0x61e <line+0x7c>
 61c:	67 c0       	rjmp	.+206    	; 0x6ec <line+0x14a>
		esum -= 4;
 61e:	9c 01       	movw	r18, r24
 620:	24 50       	subi	r18, 0x04	; 4
 622:	31 09       	sbc	r19, r1
 624:	30 93 4e 01 	sts	0x014E, r19
 628:	20 93 4d 01 	sts	0x014D, r18
		//fahre links
		steuer(-80 + esum);
 62c:	84 55       	subi	r24, 0x54	; 84
 62e:	91 09       	sbc	r25, r1
 630:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <steuer>
		ledOn(1);
 634:	11 9a       	sbi	0x02, 1	; 2
		richtung = links;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	6d c0       	rjmp	.+218    	; 0x714 <line+0x172>
	}
	// links wei√ü
	if ((cny1 < 800) && (cny2 >= 800)) {
		//fahre rechts
		esum += 4;
 63a:	9c 01       	movw	r18, r24
 63c:	2c 5f       	subi	r18, 0xFC	; 252
 63e:	3f 4f       	sbci	r19, 0xFF	; 255
 640:	30 93 4e 01 	sts	0x014E, r19
 644:	20 93 4d 01 	sts	0x014D, r18
		steuer(80 + esum);
 648:	8c 5a       	subi	r24, 0xAC	; 172
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <steuer>
		ledOn(0);
 650:	10 9a       	sbi	0x02, 0	; 2
		richtung = rechts;
 652:	10 92 49 01 	sts	0x0149, r1
 656:	2b c0       	rjmp	.+86     	; 0x6ae <line+0x10c>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 658:	88 e5       	ldi	r24, 0x58	; 88
 65a:	92 e0       	ldi	r25, 0x02	; 2
 65c:	90 93 1b 01 	sts	0x011B, r25
 660:	80 93 1a 01 	sts	0x011A, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 664:	88 ea       	ldi	r24, 0xA8	; 168
 666:	9d ef       	ldi	r25, 0xFD	; 253
 668:	90 93 19 01 	sts	0x0119, r25
 66c:	80 93 18 01 	sts	0x0118, r24
	}
	//beide wei√ü
	if ((cny1 < 800) && (cny2 < 800)) {
		if (richtung == rechts) {
			steuer(600);
			ledOn(0);
 670:	10 9a       	sbi	0x02, 0	; 2
		}
		if (richtung == links) {
 672:	80 91 49 01 	lds	r24, 0x0149
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	69 f4       	brne	.+26     	; 0x694 <line+0xf2>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 67a:	88 ea       	ldi	r24, 0xA8	; 168
 67c:	9d ef       	ldi	r25, 0xFD	; 253
 67e:	90 93 1b 01 	sts	0x011B, r25
 682:	80 93 1a 01 	sts	0x011A, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 686:	88 e5       	ldi	r24, 0x58	; 88
 688:	92 e0       	ldi	r25, 0x02	; 2
 68a:	90 93 19 01 	sts	0x0119, r25
 68e:	80 93 18 01 	sts	0x0118, r24
			steuer(-600);
			ledOn(1);
 692:	11 9a       	sbi	0x02, 1	; 2
		}
		esum >>= 4;
 694:	80 91 4d 01 	lds	r24, 0x014D
 698:	90 91 4e 01 	lds	r25, 0x014E
 69c:	54 e0       	ldi	r21, 0x04	; 4
 69e:	95 95       	asr	r25
 6a0:	87 95       	ror	r24
 6a2:	5a 95       	dec	r21
 6a4:	e1 f7       	brne	.-8      	; 0x69e <line+0xfc>
 6a6:	90 93 4e 01 	sts	0x014E, r25
 6aa:	80 93 4d 01 	sts	0x014D, r24

	}

	//Begrenzung I-Anteil
	if (esum < -100) {
 6ae:	80 91 4d 01 	lds	r24, 0x014D
 6b2:	90 91 4e 01 	lds	r25, 0x014E
 6b6:	8c 39       	cpi	r24, 0x9C	; 156
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	34 f4       	brge	.+12     	; 0x6c8 <line+0x126>
		esum = -100;
 6bc:	8c e9       	ldi	r24, 0x9C	; 156
 6be:	9f ef       	ldi	r25, 0xFF	; 255
 6c0:	90 93 4e 01 	sts	0x014E, r25
 6c4:	80 93 4d 01 	sts	0x014D, r24
	}
	if (esum > 100) {
 6c8:	80 91 4d 01 	lds	r24, 0x014D
 6cc:	90 91 4e 01 	lds	r25, 0x014E
 6d0:	85 36       	cpi	r24, 0x65	; 101
 6d2:	91 05       	cpc	r25, r1
 6d4:	3c f1       	brlt	.+78     	; 0x724 <line+0x182>
		esum = 100;
 6d6:	84 e6       	ldi	r24, 0x64	; 100
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	90 93 4e 01 	sts	0x014E, r25
 6de:	80 93 4d 01 	sts	0x014D, r24
 6e2:	20 c0       	rjmp	.+64     	; 0x724 <line+0x182>
		steuer(-80 + esum);
		ledOn(1);
		richtung = links;
	}
	// links wei√ü
	if ((cny1 < 800) && (cny2 >= 800)) {
 6e4:	20 32       	cpi	r18, 0x20	; 32
 6e6:	33 40       	sbci	r19, 0x03	; 3
 6e8:	c0 f0       	brcs	.+48     	; 0x71a <line+0x178>
 6ea:	a7 cf       	rjmp	.-178    	; 0x63a <line+0x98>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 6ec:	10 92 1b 01 	sts	0x011B, r1
 6f0:	10 92 1a 01 	sts	0x011A, r1
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 6f4:	10 92 19 01 	sts	0x0119, r1
 6f8:	10 92 18 01 	sts	0x0118, r1
		richtung = rechts;
	}
	//beide schwarz
	if ((cny1 >= 800) && (cny2 >= 800)) {
		steuer(0);
		ledOff(0);
 6fc:	10 98       	cbi	0x02, 0	; 2
		ledOff(1);
 6fe:	11 98       	cbi	0x02, 1	; 2
		esum >>= 4;
 700:	44 e0       	ldi	r20, 0x04	; 4
 702:	95 95       	asr	r25
 704:	87 95       	ror	r24
 706:	4a 95       	dec	r20
 708:	e1 f7       	brne	.-8      	; 0x702 <line+0x160>
 70a:	90 93 4e 01 	sts	0x014E, r25
 70e:	80 93 4d 01 	sts	0x014D, r24
		richtung = gerade;
 712:	82 e0       	ldi	r24, 0x02	; 2
 714:	80 93 49 01 	sts	0x0149, r24
 718:	ca cf       	rjmp	.-108    	; 0x6ae <line+0x10c>
	}
	//beide wei√ü
	if ((cny1 < 800) && (cny2 < 800)) {
		if (richtung == rechts) {
 71a:	80 91 49 01 	lds	r24, 0x0149
 71e:	81 11       	cpse	r24, r1
 720:	a8 cf       	rjmp	.-176    	; 0x672 <line+0xd0>
 722:	9a cf       	rjmp	.-204    	; 0x658 <line+0xb6>
		esum = -100;
	}
	if (esum > 100) {
		esum = 100;
	}
}
 724:	ff 90       	pop	r15
 726:	ef 90       	pop	r14
 728:	df 90       	pop	r13
 72a:	cf 90       	pop	r12
 72c:	bf 90       	pop	r11
 72e:	af 90       	pop	r10
 730:	08 95       	ret

00000732 <dist>:

void dist() {
 732:	8f 92       	push	r8
 734:	9f 92       	push	r9
 736:	af 92       	push	r10
 738:	bf 92       	push	r11
 73a:	cf 92       	push	r12
 73c:	df 92       	push	r13
 73e:	ef 92       	push	r14
 740:	ff 92       	push	r15
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setADC>
 748:	38 e0       	ldi	r19, 0x08	; 8
 74a:	c3 2e       	mov	r12, r19
 74c:	d1 2c       	mov	r13, r1
		esum = 100;
	}
}

void dist() {
	uint16_t dds1 = 0;
 74e:	e1 2c       	mov	r14, r1
 750:	f1 2c       	mov	r15, r1
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
	for (int i = 0; i < 8; i++) {
		dds1 += getData();
 752:	0e 94 80 02 	call	0x500	; 0x500 <getData>
 756:	e8 0e       	add	r14, r24
 758:	f9 1e       	adc	r15, r25
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	c8 1a       	sub	r12, r24
 75e:	d1 08       	sbc	r13, r1
void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
	for (int i = 0; i < 8; i++) {
 760:	c1 f7       	brne	.-16     	; 0x752 <dist+0x20>
		dds1 += getData();
	}
	dds1 >>= 3;
 762:	57 01       	movw	r10, r14
 764:	93 e0       	ldi	r25, 0x03	; 3
 766:	b6 94       	lsr	r11
 768:	a7 94       	ror	r10
 76a:	9a 95       	dec	r25
 76c:	e1 f7       	brne	.-8      	; 0x766 <dist+0x34>
	setADC(ds2);
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setADC>
 774:	28 e0       	ldi	r18, 0x08	; 8
 776:	c2 2e       	mov	r12, r18
 778:	d1 2c       	mov	r13, r1
	}
}

void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
 77a:	e1 2c       	mov	r14, r1
 77c:	f1 2c       	mov	r15, r1
		dds1 += getData();
	}
	dds1 >>= 3;
	setADC(ds2);
	for (int i = 0; i < 8; i++) {
		dds2 += getData();
 77e:	0e 94 80 02 	call	0x500	; 0x500 <getData>
 782:	e8 0e       	add	r14, r24
 784:	f9 1e       	adc	r15, r25
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	c8 1a       	sub	r12, r24
 78a:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 8; i++) {
		dds1 += getData();
	}
	dds1 >>= 3;
	setADC(ds2);
	for (int i = 0; i < 8; i++) {
 78c:	c1 f7       	brne	.-16     	; 0x77e <dist+0x4c>
		dds2 += getData();
	}
	dds2 >>= 3;
 78e:	47 01       	movw	r8, r14
 790:	b3 e0       	ldi	r27, 0x03	; 3
 792:	96 94       	lsr	r9
 794:	87 94       	ror	r8
 796:	ba 95       	dec	r27
 798:	e1 f7       	brne	.-8      	; 0x792 <dist+0x60>
	setADC(ds3);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setADC>
 7a0:	88 e0       	ldi	r24, 0x08	; 8
 7a2:	c8 2e       	mov	r12, r24
 7a4:	d1 2c       	mov	r13, r1
}

void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
 7a6:	e1 2c       	mov	r14, r1
 7a8:	f1 2c       	mov	r15, r1
		dds2 += getData();
	}
	dds2 >>= 3;
	setADC(ds3);
	for (int i = 0; i < 8; i++) {
		dds3 += getData();
 7aa:	0e 94 80 02 	call	0x500	; 0x500 <getData>
 7ae:	e8 0e       	add	r14, r24
 7b0:	f9 1e       	adc	r15, r25
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	c8 1a       	sub	r12, r24
 7b6:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 8; i++) {
		dds2 += getData();
	}
	dds2 >>= 3;
	setADC(ds3);
	for (int i = 0; i < 8; i++) {
 7b8:	c1 f7       	brne	.-16     	; 0x7aa <dist+0x78>
		dds3 += getData();
	}
	dds3 >>= 3;
 7ba:	a3 e0       	ldi	r26, 0x03	; 3
 7bc:	f6 94       	lsr	r15
 7be:	e7 94       	ror	r14
 7c0:	aa 95       	dec	r26
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <dist+0x8a>
	if (dds2 > 200) {
 7c4:	89 ec       	ldi	r24, 0xC9	; 201
 7c6:	88 16       	cp	r8, r24
 7c8:	91 04       	cpc	r9, r1
 7ca:	d0 f0       	brcs	.+52     	; 0x800 <dist+0xce>
		if (dds1 > 200)
 7cc:	89 ec       	ldi	r24, 0xC9	; 201
 7ce:	a8 16       	cp	r10, r24
 7d0:	b1 04       	cpc	r11, r1
 7d2:	48 f0       	brcs	.+18     	; 0x7e6 <dist+0xb4>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 7d4:	88 ea       	ldi	r24, 0xA8	; 168
 7d6:	9d ef       	ldi	r25, 0xFD	; 253
 7d8:	90 93 1b 01 	sts	0x011B, r25
 7dc:	80 93 1a 01 	sts	0x011A, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 7e0:	88 e5       	ldi	r24, 0x58	; 88
 7e2:	92 e0       	ldi	r25, 0x02	; 2
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <dist+0xc4>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 7e6:	88 e5       	ldi	r24, 0x58	; 88
 7e8:	92 e0       	ldi	r25, 0x02	; 2
 7ea:	90 93 1b 01 	sts	0x011B, r25
 7ee:	80 93 1a 01 	sts	0x011A, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 7f2:	88 ea       	ldi	r24, 0xA8	; 168
 7f4:	9d ef       	ldi	r25, 0xFD	; 253
 7f6:	90 93 19 01 	sts	0x0119, r25
 7fa:	80 93 18 01 	sts	0x0118, r24
 7fe:	0c c0       	rjmp	.+24     	; 0x818 <dist+0xe6>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 800:	10 92 1b 01 	sts	0x011B, r1
 804:	10 92 1a 01 	sts	0x011A, r1
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 808:	10 92 19 01 	sts	0x0119, r1
 80c:	10 92 18 01 	sts	0x0118, r1
		else
			steuer(600);

	} else
		steuer(0);
	if (dds1 > 200)
 810:	89 ec       	ldi	r24, 0xC9	; 201
 812:	a8 16       	cp	r10, r24
 814:	b1 04       	cpc	r11, r1
 816:	f0 f6       	brcc	.-68     	; 0x7d4 <dist+0xa2>
		steuer(-600);
	if (dds3 > 200)
 818:	89 ec       	ldi	r24, 0xC9	; 201
 81a:	e8 16       	cp	r14, r24
 81c:	f1 04       	cpc	r15, r1
 81e:	60 f0       	brcs	.+24     	; 0x838 <dist+0x106>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 820:	88 e5       	ldi	r24, 0x58	; 88
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	90 93 1b 01 	sts	0x011B, r25
 828:	80 93 1a 01 	sts	0x011A, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 82c:	88 ea       	ldi	r24, 0xA8	; 168
 82e:	9d ef       	ldi	r25, 0xFD	; 253
 830:	90 93 19 01 	sts	0x0119, r25
 834:	80 93 18 01 	sts	0x0118, r24
		steuer(600);

}
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	df 90       	pop	r13
 83e:	cf 90       	pop	r12
 840:	bf 90       	pop	r11
 842:	af 90       	pop	r10
 844:	9f 90       	pop	r9
 846:	8f 90       	pop	r8
 848:	08 95       	ret

0000084a <strecke>:

void strecke(uint16_t s){
 84a:	ef 92       	push	r14
 84c:	ff 92       	push	r15
	uint16_t el=-(s-tickslinks);
 84e:	e0 90 47 01 	lds	r14, 0x0147
 852:	f0 90 48 01 	lds	r15, 0x0148
 856:	e8 1a       	sub	r14, r24
 858:	f9 0a       	sbc	r15, r25
	uint16_t er=-(s-ticksrechts);
 85a:	20 91 45 01 	lds	r18, 0x0145
 85e:	30 91 46 01 	lds	r19, 0x0146
 862:	28 1b       	sub	r18, r24
 864:	39 0b       	sbc	r19, r25
	esuml+=(el>>8);
 866:	6f 2d       	mov	r22, r15
 868:	77 27       	eor	r23, r23
 86a:	40 91 4a 01 	lds	r20, 0x014A
 86e:	50 91 4b 01 	lds	r21, 0x014B
 872:	46 0f       	add	r20, r22
 874:	57 1f       	adc	r21, r23
 876:	50 93 4b 01 	sts	0x014B, r21
 87a:	40 93 4a 01 	sts	0x014A, r20
	esumr+=(er>>8);
 87e:	63 2f       	mov	r22, r19
 880:	77 27       	eor	r23, r23
 882:	40 91 4f 01 	lds	r20, 0x014F
 886:	50 91 50 01 	lds	r21, 0x0150
 88a:	46 0f       	add	r20, r22
 88c:	57 1f       	adc	r21, r23
 88e:	50 93 50 01 	sts	0x0150, r21
 892:	40 93 4f 01 	sts	0x014F, r20
	if(tickslinks>s+10){
 896:	40 91 47 01 	lds	r20, 0x0147
 89a:	50 91 48 01 	lds	r21, 0x0148
 89e:	0a 96       	adiw	r24, 0x0a	; 10
 8a0:	84 17       	cp	r24, r20
 8a2:	95 07       	cpc	r25, r21
 8a4:	30 f4       	brcc	.+12     	; 0x8b2 <strecke+0x68>
		esuml=0;
 8a6:	10 92 4b 01 	sts	0x014B, r1
 8aa:	10 92 4a 01 	sts	0x014A, r1
		el=0;
 8ae:	e1 2c       	mov	r14, r1
 8b0:	f1 2c       	mov	r15, r1
	}
	if(ticksrechts>s+10){
 8b2:	40 91 45 01 	lds	r20, 0x0145
 8b6:	50 91 46 01 	lds	r21, 0x0146
 8ba:	84 17       	cp	r24, r20
 8bc:	95 07       	cpc	r25, r21
 8be:	30 f4       	brcc	.+12     	; 0x8cc <strecke+0x82>
		esumr=0;
 8c0:	10 92 50 01 	sts	0x0150, r1
 8c4:	10 92 4f 01 	sts	0x014F, r1
		er=0;
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	30 e0       	ldi	r19, 0x00	; 0
	}
	setMotorBaseSpeed_1((er>>8)+esumr);
 8cc:	23 2f       	mov	r18, r19
 8ce:	33 27       	eor	r19, r19
 8d0:	80 91 4f 01 	lds	r24, 0x014F
 8d4:	90 91 50 01 	lds	r25, 0x0150
 8d8:	82 0f       	add	r24, r18
 8da:	93 1f       	adc	r25, r19
 8dc:	0e 94 19 01 	call	0x232	; 0x232 <setMotorBaseSpeed_1>
	setMotorBaseSpeed_2((el>>8)+esuml);
 8e0:	ef 2c       	mov	r14, r15
 8e2:	ff 24       	eor	r15, r15
 8e4:	80 91 4a 01 	lds	r24, 0x014A
 8e8:	90 91 4b 01 	lds	r25, 0x014B
 8ec:	8e 0d       	add	r24, r14
 8ee:	9f 1d       	adc	r25, r15
 8f0:	0e 94 2c 01 	call	0x258	; 0x258 <setMotorBaseSpeed_2>
	if (esuml < -200) {
 8f4:	80 91 4a 01 	lds	r24, 0x014A
 8f8:	90 91 4b 01 	lds	r25, 0x014B
 8fc:	88 33       	cpi	r24, 0x38	; 56
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	34 f4       	brge	.+12     	; 0x90e <strecke+0xc4>
		esuml = -200;
 902:	88 e3       	ldi	r24, 0x38	; 56
 904:	9f ef       	ldi	r25, 0xFF	; 255
 906:	90 93 4b 01 	sts	0x014B, r25
 90a:	80 93 4a 01 	sts	0x014A, r24
	}
	if (esuml > 200) {
 90e:	80 91 4a 01 	lds	r24, 0x014A
 912:	90 91 4b 01 	lds	r25, 0x014B
 916:	89 3c       	cpi	r24, 0xC9	; 201
 918:	91 05       	cpc	r25, r1
 91a:	34 f0       	brlt	.+12     	; 0x928 <strecke+0xde>
		esuml = 200;
 91c:	88 ec       	ldi	r24, 0xC8	; 200
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	90 93 4b 01 	sts	0x014B, r25
 924:	80 93 4a 01 	sts	0x014A, r24
	}
	if (esumr < -200) {
 928:	80 91 4f 01 	lds	r24, 0x014F
 92c:	90 91 50 01 	lds	r25, 0x0150
 930:	88 33       	cpi	r24, 0x38	; 56
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	34 f4       	brge	.+12     	; 0x942 <strecke+0xf8>
		esumr = -200;
 936:	88 e3       	ldi	r24, 0x38	; 56
 938:	9f ef       	ldi	r25, 0xFF	; 255
 93a:	90 93 50 01 	sts	0x0150, r25
 93e:	80 93 4f 01 	sts	0x014F, r24
	}
	if (esumr > 200) {
 942:	80 91 4f 01 	lds	r24, 0x014F
 946:	90 91 50 01 	lds	r25, 0x0150
 94a:	89 3c       	cpi	r24, 0xC9	; 201
 94c:	91 05       	cpc	r25, r1
 94e:	34 f0       	brlt	.+12     	; 0x95c <strecke+0x112>
		esumr = 200;
 950:	88 ec       	ldi	r24, 0xC8	; 200
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	90 93 50 01 	sts	0x0150, r25
 958:	80 93 4f 01 	sts	0x014F, r24
	}
}
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	08 95       	ret

00000962 <blink>:
 *
 *  Created on: 24.05.2012
 *      Author: time
 */
void blink(int8_t x) {
	ledOff(0);
 962:	10 98       	cbi	0x02, 0	; 2
	ledOff(1);
 964:	11 98       	cbi	0x02, 1	; 2
	ledOff(2);
 966:	12 98       	cbi	0x02, 2	; 2
	ledOff(3);
 968:	13 98       	cbi	0x02, 3	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 96a:	2f ef       	ldi	r18, 0xFF	; 255
 96c:	33 ec       	ldi	r19, 0xC3	; 195
 96e:	49 e0       	ldi	r20, 0x09	; 9
 970:	21 50       	subi	r18, 0x01	; 1
 972:	30 40       	sbci	r19, 0x00	; 0
 974:	40 40       	sbci	r20, 0x00	; 0
 976:	e1 f7       	brne	.-8      	; 0x970 <blink+0xe>
 978:	00 c0       	rjmp	.+0      	; 0x97a <blink+0x18>
 97a:	00 00       	nop
	_delay_ms(200);
	for (int i = 0; i < x; i++) {
 97c:	20 e0       	ldi	r18, 0x00	; 0
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	99 27       	eor	r25, r25
 982:	87 fd       	sbrc	r24, 7
 984:	90 95       	com	r25
 986:	1c c0       	rjmp	.+56     	; 0x9c0 <blink+0x5e>
		ledOn(0);
 988:	10 9a       	sbi	0x02, 0	; 2
		ledOn(1);
 98a:	11 9a       	sbi	0x02, 1	; 2
		ledOn(2);
 98c:	12 9a       	sbi	0x02, 2	; 2
		ledOn(3);
 98e:	13 9a       	sbi	0x02, 3	; 2
 990:	5f ef       	ldi	r21, 0xFF	; 255
 992:	63 ec       	ldi	r22, 0xC3	; 195
 994:	49 e0       	ldi	r20, 0x09	; 9
 996:	51 50       	subi	r21, 0x01	; 1
 998:	60 40       	sbci	r22, 0x00	; 0
 99a:	40 40       	sbci	r20, 0x00	; 0
 99c:	e1 f7       	brne	.-8      	; 0x996 <blink+0x34>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <blink+0x3e>
 9a0:	00 00       	nop
		_delay_ms(200);
		ledOff(0);
 9a2:	10 98       	cbi	0x02, 0	; 2
		ledOff(1);
 9a4:	11 98       	cbi	0x02, 1	; 2
		ledOff(2);
 9a6:	12 98       	cbi	0x02, 2	; 2
		ledOff(3);
 9a8:	13 98       	cbi	0x02, 3	; 2
 9aa:	5f ef       	ldi	r21, 0xFF	; 255
 9ac:	63 ec       	ldi	r22, 0xC3	; 195
 9ae:	49 e0       	ldi	r20, 0x09	; 9
 9b0:	51 50       	subi	r21, 0x01	; 1
 9b2:	60 40       	sbci	r22, 0x00	; 0
 9b4:	40 40       	sbci	r20, 0x00	; 0
 9b6:	e1 f7       	brne	.-8      	; 0x9b0 <blink+0x4e>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <blink+0x58>
 9ba:	00 00       	nop
	ledOff(0);
	ledOff(1);
	ledOff(2);
	ledOff(3);
	_delay_ms(200);
	for (int i = 0; i < x; i++) {
 9bc:	2f 5f       	subi	r18, 0xFF	; 255
 9be:	3f 4f       	sbci	r19, 0xFF	; 255
 9c0:	28 17       	cp	r18, r24
 9c2:	39 07       	cpc	r19, r25
 9c4:	0c f3       	brlt	.-62     	; 0x988 <blink+0x26>
		ledOff(2);
		ledOff(3);
		_delay_ms(200);
	}

}
 9c6:	08 95       	ret

000009c8 <display>:

void display(int16_t number) {
 9c8:	ef 92       	push	r14
 9ca:	ff 92       	push	r15
 9cc:	7c 01       	movw	r14, r24
	blink(1);
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	0e 94 b1 04 	call	0x962	; 0x962 <blink>
	ledOff(0);
 9d4:	10 98       	cbi	0x02, 0	; 2
	ledOff(1);
 9d6:	11 98       	cbi	0x02, 1	; 2
	ledOff(2);
 9d8:	12 98       	cbi	0x02, 2	; 2
	ledOff(3);
 9da:	13 98       	cbi	0x02, 3	; 2
	if (number & (1 << 0)) {
 9dc:	e0 fc       	sbrc	r14, 0
		ledOn(0);
 9de:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 1)) {
 9e0:	e1 fc       	sbrc	r14, 1
		ledOn(1);
 9e2:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 2)) {
 9e4:	e2 fc       	sbrc	r14, 2
		ledOn(2);
 9e6:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 3)) {
 9e8:	e3 fc       	sbrc	r14, 3
		ledOn(3);
 9ea:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	0e 94 13 02 	call	0x426	; 0x426 <pushButton>
 9f2:	88 23       	and	r24, r24
 9f4:	d9 f3       	breq	.-10     	; 0x9ec <display+0x24>
			break;
	}
	blink(2);
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	0e 94 b1 04 	call	0x962	; 0x962 <blink>
	if (number & (1 << 4)) {
 9fc:	e4 fc       	sbrc	r14, 4
		ledOn(0);
 9fe:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 5)) {
 a00:	e5 fc       	sbrc	r14, 5
		ledOn(1);
 a02:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 6)) {
 a04:	e6 fc       	sbrc	r14, 6
		ledOn(2);
 a06:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 7)) {
 a08:	e7 fc       	sbrc	r14, 7
		ledOn(3);
 a0a:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	0e 94 13 02 	call	0x426	; 0x426 <pushButton>
 a12:	88 23       	and	r24, r24
 a14:	d9 f3       	breq	.-10     	; 0xa0c <display+0x44>
			break;
	}
	blink(3);
 a16:	83 e0       	ldi	r24, 0x03	; 3
 a18:	0e 94 b1 04 	call	0x962	; 0x962 <blink>
	if (number & (1 << 8)) {
 a1c:	f0 fc       	sbrc	r15, 0
		ledOn(0);
 a1e:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 9)) {
 a20:	f1 fc       	sbrc	r15, 1
		ledOn(1);
 a22:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 10)) {
 a24:	f2 fc       	sbrc	r15, 2
		ledOn(2);
 a26:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 11)) {
 a28:	f3 fc       	sbrc	r15, 3
		ledOn(3);
 a2a:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	0e 94 13 02 	call	0x426	; 0x426 <pushButton>
 a32:	88 23       	and	r24, r24
 a34:	d9 f3       	breq	.-10     	; 0xa2c <display+0x64>
			break;
	}
	blink(4);
 a36:	84 e0       	ldi	r24, 0x04	; 4
 a38:	0e 94 b1 04 	call	0x962	; 0x962 <blink>
	if (number & (1 << 12)) {
 a3c:	f4 fc       	sbrc	r15, 4
		ledOn(0);
 a3e:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 13)) {
 a40:	f5 fc       	sbrc	r15, 5
		ledOn(1);
 a42:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 14)) {
 a44:	f6 fc       	sbrc	r15, 6
		ledOn(2);
 a46:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 15)) {
 a48:	f7 fc       	sbrc	r15, 7
		ledOn(3);
 a4a:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	0e 94 13 02 	call	0x426	; 0x426 <pushButton>
 a52:	88 23       	and	r24, r24
 a54:	d9 f3       	breq	.-10     	; 0xa4c <display+0x84>
			break;
	}

}
 a56:	ff 90       	pop	r15
 a58:	ef 90       	pop	r14
 a5a:	08 95       	ret

00000a5c <bar>:

void bar(int8_t channel){
 a5c:	cf 92       	push	r12
 a5e:	df 92       	push	r13
 a60:	ef 92       	push	r14
 a62:	ff 92       	push	r15
	setADC(channel);
 a64:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a68:	83 ef       	ldi	r24, 0xF3	; 243
 a6a:	91 e0       	ldi	r25, 0x01	; 1
 a6c:	01 97       	sbiw	r24, 0x01	; 1
 a6e:	f1 f7       	brne	.-4      	; 0xa6c <bar+0x10>
 a70:	00 c0       	rjmp	.+0      	; 0xa72 <bar+0x16>
 a72:	00 00       	nop
 a74:	f8 e0       	ldi	r31, 0x08	; 8
 a76:	cf 2e       	mov	r12, r31
 a78:	d1 2c       	mov	r13, r1
	int16_t data=0;
 a7a:	e1 2c       	mov	r14, r1
 a7c:	f1 2c       	mov	r15, r1
	_delay_us(125);
	for (int i = 0; i < 8; i++) {
			data += getData();
 a7e:	0e 94 80 02 	call	0x500	; 0x500 <getData>
 a82:	e8 0e       	add	r14, r24
 a84:	f9 1e       	adc	r15, r25
 a86:	91 e0       	ldi	r25, 0x01	; 1
 a88:	c9 1a       	sub	r12, r25
 a8a:	d1 08       	sbc	r13, r1

void bar(int8_t channel){
	setADC(channel);
	int16_t data=0;
	_delay_us(125);
	for (int i = 0; i < 8; i++) {
 a8c:	c1 f7       	brne	.-16     	; 0xa7e <bar+0x22>
			data += getData();
		}
		data >>= 3;
 a8e:	c7 01       	movw	r24, r14
 a90:	e3 e0       	ldi	r30, 0x03	; 3
 a92:	95 95       	asr	r25
 a94:	87 95       	ror	r24
 a96:	ea 95       	dec	r30
 a98:	e1 f7       	brne	.-8      	; 0xa92 <bar+0x36>
	if (data < 100) {
 a9a:	84 36       	cpi	r24, 0x64	; 100
 a9c:	91 05       	cpc	r25, r1
 a9e:	24 f4       	brge	.+8      	; 0xaa8 <bar+0x4c>
				ledOff(0);
 aa0:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 aa2:	11 98       	cbi	0x02, 1	; 2
				ledOff(2);
 aa4:	12 98       	cbi	0x02, 2	; 2
				ledOff(3);
 aa6:	13 98       	cbi	0x02, 3	; 2
			}
			if (data < 300 && data >= 100) {
 aa8:	9c 01       	movw	r18, r24
 aaa:	24 56       	subi	r18, 0x64	; 100
 aac:	31 09       	sbc	r19, r1
 aae:	28 3c       	cpi	r18, 0xC8	; 200
 ab0:	31 05       	cpc	r19, r1
 ab2:	20 f4       	brcc	.+8      	; 0xabc <bar+0x60>
				ledOff(0);
 ab4:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 ab6:	11 98       	cbi	0x02, 1	; 2
				ledOff(2);
 ab8:	12 98       	cbi	0x02, 2	; 2
				ledOn(3);
 aba:	13 9a       	sbi	0x02, 3	; 2
			}
			if (data < 500 && data >= 300) {
 abc:	9c 01       	movw	r18, r24
 abe:	2c 52       	subi	r18, 0x2C	; 44
 ac0:	31 40       	sbci	r19, 0x01	; 1
 ac2:	28 3c       	cpi	r18, 0xC8	; 200
 ac4:	31 05       	cpc	r19, r1
 ac6:	20 f4       	brcc	.+8      	; 0xad0 <bar+0x74>
				ledOff(0);
 ac8:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 aca:	11 98       	cbi	0x02, 1	; 2
				ledOn(2);
 acc:	12 9a       	sbi	0x02, 2	; 2
				ledOn(3);
 ace:	13 9a       	sbi	0x02, 3	; 2
			}
			if (data < 800 && data >= 500) {
 ad0:	9c 01       	movw	r18, r24
 ad2:	24 5f       	subi	r18, 0xF4	; 244
 ad4:	31 40       	sbci	r19, 0x01	; 1
 ad6:	2c 32       	cpi	r18, 0x2C	; 44
 ad8:	31 40       	sbci	r19, 0x01	; 1
 ada:	10 f4       	brcc	.+4      	; 0xae0 <bar+0x84>
				ledOff(0);
 adc:	10 98       	cbi	0x02, 0	; 2
 ade:	04 c0       	rjmp	.+8      	; 0xae8 <bar+0x8c>
				ledOn(1);
				ledOn(2);
				ledOn(3);
			}
			if (data >= 800) {
 ae0:	80 32       	cpi	r24, 0x20	; 32
 ae2:	93 40       	sbci	r25, 0x03	; 3
 ae4:	24 f0       	brlt	.+8      	; 0xaee <bar+0x92>
				ledOn(0);
 ae6:	10 9a       	sbi	0x02, 0	; 2
				ledOn(1);
 ae8:	11 9a       	sbi	0x02, 1	; 2
				ledOn(2);
 aea:	12 9a       	sbi	0x02, 2	; 2
				ledOn(3);
 aec:	13 9a       	sbi	0x02, 3	; 2
			}
}
 aee:	ff 90       	pop	r15
 af0:	ef 90       	pop	r14
 af2:	df 90       	pop	r13
 af4:	cf 90       	pop	r12
 af6:	08 95       	ret

00000af8 <USART0_Transmit>:
 *      Author: time
 */

void USART0_Transmit(unsigned char data) {

	while (!(UCSR0A & (1 << UDRE0)))
 af8:	90 91 c0 00 	lds	r25, 0x00C0
 afc:	95 ff       	sbrs	r25, 5
 afe:	fc cf       	rjmp	.-8      	; 0xaf8 <USART0_Transmit>
		; // Wait for empty transmit buffer

	UDR0 = data; // Put data into buffer, sends the data
 b00:	80 93 c6 00 	sts	0x00C6, r24
 b04:	08 95       	ret

00000b06 <USART0_Receive>:
}

unsigned char USART0_Receive(void) {

	while (!(UCSR0A & (1 << RXC0)))
 b06:	80 91 c0 00 	lds	r24, 0x00C0
 b0a:	87 ff       	sbrs	r24, 7
 b0c:	fc cf       	rjmp	.-8      	; 0xb06 <USART0_Receive>
		; // Wait for data to be received

	return UDR0; // Get and return received data from buffer
 b0e:	80 91 c6 00 	lds	r24, 0x00C6
}
 b12:	08 95       	ret

00000b14 <uart_puts>:

void uart_puts(char *s) {
 b14:	ef 92       	push	r14
 b16:	ff 92       	push	r15
 b18:	7c 01       	movw	r14, r24
	while (*s) { /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <uart_puts+0xc>
		USART0_Transmit(*s);
 b1c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <USART0_Transmit>

	return UDR0; // Get and return received data from buffer
}

void uart_puts(char *s) {
	while (*s) { /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
 b20:	f7 01       	movw	r30, r14
 b22:	81 91       	ld	r24, Z+
 b24:	7f 01       	movw	r14, r30
 b26:	81 11       	cpse	r24, r1
 b28:	f9 cf       	rjmp	.-14     	; 0xb1c <uart_puts+0x8>
		USART0_Transmit(*s);
		s++;
	}
}
 b2a:	ff 90       	pop	r15
 b2c:	ef 90       	pop	r14
 b2e:	08 95       	ret

00000b30 <USART_RXC_vect>:


ISR(USART_RXC_vect)
{
 b30:	1f 92       	push	r1
 b32:	0f 92       	push	r0
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	0f 92       	push	r0
 b38:	11 24       	eor	r1, r1
 b3a:	0b b6       	in	r0, 0x3b	; 59
 b3c:	0f 92       	push	r0
 b3e:	2f 93       	push	r18
 b40:	3f 93       	push	r19
 b42:	4f 93       	push	r20
 b44:	5f 93       	push	r21
 b46:	6f 93       	push	r22
 b48:	7f 93       	push	r23
 b4a:	8f 93       	push	r24
 b4c:	9f 93       	push	r25
 b4e:	af 93       	push	r26
 b50:	bf 93       	push	r27
 b52:	ef 93       	push	r30
 b54:	ff 93       	push	r31
  unsigned char nextChar;
  // Daten aus dem Puffer lesen
  nextChar = UDR1;
 b56:	80 91 ce 00 	lds	r24, 0x00CE
  ledOn(0);
 b5a:	10 9a       	sbi	0x02, 0	; 2
  ledOn(1);
 b5c:	11 9a       	sbi	0x02, 1	; 2
  ledOn(2);
 b5e:	12 9a       	sbi	0x02, 2	; 2
  ledOn(3);
 b60:	13 9a       	sbi	0x02, 3	; 2
  if( uart_str_complete == 0 ) {	// wenn uart_string gerade in Verwendung, neues Zeichen verwerfen
 b62:	90 91 44 01 	lds	r25, 0x0144
 b66:	91 11       	cpse	r25, r1
 b68:	23 c0       	rjmp	.+70     	; 0xbb0 <USART_RXC_vect+0x80>

    // Daten werden erst in uart_string geschrieben, wenn nicht String-Ende/max Zeichenl√§nge erreicht ist/string gerade verarbeitet wird
    if( nextChar != '\n' &&
 b6a:	8a 30       	cpi	r24, 0x0A	; 10
 b6c:	91 f0       	breq	.+36     	; 0xb92 <USART_RXC_vect+0x62>
 b6e:	8d 30       	cpi	r24, 0x0D	; 13
 b70:	81 f0       	breq	.+32     	; 0xb92 <USART_RXC_vect+0x62>
        nextChar != '\r' &&
        uart_str_count < UART_MAXSTRLEN ) {
 b72:	90 91 43 01 	lds	r25, 0x0143
  ledOn(3);
  if( uart_str_complete == 0 ) {	// wenn uart_string gerade in Verwendung, neues Zeichen verwerfen

    // Daten werden erst in uart_string geschrieben, wenn nicht String-Ende/max Zeichenl√§nge erreicht ist/string gerade verarbeitet wird
    if( nextChar != '\n' &&
        nextChar != '\r' &&
 b76:	9e 31       	cpi	r25, 0x1E	; 30
 b78:	60 f4       	brcc	.+24     	; 0xb92 <USART_RXC_vect+0x62>
        uart_str_count < UART_MAXSTRLEN ) {
      uart_string[uart_str_count] = nextChar;
 b7a:	e0 91 43 01 	lds	r30, 0x0143
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	ec 5d       	subi	r30, 0xDC	; 220
 b82:	fe 4f       	sbci	r31, 0xFE	; 254
 b84:	80 83       	st	Z, r24
      uart_str_count++;
 b86:	80 91 43 01 	lds	r24, 0x0143
 b8a:	8f 5f       	subi	r24, 0xFF	; 255
 b8c:	80 93 43 01 	sts	0x0143, r24
 b90:	0f c0       	rjmp	.+30     	; 0xbb0 <USART_RXC_vect+0x80>
    }
    else {
      uart_string[uart_str_count] = '\0';
 b92:	e0 91 43 01 	lds	r30, 0x0143
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	ec 5d       	subi	r30, 0xDC	; 220
 b9a:	fe 4f       	sbci	r31, 0xFE	; 254
 b9c:	10 82       	st	Z, r1
      uart_str_count = 0;
 b9e:	10 92 43 01 	sts	0x0143, r1
      uart_str_complete = 1;
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	80 93 44 01 	sts	0x0144, r24
		char dest[] = "i,";
		strcat(dest,utoa(getData(),s,10));
		uart_puts(dest);
	}
	*/
	uart_puts("Robby serial Interface");
 ba8:	80 e0       	ldi	r24, 0x00	; 0
 baa:	91 e0       	ldi	r25, 0x01	; 1
 bac:	0e 94 8a 05 	call	0xb14	; 0xb14 <uart_puts>
      handle_command(uart_string);
    }
  }
}
 bb0:	ff 91       	pop	r31
 bb2:	ef 91       	pop	r30
 bb4:	bf 91       	pop	r27
 bb6:	af 91       	pop	r26
 bb8:	9f 91       	pop	r25
 bba:	8f 91       	pop	r24
 bbc:	7f 91       	pop	r23
 bbe:	6f 91       	pop	r22
 bc0:	5f 91       	pop	r21
 bc2:	4f 91       	pop	r20
 bc4:	3f 91       	pop	r19
 bc6:	2f 91       	pop	r18
 bc8:	0f 90       	pop	r0
 bca:	0b be       	out	0x3b, r0	; 59
 bcc:	0f 90       	pop	r0
 bce:	0f be       	out	0x3f, r0	; 63
 bd0:	0f 90       	pop	r0
 bd2:	1f 90       	pop	r1
 bd4:	18 95       	reti

00000bd6 <handle_command>:
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 bd8:	91 e0       	ldi	r25, 0x01	; 1
 bda:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <uart_puts>

00000bde <main>:
#include "regler.h"
#include "debug.h"
#include "serial.h"

int main(void) {
	init();
 bde:	0e 94 6b 00 	call	0xd6	; 0xd6 <init>
	sei();
 be2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 be4:	2f ef       	ldi	r18, 0xFF	; 255
 be6:	81 ee       	ldi	r24, 0xE1	; 225
 be8:	94 e0       	ldi	r25, 0x04	; 4
 bea:	21 50       	subi	r18, 0x01	; 1
 bec:	80 40       	sbci	r24, 0x00	; 0
 bee:	90 40       	sbci	r25, 0x00	; 0
 bf0:	e1 f7       	brne	.-8      	; 0xbea <main+0xc>
 bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <main+0x16>
 bf4:	00 00       	nop
 bf6:	f6 cf       	rjmp	.-20     	; 0xbe4 <main+0x6>

00000bf8 <_exit>:
 bf8:	f8 94       	cli

00000bfa <__stop_program>:
 bfa:	ff cf       	rjmp	.-2      	; 0xbfa <__stop_program>
