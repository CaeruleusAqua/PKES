
PKESintro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000eaa  00000f3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800120  00800120  00000f5e  2**0
                  ALLOC
  3 .stab         00002c4c  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa1  00000000  00000000  00003bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004b4d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_3>
  10:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_4>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea ea       	ldi	r30, 0xAA	; 170
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 32       	cpi	r26, 0x20	; 32
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e2       	ldi	r26, 0x20	; 32
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a9 35       	cpi	r26, 0x59	; 89
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 99 06 	call	0xd32	; 0xd32 <main>
  ce:	0c 94 53 07 	jmp	0xea6	; 0xea6 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <init>:
	//     - intermediate
	//       DDRA=1+2+4+8;
	//     - using processor makros
	//       DDRA=((1<<DDA0) | (1<<DDA1) | (1<<DDA2) | (1<<DDA3));
	//     - using hardware specific makros
	DDRA |= ((1 << LED_0) | (1 << LED_1) | (1 << LED_2) | (1 << LED_3));
  d6:	81 b1       	in	r24, 0x01	; 1
  d8:	8f 60       	ori	r24, 0x0F	; 15
  da:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xff;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 b9       	out	0x07, r24	; 7
	// disable leds
	PORTA &= ~((1 << LED_0) | (1 << LED_1) | (1 << LED_2) | (1 << LED_3));
  e0:	82 b1       	in	r24, 0x02	; 2
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	82 b9       	out	0x02, r24	; 2
	//--------------------------------  ADMUX  -------------------------------
	//interne Referenz setzen
	ADMUX |= ((1 << REFS0) | (1 << REFS1));
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 6c       	ori	r24, 0xC0	; 192
  ee:	80 83       	st	Z, r24
	//adc rechtsbuendig
	ADMUX &= ~(1 << ADLAR);
  f0:	80 81       	ld	r24, Z
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	80 83       	st	Z, r24
	//kanal 0 setzen
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
  f6:	80 81       	ld	r24, Z
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	80 83       	st	Z, r24
	//-------------------------------- ADCSRA -------------------------------
	//vorteiler auf 128
	ADCSRA |= ((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	87 60       	ori	r24, 0x07	; 7
 104:	80 83       	st	Z, r24

	//---------------------------------- PWM --------------------------------
	DDRB |= ((1 << OC1A) | (1 << OC1B)); //OC1A/OC1B auf Ausgang
 106:	84 b1       	in	r24, 0x04	; 4
 108:	80 66       	ori	r24, 0x60	; 96
 10a:	84 b9       	out	0x04, r24	; 4
	TCCR1A = ((1 << WGM10) | (1 << COM1A1) | (1 << COM1B1)); // PMW-Mode (1) Phase Correct, 8 Bit
 10c:	81 ea       	ldi	r24, 0xA1	; 161
 10e:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = ((1 << CS11) | (1 << CS10)); // Prescaler auf 64
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	80 93 81 00 	sts	0x0081, r24

	//--------------------------------- Motor -------------------------------
	// PortE 2/3 auf Ausgang (Motor_1 rechts)
	DDRE |= ((1 << 2) | (1 << 3));
 118:	8d b1       	in	r24, 0x0d	; 13
 11a:	8c 60       	ori	r24, 0x0C	; 12
 11c:	8d b9       	out	0x0d, r24	; 13
	PORTE &= ~(1 << 2);
 11e:	72 98       	cbi	0x0e, 2	; 14
	PORTE |= (1 << 3);
 120:	73 9a       	sbi	0x0e, 3	; 14
	// PortG 0/1 auf Ausgang (Motor_2 links)
	DDRG |= ((1 << 0) | (1 << 1));
 122:	83 b3       	in	r24, 0x13	; 19
 124:	83 60       	ori	r24, 0x03	; 3
 126:	83 bb       	out	0x13, r24	; 19
	PORTG &= ~(1 << 1);
 128:	a1 98       	cbi	0x14, 1	; 20
	PORTG |= (1 << 0);
 12a:	a0 9a       	sbi	0x14, 0	; 20
	OCR1A = 0;
 12c:	10 92 89 00 	sts	0x0089, r1
 130:	10 92 88 00 	sts	0x0088, r1
	// PWM 1 auf null
	OCR1B = 0;
 134:	10 92 8b 00 	sts	0x008B, r1
 138:	10 92 8a 00 	sts	0x008A, r1
	// PWM 2 auf null
	//---------------------------------- Space --------------------------------
	S.bSbutton_S0 = 0;
 13c:	80 91 54 01 	lds	r24, 0x0154
	S.bSbutton_S1 = 0;
	S.bSbutton_S2 = 0;
	S.bSbutton_S3 = 0;
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	87 7f       	andi	r24, 0xF7	; 247
 144:	80 93 54 01 	sts	0x0154, r24
	tickslinks = 0;
 148:	10 92 50 01 	sts	0x0150, r1
 14c:	10 92 4f 01 	sts	0x014F, r1
	ticksrechts = 0;
 150:	10 92 4e 01 	sts	0x014E, r1
 154:	10 92 4d 01 	sts	0x014D, r1
	richtung = gerade;
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 93 51 01 	sts	0x0151, r24
	//-------------------------------- Interrupt ------------------------------
	EIMSK = 0;
 15e:	1d ba       	out	0x1d, r1	; 29
	EICRA = 0;
 160:	e9 e6       	ldi	r30, 0x69	; 105
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	10 82       	st	Z, r1
	EICRA |= ((1 << ISC21) | (0 << ISC20) | (1 << ISC31) | (0 << ISC30));
 166:	80 81       	ld	r24, Z
 168:	80 6a       	ori	r24, 0xA0	; 160
 16a:	80 83       	st	Z, r24
	EIMSK |= ((1 << INT2) | (1 << INT3));
 16c:	8d b3       	in	r24, 0x1d	; 29
 16e:	8c 60       	ori	r24, 0x0C	; 12
 170:	8d bb       	out	0x1d, r24	; 29
	DDRD = 0; // alles auf eingang
 172:	1a b8       	out	0x0a, r1	; 10

	//--------------------------------- UART ----------------------------------

	/* Set baud rate */
	UBRR0H = UBRRH_VALUE;
 174:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: 8data, no parity & 2 stop bits */
	UCSR0C = (0 << UMSEL0) | (0 << UPM0) | (1 << USBS0) | (3 << UCSZ0);
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) |(1<<RXCIE0);
 184:	88 e9       	ldi	r24, 0x98	; 152
 186:	80 93 c1 00 	sts	0x00C1, r24
 18a:	08 95       	ret

0000018c <lineInit>:
}

void lineInit() {
	VccOn(CNY70_1);
 18c:	44 98       	cbi	0x08, 4	; 8
	VccOn(CNY70_2);
 18e:	43 98       	cbi	0x08, 3	; 8
 190:	08 95       	ret

00000192 <distInit>:
}

void distInit() {
	VccOn(ds1);
 192:	40 98       	cbi	0x08, 0	; 8
	VccOn(ds2);
 194:	41 98       	cbi	0x08, 1	; 8
	VccOn(ds3);
 196:	42 98       	cbi	0x08, 2	; 8
 198:	08 95       	ret

0000019a <stopall>:
 *  Created on: 24.05.2012
 *      Author: time
 */

void stopall() {
	Motor_old_1_Speed=Motor_1_Speed;
 19a:	80 91 2a 01 	lds	r24, 0x012A
 19e:	90 91 2b 01 	lds	r25, 0x012B
 1a2:	90 93 27 01 	sts	0x0127, r25
 1a6:	80 93 26 01 	sts	0x0126, r24
	Motor_old_2_Speed=Motor_2_Speed;
 1aa:	80 91 28 01 	lds	r24, 0x0128
 1ae:	90 91 29 01 	lds	r25, 0x0129
 1b2:	90 93 25 01 	sts	0x0125, r25
 1b6:	80 93 24 01 	sts	0x0124, r24
	Motor_1_Speed = 0;
 1ba:	10 92 2b 01 	sts	0x012B, r1
 1be:	10 92 2a 01 	sts	0x012A, r1
	Motor_2_Speed = 0;
 1c2:	10 92 29 01 	sts	0x0129, r1
 1c6:	10 92 28 01 	sts	0x0128, r1
	Motor_1_adjSpeed = 0;
 1ca:	10 92 23 01 	sts	0x0123, r1
 1ce:	10 92 22 01 	sts	0x0122, r1
	Motor_2_adjSpeed = 0;
 1d2:	10 92 21 01 	sts	0x0121, r1
 1d6:	10 92 20 01 	sts	0x0120, r1
 1da:	08 95       	ret

000001dc <setSpeed_1>:

}
void setSpeed_1(int16_t speed) {
	if (speed >= 0) {
 1dc:	97 fd       	sbrc	r25, 7
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <setSpeed_1+0xa>
		// motor_1 vorwärts
		PORTE &= ~(1 << 3);
 1e0:	73 98       	cbi	0x0e, 3	; 14
		PORTE |= (1 << 2);
 1e2:	72 9a       	sbi	0x0e, 2	; 14
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <setSpeed_1+0x20>
	} else {
		speed = -speed;
		if (speed > 255)
			speed = 255;
		// motor_1 rückwärts
		PORTE &= ~(1 << 2);
 1e6:	72 98       	cbi	0x0e, 2	; 14
		PORTE |= (1 << 3);
 1e8:	73 9a       	sbi	0x0e, 3	; 14
		OCR1A = speed;
 1ea:	91 95       	neg	r25
 1ec:	81 95       	neg	r24
 1ee:	91 09       	sbc	r25, r1
 1f0:	8f 3f       	cpi	r24, 0xFF	; 255
 1f2:	91 05       	cpc	r25, r1
 1f4:	19 f0       	breq	.+6      	; 0x1fc <setSpeed_1+0x20>
 1f6:	14 f0       	brlt	.+4      	; 0x1fc <setSpeed_1+0x20>
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 89 00 	sts	0x0089, r25
 200:	80 93 88 00 	sts	0x0088, r24
 204:	08 95       	ret

00000206 <steuer>:
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 206:	90 93 23 01 	sts	0x0123, r25
 20a:	80 93 22 01 	sts	0x0122, r24
	}
}

void steuer(int16_t richtung) {
	setMotorSpeed_1(richtung);
	setMotorSpeed_2(-richtung);
 20e:	91 95       	neg	r25
 210:	81 95       	neg	r24
 212:	91 09       	sbc	r25, r1
}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 214:	90 93 21 01 	sts	0x0121, r25
 218:	80 93 20 01 	sts	0x0120, r24
 21c:	08 95       	ret

0000021e <setSpeed_2>:
	setMotorSpeed_1(richtung);
	setMotorSpeed_2(-richtung);
}

void setSpeed_2(int16_t speed) {
	if (speed >= 0) {
 21e:	97 fd       	sbrc	r25, 7
 220:	03 c0       	rjmp	.+6      	; 0x228 <setSpeed_2+0xa>
		// motor_2 vorwärts
		PORTG &= ~(1 << 0);
 222:	a0 98       	cbi	0x14, 0	; 20
		PORTG |= (1 << 1);
 224:	a1 9a       	sbi	0x14, 1	; 20
 226:	0b c0       	rjmp	.+22     	; 0x23e <setSpeed_2+0x20>
	} else {
		speed = -speed;
		if (speed > 255)
			speed = 255;
		// motor_2 rückwärts
		PORTG &= ~(1 << 1);
 228:	a1 98       	cbi	0x14, 1	; 20
		PORTG |= (1 << 0);
 22a:	a0 9a       	sbi	0x14, 0	; 20

		OCR1B = speed;
 22c:	91 95       	neg	r25
 22e:	81 95       	neg	r24
 230:	91 09       	sbc	r25, r1
 232:	8f 3f       	cpi	r24, 0xFF	; 255
 234:	91 05       	cpc	r25, r1
 236:	19 f0       	breq	.+6      	; 0x23e <setSpeed_2+0x20>
 238:	14 f0       	brlt	.+4      	; 0x23e <setSpeed_2+0x20>
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 8b 00 	sts	0x008B, r25
 242:	80 93 8a 00 	sts	0x008A, r24
 246:	08 95       	ret

00000248 <setMotorBaseSpeed_1>:

	}
}

void setMotorBaseSpeed_1(int16_t speed) {
	if (speed > 255)
 248:	8f 3f       	cpi	r24, 0xFF	; 255
 24a:	91 05       	cpc	r25, r1
 24c:	09 f0       	breq	.+2      	; 0x250 <setMotorBaseSpeed_1+0x8>
 24e:	2c f4       	brge	.+10     	; 0x25a <setMotorBaseSpeed_1+0x12>
		speed = 255;
	if (speed < -255)
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	92 07       	cpc	r25, r18
 256:	24 f0       	brlt	.+8      	; 0x260 <setMotorBaseSpeed_1+0x18>
 258:	05 c0       	rjmp	.+10     	; 0x264 <setMotorBaseSpeed_1+0x1c>
	}
}

void setMotorBaseSpeed_1(int16_t speed) {
	if (speed > 255)
		speed = 255;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <setMotorBaseSpeed_1+0x1c>
	if (speed < -255)
		speed = -255;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	9f ef       	ldi	r25, 0xFF	; 255
	Motor_1_Speed = speed;
 264:	90 93 2b 01 	sts	0x012B, r25
 268:	80 93 2a 01 	sts	0x012A, r24
 26c:	08 95       	ret

0000026e <setMotorBaseSpeed_2>:

}

void setMotorBaseSpeed_2(int16_t speed) {
	if (speed > 255)
 26e:	8f 3f       	cpi	r24, 0xFF	; 255
 270:	91 05       	cpc	r25, r1
 272:	09 f0       	breq	.+2      	; 0x276 <setMotorBaseSpeed_2+0x8>
 274:	2c f4       	brge	.+10     	; 0x280 <setMotorBaseSpeed_2+0x12>
		speed = 255;
	if (speed < -255)
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	92 07       	cpc	r25, r18
 27c:	24 f0       	brlt	.+8      	; 0x286 <setMotorBaseSpeed_2+0x18>
 27e:	05 c0       	rjmp	.+10     	; 0x28a <setMotorBaseSpeed_2+0x1c>

}

void setMotorBaseSpeed_2(int16_t speed) {
	if (speed > 255)
		speed = 255;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <setMotorBaseSpeed_2+0x1c>
	if (speed < -255)
		speed = -255;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	9f ef       	ldi	r25, 0xFF	; 255
	Motor_2_Speed = speed;
 28a:	90 93 29 01 	sts	0x0129, r25
 28e:	80 93 28 01 	sts	0x0128, r24
 292:	08 95       	ret

00000294 <modMotorBaseSpeed_1>:

}

void modMotorBaseSpeed_1(int16_t speed) {
	Motor_1_Speed += speed;
 294:	20 91 2a 01 	lds	r18, 0x012A
 298:	30 91 2b 01 	lds	r19, 0x012B
 29c:	28 0f       	add	r18, r24
 29e:	39 1f       	adc	r19, r25
	if (Motor_1_Speed > 255)
 2a0:	2f 3f       	cpi	r18, 0xFF	; 255
 2a2:	31 05       	cpc	r19, r1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <modMotorBaseSpeed_1+0x14>
 2a6:	2c f4       	brge	.+10     	; 0x2b2 <modMotorBaseSpeed_1+0x1e>
	Motor_2_Speed = speed;

}

void modMotorBaseSpeed_1(int16_t speed) {
	Motor_1_Speed += speed;
 2a8:	30 93 2b 01 	sts	0x012B, r19
 2ac:	20 93 2a 01 	sts	0x012A, r18
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <modMotorBaseSpeed_1+0x2a>
	if (Motor_1_Speed > 255)
		Motor_1_Speed = 255;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 2b 01 	sts	0x012B, r25
 2ba:	80 93 2a 01 	sts	0x012A, r24
	if (Motor_1_Speed < -255)
 2be:	80 91 2a 01 	lds	r24, 0x012A
 2c2:	90 91 2b 01 	lds	r25, 0x012B
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	34 f4       	brge	.+12     	; 0x2d8 <modMotorBaseSpeed_1+0x44>
		Motor_1_Speed = -255;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	9f ef       	ldi	r25, 0xFF	; 255
 2d0:	90 93 2b 01 	sts	0x012B, r25
 2d4:	80 93 2a 01 	sts	0x012A, r24
 2d8:	08 95       	ret

000002da <modMotorBaseSpeed_2>:
}

void modMotorBaseSpeed_2(int16_t speed) {
	Motor_2_Speed += speed;
 2da:	20 91 28 01 	lds	r18, 0x0128
 2de:	30 91 29 01 	lds	r19, 0x0129
 2e2:	28 0f       	add	r18, r24
 2e4:	39 1f       	adc	r19, r25
	if (Motor_2_Speed > 255)
 2e6:	2f 3f       	cpi	r18, 0xFF	; 255
 2e8:	31 05       	cpc	r19, r1
 2ea:	09 f0       	breq	.+2      	; 0x2ee <modMotorBaseSpeed_2+0x14>
 2ec:	2c f4       	brge	.+10     	; 0x2f8 <modMotorBaseSpeed_2+0x1e>
	if (Motor_1_Speed < -255)
		Motor_1_Speed = -255;
}

void modMotorBaseSpeed_2(int16_t speed) {
	Motor_2_Speed += speed;
 2ee:	30 93 29 01 	sts	0x0129, r19
 2f2:	20 93 28 01 	sts	0x0128, r18
 2f6:	06 c0       	rjmp	.+12     	; 0x304 <modMotorBaseSpeed_2+0x2a>
	if (Motor_2_Speed > 255)
		Motor_2_Speed = 255;
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 29 01 	sts	0x0129, r25
 300:	80 93 28 01 	sts	0x0128, r24
	if (Motor_2_Speed < -255)
 304:	80 91 28 01 	lds	r24, 0x0128
 308:	90 91 29 01 	lds	r25, 0x0129
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	34 f4       	brge	.+12     	; 0x31e <modMotorBaseSpeed_2+0x44>
		Motor_2_Speed = -255;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	9f ef       	ldi	r25, 0xFF	; 255
 316:	90 93 29 01 	sts	0x0129, r25
 31a:	80 93 28 01 	sts	0x0128, r24
 31e:	08 95       	ret

00000320 <modMotorSpeed_1>:
}

void modMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed += speed;
 320:	20 91 22 01 	lds	r18, 0x0122
 324:	30 91 23 01 	lds	r19, 0x0123
 328:	28 0f       	add	r18, r24
 32a:	39 1f       	adc	r19, r25
	if (Motor_1_adjSpeed > 255)
 32c:	2f 3f       	cpi	r18, 0xFF	; 255
 32e:	31 05       	cpc	r19, r1
 330:	09 f0       	breq	.+2      	; 0x334 <modMotorSpeed_1+0x14>
 332:	2c f4       	brge	.+10     	; 0x33e <modMotorSpeed_1+0x1e>
	if (Motor_2_Speed < -255)
		Motor_2_Speed = -255;
}

void modMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed += speed;
 334:	30 93 23 01 	sts	0x0123, r19
 338:	20 93 22 01 	sts	0x0122, r18
 33c:	06 c0       	rjmp	.+12     	; 0x34a <modMotorSpeed_1+0x2a>
	if (Motor_1_adjSpeed > 255)
		Motor_1_adjSpeed = 255;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 23 01 	sts	0x0123, r25
 346:	80 93 22 01 	sts	0x0122, r24
	if (Motor_1_adjSpeed < -255)
 34a:	80 91 22 01 	lds	r24, 0x0122
 34e:	90 91 23 01 	lds	r25, 0x0123
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	34 f4       	brge	.+12     	; 0x364 <modMotorSpeed_1+0x44>
		Motor_1_adjSpeed = -255;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	90 93 23 01 	sts	0x0123, r25
 360:	80 93 22 01 	sts	0x0122, r24
 364:	08 95       	ret

00000366 <modMotorSpeed_2>:

}
void modMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed += speed;
 366:	20 91 20 01 	lds	r18, 0x0120
 36a:	30 91 21 01 	lds	r19, 0x0121
 36e:	28 0f       	add	r18, r24
 370:	39 1f       	adc	r19, r25
	if (Motor_2_adjSpeed > 255)
 372:	2f 3f       	cpi	r18, 0xFF	; 255
 374:	31 05       	cpc	r19, r1
 376:	09 f0       	breq	.+2      	; 0x37a <modMotorSpeed_2+0x14>
 378:	2c f4       	brge	.+10     	; 0x384 <modMotorSpeed_2+0x1e>
	if (Motor_1_adjSpeed < -255)
		Motor_1_adjSpeed = -255;

}
void modMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed += speed;
 37a:	30 93 21 01 	sts	0x0121, r19
 37e:	20 93 20 01 	sts	0x0120, r18
 382:	06 c0       	rjmp	.+12     	; 0x390 <modMotorSpeed_2+0x2a>
	if (Motor_2_adjSpeed > 255)
		Motor_2_adjSpeed = 255;
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	90 93 21 01 	sts	0x0121, r25
 38c:	80 93 20 01 	sts	0x0120, r24
	if (Motor_2_adjSpeed < -255)
 390:	80 91 20 01 	lds	r24, 0x0120
 394:	90 91 21 01 	lds	r25, 0x0121
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	34 f4       	brge	.+12     	; 0x3aa <modMotorSpeed_2+0x44>
		Motor_2_adjSpeed = -255;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	90 93 21 01 	sts	0x0121, r25
 3a6:	80 93 20 01 	sts	0x0120, r24
 3aa:	08 95       	ret

000003ac <setMotorSpeed_1>:

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 3ac:	90 93 23 01 	sts	0x0123, r25
 3b0:	80 93 22 01 	sts	0x0122, r24
 3b4:	08 95       	ret

000003b6 <setMotorSpeed_2>:
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 3b6:	90 93 21 01 	sts	0x0121, r25
 3ba:	80 93 20 01 	sts	0x0120, r24
 3be:	08 95       	ret

000003c0 <adjSpeed>:
}

void adjSpeed() {
 3c0:	ef 92       	push	r14
 3c2:	ff 92       	push	r15
	int m1 = Motor_1_Speed + Motor_1_adjSpeed;
 3c4:	80 91 2a 01 	lds	r24, 0x012A
 3c8:	90 91 2b 01 	lds	r25, 0x012B
 3cc:	20 91 22 01 	lds	r18, 0x0122
 3d0:	30 91 23 01 	lds	r19, 0x0123
 3d4:	82 0f       	add	r24, r18
 3d6:	93 1f       	adc	r25, r19
	int m2 = Motor_2_Speed + Motor_2_adjSpeed;
 3d8:	e0 90 28 01 	lds	r14, 0x0128
 3dc:	f0 90 29 01 	lds	r15, 0x0129
 3e0:	20 91 20 01 	lds	r18, 0x0120
 3e4:	30 91 21 01 	lds	r19, 0x0121
 3e8:	e2 0e       	add	r14, r18
 3ea:	f3 1e       	adc	r15, r19
	if (m1 > 255)
 3ec:	8f 3f       	cpi	r24, 0xFF	; 255
 3ee:	91 05       	cpc	r25, r1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <adjSpeed+0x34>
 3f2:	2c f4       	brge	.+10     	; 0x3fe <adjSpeed+0x3e>
		m1 = 255;
	if (m1 < -255)
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	92 07       	cpc	r25, r18
 3fa:	24 f0       	brlt	.+8      	; 0x404 <adjSpeed+0x44>
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <adjSpeed+0x48>

void adjSpeed() {
	int m1 = Motor_1_Speed + Motor_1_adjSpeed;
	int m2 = Motor_2_Speed + Motor_2_adjSpeed;
	if (m1 > 255)
		m1 = 255;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <adjSpeed+0x48>
	if (m1 < -255)
		m1 = -255;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	9f ef       	ldi	r25, 0xFF	; 255
	if (m2 > 255)
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	e2 16       	cp	r14, r18
 40c:	f1 04       	cpc	r15, r1
 40e:	09 f0       	breq	.+2      	; 0x412 <adjSpeed+0x52>
 410:	34 f4       	brge	.+12     	; 0x41e <adjSpeed+0x5e>
		m2 = 255;
	if (m2 < -255)
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	e2 16       	cp	r14, r18
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	f2 06       	cpc	r15, r18
 41a:	2c f0       	brlt	.+10     	; 0x426 <adjSpeed+0x66>
 41c:	08 c0       	rjmp	.+16     	; 0x42e <adjSpeed+0x6e>
	if (m1 > 255)
		m1 = 255;
	if (m1 < -255)
		m1 = -255;
	if (m2 > 255)
		m2 = 255;
 41e:	ee 24       	eor	r14, r14
 420:	ea 94       	dec	r14
 422:	f1 2c       	mov	r15, r1
 424:	04 c0       	rjmp	.+8      	; 0x42e <adjSpeed+0x6e>
	if (m2 < -255)
		m2 = -255;
 426:	ee 24       	eor	r14, r14
 428:	e3 94       	inc	r14
 42a:	ff 24       	eor	r15, r15
 42c:	fa 94       	dec	r15
	setSpeed_1(m1);
 42e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setSpeed_1>
	setSpeed_2(m2);
 432:	c7 01       	movw	r24, r14

}
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
	if (m2 > 255)
		m2 = 255;
	if (m2 < -255)
		m2 = -255;
	setSpeed_1(m1);
	setSpeed_2(m2);
 438:	0c 94 0f 01 	jmp	0x21e	; 0x21e <setSpeed_2>

0000043c <pushButton>:
 *  Created on: 24.05.2012
 *      Author: time
 */

uint8_t pushButton(uint8_t button) {
	switch (button) {
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	c9 f0       	breq	.+50     	; 0x472 <pushButton+0x36>
 440:	30 f0       	brcs	.+12     	; 0x44e <pushButton+0x12>
 442:	82 30       	cpi	r24, 0x02	; 2
 444:	49 f1       	breq	.+82     	; 0x498 <pushButton+0x5c>
 446:	83 30       	cpi	r24, 0x03	; 3
 448:	09 f0       	breq	.+2      	; 0x44c <pushButton+0x10>
 44a:	4f c0       	rjmp	.+158    	; 0x4ea <pushButton+0xae>
 44c:	38 c0       	rjmp	.+112    	; 0x4be <pushButton+0x82>
	case 0: {
		if (S.bSbutton_S0 == 1 && button(0) == 0) {
 44e:	80 91 54 01 	lds	r24, 0x0154
 452:	80 ff       	sbrs	r24, 0
 454:	04 c0       	rjmp	.+8      	; 0x45e <pushButton+0x22>
 456:	04 9b       	sbis	0x00, 4	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <pushButton+0x22>
			S.bSbutton_S0 = 0;
 45a:	8e 7f       	andi	r24, 0xFE	; 254
 45c:	37 c0       	rjmp	.+110    	; 0x4cc <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S0 = button(0);
 45e:	80 b1       	in	r24, 0x00	; 0
 460:	82 95       	swap	r24
 462:	81 70       	andi	r24, 0x01	; 1
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	89 27       	eor	r24, r25
 468:	90 91 54 01 	lds	r25, 0x0154
 46c:	80 fb       	bst	r24, 0
 46e:	90 f9       	bld	r25, 0
 470:	3a c0       	rjmp	.+116    	; 0x4e6 <pushButton+0xaa>
		return 0;
	}
	case 1: {
		if (S.bSbutton_S1 == 1 && button(1) == 0) {
 472:	80 91 54 01 	lds	r24, 0x0154
 476:	81 ff       	sbrs	r24, 1
 478:	04 c0       	rjmp	.+8      	; 0x482 <pushButton+0x46>
 47a:	05 9b       	sbis	0x00, 5	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <pushButton+0x46>
			S.bSbutton_S1 = 0;
 47e:	8d 7f       	andi	r24, 0xFD	; 253
 480:	25 c0       	rjmp	.+74     	; 0x4cc <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S1 = button(1);
 482:	80 b1       	in	r24, 0x00	; 0
 484:	85 fb       	bst	r24, 5
 486:	88 27       	eor	r24, r24
 488:	80 f9       	bld	r24, 0
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	89 27       	eor	r24, r25
 48e:	90 91 54 01 	lds	r25, 0x0154
 492:	80 fb       	bst	r24, 0
 494:	91 f9       	bld	r25, 1
 496:	27 c0       	rjmp	.+78     	; 0x4e6 <pushButton+0xaa>
		return 0;
	}
	case 2: {
		if (S.bSbutton_S2 == 1 && button(2) == 0) {
 498:	80 91 54 01 	lds	r24, 0x0154
 49c:	82 ff       	sbrs	r24, 2
 49e:	04 c0       	rjmp	.+8      	; 0x4a8 <pushButton+0x6c>
 4a0:	06 9b       	sbis	0x00, 6	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <pushButton+0x6c>
			S.bSbutton_S2 = 0;
 4a4:	8b 7f       	andi	r24, 0xFB	; 251
 4a6:	12 c0       	rjmp	.+36     	; 0x4cc <pushButton+0x90>
			return 1;
		}
		S.bSbutton_S2 = button(2);
 4a8:	80 b1       	in	r24, 0x00	; 0
 4aa:	86 fb       	bst	r24, 6
 4ac:	88 27       	eor	r24, r24
 4ae:	80 f9       	bld	r24, 0
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	89 27       	eor	r24, r25
 4b4:	90 91 54 01 	lds	r25, 0x0154
 4b8:	80 fb       	bst	r24, 0
 4ba:	92 f9       	bld	r25, 2
 4bc:	14 c0       	rjmp	.+40     	; 0x4e6 <pushButton+0xaa>
		return 0;
	}
	case 3: {
		if (S.bSbutton_S3 == 1 && button(3) == 0) {
 4be:	80 91 54 01 	lds	r24, 0x0154
 4c2:	83 ff       	sbrs	r24, 3
 4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <pushButton+0x98>
 4c6:	07 9b       	sbis	0x00, 7	; 0
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <pushButton+0x98>
			S.bSbutton_S3 = 0;
 4ca:	87 7f       	andi	r24, 0xF7	; 247
 4cc:	80 93 54 01 	sts	0x0154, r24
			return 1;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
		}
		S.bSbutton_S3 = button(3);
 4d4:	80 b1       	in	r24, 0x00	; 0
 4d6:	80 95       	com	r24
 4d8:	88 1f       	adc	r24, r24
 4da:	88 27       	eor	r24, r24
 4dc:	88 1f       	adc	r24, r24
 4de:	90 91 54 01 	lds	r25, 0x0154
 4e2:	80 fb       	bst	r24, 0
 4e4:	93 f9       	bld	r25, 3
 4e6:	90 93 54 01 	sts	0x0154, r25
		return 0;
	}
	}
	return 0;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
}
 4ec:	08 95       	ret

000004ee <setADC>:
 *      Author: time
 */


void setADC(uint8_t channel){
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
 4ee:	90 91 7c 00 	lds	r25, 0x007C
 4f2:	90 7f       	andi	r25, 0xF0	; 240
 4f4:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel;
 4f8:	90 91 7c 00 	lds	r25, 0x007C
 4fc:	98 2b       	or	r25, r24
 4fe:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1 << ADSC);
 502:	80 91 7a 00 	lds	r24, 0x007A
 506:	80 64       	ori	r24, 0x40	; 64
 508:	80 93 7a 00 	sts	0x007A, r24
	while ((1 << ADSC) & ADCSRA) {}
 50c:	80 91 7a 00 	lds	r24, 0x007A
 510:	86 fd       	sbrc	r24, 6
 512:	fc cf       	rjmp	.-8      	; 0x50c <setADC+0x1e>


}
 514:	08 95       	ret

00000516 <getData>:
uint16_t getData() {
	ADCSRA |= (1 << ADSC);
 516:	80 91 7a 00 	lds	r24, 0x007A
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	80 93 7a 00 	sts	0x007A, r24
	while ((1 << ADSC) & ADCSRA) {
 520:	80 91 7a 00 	lds	r24, 0x007A
 524:	86 fd       	sbrc	r24, 6
 526:	fc cf       	rjmp	.-8      	; 0x520 <getData+0xa>
	}
	return ADC;
 528:	20 91 78 00 	lds	r18, 0x0078
 52c:	30 91 79 00 	lds	r19, 0x0079
}
 530:	c9 01       	movw	r24, r18
 532:	08 95       	ret

00000534 <__vector_3>:
 *
 *  Created on: 26.05.2012
 *      Author: time
 */

ISR( INT2_vect) {
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
	tickslinks++;
 542:	80 91 4f 01 	lds	r24, 0x014F
 546:	90 91 50 01 	lds	r25, 0x0150
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	90 93 50 01 	sts	0x0150, r25
 550:	80 93 4f 01 	sts	0x014F, r24
	if(tickslinks>100)ledOff(0);
 554:	80 91 4f 01 	lds	r24, 0x014F
 558:	90 91 50 01 	lds	r25, 0x0150
 55c:	85 36       	cpi	r24, 0x65	; 101
 55e:	91 05       	cpc	r25, r1
 560:	10 f0       	brcs	.+4      	; 0x566 <__vector_3+0x32>
 562:	10 98       	cbi	0x02, 0	; 2
 564:	01 c0       	rjmp	.+2      	; 0x568 <__vector_3+0x34>
	else ledOn(0);
 566:	10 9a       	sbi	0x02, 0	; 2
}
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__vector_4>:

ISR( INT3_vect) {
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
	ticksrechts++;
 584:	80 91 4d 01 	lds	r24, 0x014D
 588:	90 91 4e 01 	lds	r25, 0x014E
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	90 93 4e 01 	sts	0x014E, r25
 592:	80 93 4d 01 	sts	0x014D, r24
	if(ticksrechts>100)ledOff(1);
 596:	80 91 4d 01 	lds	r24, 0x014D
 59a:	90 91 4e 01 	lds	r25, 0x014E
 59e:	85 36       	cpi	r24, 0x65	; 101
 5a0:	91 05       	cpc	r25, r1
 5a2:	10 f0       	brcs	.+4      	; 0x5a8 <__vector_4+0x32>
 5a4:	11 98       	cbi	0x02, 1	; 2
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <__vector_4+0x34>
	else ledOn(1);
 5a8:	11 9a       	sbi	0x02, 1	; 2
}
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <line>:
 */

#ifndef REGLER_H_
#define REGLER_H_

void line() {
 5b8:	af 92       	push	r10
 5ba:	bf 92       	push	r11
 5bc:	cf 92       	push	r12
 5be:	df 92       	push	r13
 5c0:	ef 92       	push	r14
 5c2:	ff 92       	push	r15
	setADC(CNY70_1);
 5c4:	84 e0       	ldi	r24, 0x04	; 4
 5c6:	0e 94 77 02 	call	0x4ee	; 0x4ee <setADC>
 5ca:	f4 e0       	ldi	r31, 0x04	; 4
 5cc:	cf 2e       	mov	r12, r31
 5ce:	d1 2c       	mov	r13, r1
	uint16_t cny1 = 0;
 5d0:	e1 2c       	mov	r14, r1
 5d2:	f1 2c       	mov	r15, r1
	uint16_t cny2 = 0;
	for (int i = 0; i < 4; i++) {
		cny1 += getData();
 5d4:	0e 94 8b 02 	call	0x516	; 0x516 <getData>
 5d8:	e8 0e       	add	r14, r24
 5da:	f9 1e       	adc	r15, r25
 5dc:	21 e0       	ldi	r18, 0x01	; 1
 5de:	c2 1a       	sub	r12, r18
 5e0:	d1 08       	sbc	r13, r1

void line() {
	setADC(CNY70_1);
	uint16_t cny1 = 0;
	uint16_t cny2 = 0;
	for (int i = 0; i < 4; i++) {
 5e2:	c1 f7       	brne	.-16     	; 0x5d4 <line+0x1c>
		cny1 += getData();
	}
	cny1 >>= 2;
 5e4:	57 01       	movw	r10, r14
 5e6:	b6 94       	lsr	r11
 5e8:	a7 94       	ror	r10
 5ea:	b6 94       	lsr	r11
 5ec:	a7 94       	ror	r10
	setADC(CNY70_2);
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	0e 94 77 02 	call	0x4ee	; 0x4ee <setADC>
 5f4:	e4 e0       	ldi	r30, 0x04	; 4
 5f6:	ce 2e       	mov	r12, r30
 5f8:	d1 2c       	mov	r13, r1
#define REGLER_H_

void line() {
	setADC(CNY70_1);
	uint16_t cny1 = 0;
	uint16_t cny2 = 0;
 5fa:	e1 2c       	mov	r14, r1
 5fc:	f1 2c       	mov	r15, r1
		cny1 += getData();
	}
	cny1 >>= 2;
	setADC(CNY70_2);
	for (int i = 0; i < 4; i++) {
		cny2 += getData();
 5fe:	0e 94 8b 02 	call	0x516	; 0x516 <getData>
 602:	e8 0e       	add	r14, r24
 604:	f9 1e       	adc	r15, r25
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	c4 1a       	sub	r12, r20
 60a:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 4; i++) {
		cny1 += getData();
	}
	cny1 >>= 2;
	setADC(CNY70_2);
	for (int i = 0; i < 4; i++) {
 60c:	c1 f7       	brne	.-16     	; 0x5fe <line+0x46>
		cny2 += getData();
	}
	cny2 >>= 2;
 60e:	97 01       	movw	r18, r14
 610:	36 95       	lsr	r19
 612:	27 95       	ror	r18
 614:	36 95       	lsr	r19
 616:	27 95       	ror	r18
 618:	80 91 55 01 	lds	r24, 0x0155
 61c:	90 91 56 01 	lds	r25, 0x0156
	//rechts weiß
	if ((cny1 >= 800) && (cny2 < 800)) {
 620:	40 e2       	ldi	r20, 0x20	; 32
 622:	a4 16       	cp	r10, r20
 624:	43 e0       	ldi	r20, 0x03	; 3
 626:	b4 06       	cpc	r11, r20
 628:	08 f4       	brcc	.+2      	; 0x62c <line+0x74>
 62a:	67 c0       	rjmp	.+206    	; 0x6fa <line+0x142>
 62c:	20 32       	cpi	r18, 0x20	; 32
 62e:	33 40       	sbci	r19, 0x03	; 3
 630:	08 f0       	brcs	.+2      	; 0x634 <line+0x7c>
 632:	67 c0       	rjmp	.+206    	; 0x702 <line+0x14a>
		esum -= 4;
 634:	9c 01       	movw	r18, r24
 636:	24 50       	subi	r18, 0x04	; 4
 638:	31 09       	sbc	r19, r1
 63a:	30 93 56 01 	sts	0x0156, r19
 63e:	20 93 55 01 	sts	0x0155, r18
		//fahre links
		steuer(-80 + esum);
 642:	84 55       	subi	r24, 0x54	; 84
 644:	91 09       	sbc	r25, r1
 646:	0e 94 03 01 	call	0x206	; 0x206 <steuer>
		ledOn(1);
 64a:	11 9a       	sbi	0x02, 1	; 2
		richtung = links;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	6d c0       	rjmp	.+218    	; 0x72a <line+0x172>
	}
	// links weiß
	if ((cny1 < 800) && (cny2 >= 800)) {
		//fahre rechts
		esum += 4;
 650:	9c 01       	movw	r18, r24
 652:	2c 5f       	subi	r18, 0xFC	; 252
 654:	3f 4f       	sbci	r19, 0xFF	; 255
 656:	30 93 56 01 	sts	0x0156, r19
 65a:	20 93 55 01 	sts	0x0155, r18
		steuer(80 + esum);
 65e:	8c 5a       	subi	r24, 0xAC	; 172
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	0e 94 03 01 	call	0x206	; 0x206 <steuer>
		ledOn(0);
 666:	10 9a       	sbi	0x02, 0	; 2
		richtung = rechts;
 668:	10 92 51 01 	sts	0x0151, r1
 66c:	2b c0       	rjmp	.+86     	; 0x6c4 <line+0x10c>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 66e:	88 e5       	ldi	r24, 0x58	; 88
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	90 93 23 01 	sts	0x0123, r25
 676:	80 93 22 01 	sts	0x0122, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 67a:	88 ea       	ldi	r24, 0xA8	; 168
 67c:	9d ef       	ldi	r25, 0xFD	; 253
 67e:	90 93 21 01 	sts	0x0121, r25
 682:	80 93 20 01 	sts	0x0120, r24
	}
	//beide weiß
	if ((cny1 < 800) && (cny2 < 800)) {
		if (richtung == rechts) {
			steuer(600);
			ledOn(0);
 686:	10 9a       	sbi	0x02, 0	; 2
		}
		if (richtung == links) {
 688:	80 91 51 01 	lds	r24, 0x0151
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	69 f4       	brne	.+26     	; 0x6aa <line+0xf2>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 690:	88 ea       	ldi	r24, 0xA8	; 168
 692:	9d ef       	ldi	r25, 0xFD	; 253
 694:	90 93 23 01 	sts	0x0123, r25
 698:	80 93 22 01 	sts	0x0122, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 69c:	88 e5       	ldi	r24, 0x58	; 88
 69e:	92 e0       	ldi	r25, 0x02	; 2
 6a0:	90 93 21 01 	sts	0x0121, r25
 6a4:	80 93 20 01 	sts	0x0120, r24
			steuer(-600);
			ledOn(1);
 6a8:	11 9a       	sbi	0x02, 1	; 2
		}
		esum >>= 4;
 6aa:	80 91 55 01 	lds	r24, 0x0155
 6ae:	90 91 56 01 	lds	r25, 0x0156
 6b2:	54 e0       	ldi	r21, 0x04	; 4
 6b4:	95 95       	asr	r25
 6b6:	87 95       	ror	r24
 6b8:	5a 95       	dec	r21
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <line+0xfc>
 6bc:	90 93 56 01 	sts	0x0156, r25
 6c0:	80 93 55 01 	sts	0x0155, r24

	}

	//Begrenzung I-Anteil
	if (esum < -100) {
 6c4:	80 91 55 01 	lds	r24, 0x0155
 6c8:	90 91 56 01 	lds	r25, 0x0156
 6cc:	8c 39       	cpi	r24, 0x9C	; 156
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	34 f4       	brge	.+12     	; 0x6de <line+0x126>
		esum = -100;
 6d2:	8c e9       	ldi	r24, 0x9C	; 156
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	90 93 56 01 	sts	0x0156, r25
 6da:	80 93 55 01 	sts	0x0155, r24
	}
	if (esum > 100) {
 6de:	80 91 55 01 	lds	r24, 0x0155
 6e2:	90 91 56 01 	lds	r25, 0x0156
 6e6:	85 36       	cpi	r24, 0x65	; 101
 6e8:	91 05       	cpc	r25, r1
 6ea:	3c f1       	brlt	.+78     	; 0x73a <line+0x182>
		esum = 100;
 6ec:	84 e6       	ldi	r24, 0x64	; 100
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	90 93 56 01 	sts	0x0156, r25
 6f4:	80 93 55 01 	sts	0x0155, r24
 6f8:	20 c0       	rjmp	.+64     	; 0x73a <line+0x182>
		steuer(-80 + esum);
		ledOn(1);
		richtung = links;
	}
	// links weiß
	if ((cny1 < 800) && (cny2 >= 800)) {
 6fa:	20 32       	cpi	r18, 0x20	; 32
 6fc:	33 40       	sbci	r19, 0x03	; 3
 6fe:	c0 f0       	brcs	.+48     	; 0x730 <line+0x178>
 700:	a7 cf       	rjmp	.-178    	; 0x650 <line+0x98>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 702:	10 92 23 01 	sts	0x0123, r1
 706:	10 92 22 01 	sts	0x0122, r1
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 70a:	10 92 21 01 	sts	0x0121, r1
 70e:	10 92 20 01 	sts	0x0120, r1
		richtung = rechts;
	}
	//beide schwarz
	if ((cny1 >= 800) && (cny2 >= 800)) {
		steuer(0);
		ledOff(0);
 712:	10 98       	cbi	0x02, 0	; 2
		ledOff(1);
 714:	11 98       	cbi	0x02, 1	; 2
		esum >>= 4;
 716:	44 e0       	ldi	r20, 0x04	; 4
 718:	95 95       	asr	r25
 71a:	87 95       	ror	r24
 71c:	4a 95       	dec	r20
 71e:	e1 f7       	brne	.-8      	; 0x718 <line+0x160>
 720:	90 93 56 01 	sts	0x0156, r25
 724:	80 93 55 01 	sts	0x0155, r24
		richtung = gerade;
 728:	82 e0       	ldi	r24, 0x02	; 2
 72a:	80 93 51 01 	sts	0x0151, r24
 72e:	ca cf       	rjmp	.-108    	; 0x6c4 <line+0x10c>
	}
	//beide weiß
	if ((cny1 < 800) && (cny2 < 800)) {
		if (richtung == rechts) {
 730:	80 91 51 01 	lds	r24, 0x0151
 734:	81 11       	cpse	r24, r1
 736:	a8 cf       	rjmp	.-176    	; 0x688 <line+0xd0>
 738:	9a cf       	rjmp	.-204    	; 0x66e <line+0xb6>
		esum = -100;
	}
	if (esum > 100) {
		esum = 100;
	}
}
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	df 90       	pop	r13
 740:	cf 90       	pop	r12
 742:	bf 90       	pop	r11
 744:	af 90       	pop	r10
 746:	08 95       	ret

00000748 <dist>:

void dist() {
 748:	8f 92       	push	r8
 74a:	9f 92       	push	r9
 74c:	af 92       	push	r10
 74e:	bf 92       	push	r11
 750:	cf 92       	push	r12
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	0e 94 77 02 	call	0x4ee	; 0x4ee <setADC>
 75e:	38 e0       	ldi	r19, 0x08	; 8
 760:	c3 2e       	mov	r12, r19
 762:	d1 2c       	mov	r13, r1
		esum = 100;
	}
}

void dist() {
	uint16_t dds1 = 0;
 764:	e1 2c       	mov	r14, r1
 766:	f1 2c       	mov	r15, r1
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
	for (int i = 0; i < 8; i++) {
		dds1 += getData();
 768:	0e 94 8b 02 	call	0x516	; 0x516 <getData>
 76c:	e8 0e       	add	r14, r24
 76e:	f9 1e       	adc	r15, r25
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	c8 1a       	sub	r12, r24
 774:	d1 08       	sbc	r13, r1
void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
	setADC(ds1);
	for (int i = 0; i < 8; i++) {
 776:	c1 f7       	brne	.-16     	; 0x768 <dist+0x20>
		dds1 += getData();
	}
	dds1 >>= 3;
 778:	57 01       	movw	r10, r14
 77a:	93 e0       	ldi	r25, 0x03	; 3
 77c:	b6 94       	lsr	r11
 77e:	a7 94       	ror	r10
 780:	9a 95       	dec	r25
 782:	e1 f7       	brne	.-8      	; 0x77c <dist+0x34>
	setADC(ds2);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 77 02 	call	0x4ee	; 0x4ee <setADC>
 78a:	28 e0       	ldi	r18, 0x08	; 8
 78c:	c2 2e       	mov	r12, r18
 78e:	d1 2c       	mov	r13, r1
	}
}

void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
 790:	e1 2c       	mov	r14, r1
 792:	f1 2c       	mov	r15, r1
		dds1 += getData();
	}
	dds1 >>= 3;
	setADC(ds2);
	for (int i = 0; i < 8; i++) {
		dds2 += getData();
 794:	0e 94 8b 02 	call	0x516	; 0x516 <getData>
 798:	e8 0e       	add	r14, r24
 79a:	f9 1e       	adc	r15, r25
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	c8 1a       	sub	r12, r24
 7a0:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 8; i++) {
		dds1 += getData();
	}
	dds1 >>= 3;
	setADC(ds2);
	for (int i = 0; i < 8; i++) {
 7a2:	c1 f7       	brne	.-16     	; 0x794 <dist+0x4c>
		dds2 += getData();
	}
	dds2 >>= 3;
 7a4:	47 01       	movw	r8, r14
 7a6:	b3 e0       	ldi	r27, 0x03	; 3
 7a8:	96 94       	lsr	r9
 7aa:	87 94       	ror	r8
 7ac:	ba 95       	dec	r27
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <dist+0x60>
	setADC(ds3);
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	0e 94 77 02 	call	0x4ee	; 0x4ee <setADC>
 7b6:	88 e0       	ldi	r24, 0x08	; 8
 7b8:	c8 2e       	mov	r12, r24
 7ba:	d1 2c       	mov	r13, r1
}

void dist() {
	uint16_t dds1 = 0;
	uint16_t dds2 = 0;
	uint16_t dds3 = 0;
 7bc:	e1 2c       	mov	r14, r1
 7be:	f1 2c       	mov	r15, r1
		dds2 += getData();
	}
	dds2 >>= 3;
	setADC(ds3);
	for (int i = 0; i < 8; i++) {
		dds3 += getData();
 7c0:	0e 94 8b 02 	call	0x516	; 0x516 <getData>
 7c4:	e8 0e       	add	r14, r24
 7c6:	f9 1e       	adc	r15, r25
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	c8 1a       	sub	r12, r24
 7cc:	d1 08       	sbc	r13, r1
	for (int i = 0; i < 8; i++) {
		dds2 += getData();
	}
	dds2 >>= 3;
	setADC(ds3);
	for (int i = 0; i < 8; i++) {
 7ce:	c1 f7       	brne	.-16     	; 0x7c0 <dist+0x78>
		dds3 += getData();
	}
	dds3 >>= 3;
 7d0:	a3 e0       	ldi	r26, 0x03	; 3
 7d2:	f6 94       	lsr	r15
 7d4:	e7 94       	ror	r14
 7d6:	aa 95       	dec	r26
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <dist+0x8a>
	if (dds2 > 200) {
 7da:	89 ec       	ldi	r24, 0xC9	; 201
 7dc:	88 16       	cp	r8, r24
 7de:	91 04       	cpc	r9, r1
 7e0:	d0 f0       	brcs	.+52     	; 0x816 <dist+0xce>
		if (dds1 > 200)
 7e2:	89 ec       	ldi	r24, 0xC9	; 201
 7e4:	a8 16       	cp	r10, r24
 7e6:	b1 04       	cpc	r11, r1
 7e8:	48 f0       	brcs	.+18     	; 0x7fc <dist+0xb4>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 7ea:	88 ea       	ldi	r24, 0xA8	; 168
 7ec:	9d ef       	ldi	r25, 0xFD	; 253
 7ee:	90 93 23 01 	sts	0x0123, r25
 7f2:	80 93 22 01 	sts	0x0122, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 7f6:	88 e5       	ldi	r24, 0x58	; 88
 7f8:	92 e0       	ldi	r25, 0x02	; 2
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <dist+0xc4>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 7fc:	88 e5       	ldi	r24, 0x58	; 88
 7fe:	92 e0       	ldi	r25, 0x02	; 2
 800:	90 93 23 01 	sts	0x0123, r25
 804:	80 93 22 01 	sts	0x0122, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 808:	88 ea       	ldi	r24, 0xA8	; 168
 80a:	9d ef       	ldi	r25, 0xFD	; 253
 80c:	90 93 21 01 	sts	0x0121, r25
 810:	80 93 20 01 	sts	0x0120, r24
 814:	0c c0       	rjmp	.+24     	; 0x82e <dist+0xe6>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 816:	10 92 23 01 	sts	0x0123, r1
 81a:	10 92 22 01 	sts	0x0122, r1
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 81e:	10 92 21 01 	sts	0x0121, r1
 822:	10 92 20 01 	sts	0x0120, r1
		else
			steuer(600);

	} else
		steuer(0);
	if (dds1 > 200)
 826:	89 ec       	ldi	r24, 0xC9	; 201
 828:	a8 16       	cp	r10, r24
 82a:	b1 04       	cpc	r11, r1
 82c:	f0 f6       	brcc	.-68     	; 0x7ea <dist+0xa2>
		steuer(-600);
	if (dds3 > 200)
 82e:	89 ec       	ldi	r24, 0xC9	; 201
 830:	e8 16       	cp	r14, r24
 832:	f1 04       	cpc	r15, r1
 834:	60 f0       	brcs	.+24     	; 0x84e <dist+0x106>
	if (Motor_2_adjSpeed < -255)
		Motor_2_adjSpeed = -255;

}
void setMotorSpeed_1(int16_t speed) {
	Motor_1_adjSpeed = speed;
 836:	88 e5       	ldi	r24, 0x58	; 88
 838:	92 e0       	ldi	r25, 0x02	; 2
 83a:	90 93 23 01 	sts	0x0123, r25
 83e:	80 93 22 01 	sts	0x0122, r24
}
void setMotorSpeed_2(int16_t speed) {
	Motor_2_adjSpeed = speed;
 842:	88 ea       	ldi	r24, 0xA8	; 168
 844:	9d ef       	ldi	r25, 0xFD	; 253
 846:	90 93 21 01 	sts	0x0121, r25
 84a:	80 93 20 01 	sts	0x0120, r24
		steuer(600);

}
 84e:	ff 90       	pop	r15
 850:	ef 90       	pop	r14
 852:	df 90       	pop	r13
 854:	cf 90       	pop	r12
 856:	bf 90       	pop	r11
 858:	af 90       	pop	r10
 85a:	9f 90       	pop	r9
 85c:	8f 90       	pop	r8
 85e:	08 95       	ret

00000860 <strecke>:

void strecke(uint16_t s){
 860:	ef 92       	push	r14
 862:	ff 92       	push	r15
	int el=s-tickslinks;
 864:	20 91 4f 01 	lds	r18, 0x014F
 868:	30 91 50 01 	lds	r19, 0x0150
 86c:	bc 01       	movw	r22, r24
 86e:	62 1b       	sub	r22, r18
 870:	73 0b       	sbc	r23, r19
	int er=s-ticksrechts;
 872:	20 91 4d 01 	lds	r18, 0x014D
 876:	30 91 4e 01 	lds	r19, 0x014E
 87a:	7c 01       	movw	r14, r24
 87c:	e2 1a       	sub	r14, r18
 87e:	f3 0a       	sbc	r15, r19
	esuml+=el;
 880:	80 91 52 01 	lds	r24, 0x0152
 884:	90 91 53 01 	lds	r25, 0x0153
 888:	86 0f       	add	r24, r22
 88a:	97 1f       	adc	r25, r23
 88c:	90 93 53 01 	sts	0x0153, r25
 890:	80 93 52 01 	sts	0x0152, r24
	esumr+=er;
 894:	40 91 57 01 	lds	r20, 0x0157
 898:	50 91 58 01 	lds	r21, 0x0158
 89c:	4e 0d       	add	r20, r14
 89e:	5f 1d       	adc	r21, r15
 8a0:	50 93 58 01 	sts	0x0158, r21
 8a4:	40 93 57 01 	sts	0x0157, r20
	setMotorBaseSpeed_1(el+esuml);
 8a8:	86 0f       	add	r24, r22
 8aa:	97 1f       	adc	r25, r23
 8ac:	0e 94 24 01 	call	0x248	; 0x248 <setMotorBaseSpeed_1>
	setMotorBaseSpeed_2(er-esuml);
 8b0:	80 91 52 01 	lds	r24, 0x0152
 8b4:	90 91 53 01 	lds	r25, 0x0153
 8b8:	97 01       	movw	r18, r14
 8ba:	28 1b       	sub	r18, r24
 8bc:	39 0b       	sbc	r19, r25
 8be:	c9 01       	movw	r24, r18
 8c0:	0e 94 37 01 	call	0x26e	; 0x26e <setMotorBaseSpeed_2>
	if (esuml < -200) {
 8c4:	80 91 52 01 	lds	r24, 0x0152
 8c8:	90 91 53 01 	lds	r25, 0x0153
 8cc:	88 33       	cpi	r24, 0x38	; 56
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	34 f4       	brge	.+12     	; 0x8de <strecke+0x7e>
		esuml = -200;
 8d2:	88 e3       	ldi	r24, 0x38	; 56
 8d4:	9f ef       	ldi	r25, 0xFF	; 255
 8d6:	90 93 53 01 	sts	0x0153, r25
 8da:	80 93 52 01 	sts	0x0152, r24
	}
	if (esuml > 200) {
 8de:	80 91 52 01 	lds	r24, 0x0152
 8e2:	90 91 53 01 	lds	r25, 0x0153
 8e6:	89 3c       	cpi	r24, 0xC9	; 201
 8e8:	91 05       	cpc	r25, r1
 8ea:	34 f0       	brlt	.+12     	; 0x8f8 <strecke+0x98>
		esuml = 200;
 8ec:	88 ec       	ldi	r24, 0xC8	; 200
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	90 93 53 01 	sts	0x0153, r25
 8f4:	80 93 52 01 	sts	0x0152, r24
	}
	if (esumr < -200) {
 8f8:	80 91 57 01 	lds	r24, 0x0157
 8fc:	90 91 58 01 	lds	r25, 0x0158
 900:	88 33       	cpi	r24, 0x38	; 56
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	34 f4       	brge	.+12     	; 0x912 <strecke+0xb2>
		esumr = -200;
 906:	88 e3       	ldi	r24, 0x38	; 56
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	90 93 58 01 	sts	0x0158, r25
 90e:	80 93 57 01 	sts	0x0157, r24
	}
	if (esumr > 200) {
 912:	80 91 57 01 	lds	r24, 0x0157
 916:	90 91 58 01 	lds	r25, 0x0158
 91a:	89 3c       	cpi	r24, 0xC9	; 201
 91c:	91 05       	cpc	r25, r1
 91e:	34 f0       	brlt	.+12     	; 0x92c <strecke+0xcc>
		esumr = 200;
 920:	88 ec       	ldi	r24, 0xC8	; 200
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	90 93 58 01 	sts	0x0158, r25
 928:	80 93 57 01 	sts	0x0157, r24
	}
}
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	08 95       	ret

00000932 <blink>:
 *
 *  Created on: 24.05.2012
 *      Author: time
 */
void blink(int8_t x) {
	ledOff(0);
 932:	10 98       	cbi	0x02, 0	; 2
	ledOff(1);
 934:	11 98       	cbi	0x02, 1	; 2
	ledOff(2);
 936:	12 98       	cbi	0x02, 2	; 2
	ledOff(3);
 938:	13 98       	cbi	0x02, 3	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 93a:	2f ef       	ldi	r18, 0xFF	; 255
 93c:	33 ec       	ldi	r19, 0xC3	; 195
 93e:	49 e0       	ldi	r20, 0x09	; 9
 940:	21 50       	subi	r18, 0x01	; 1
 942:	30 40       	sbci	r19, 0x00	; 0
 944:	40 40       	sbci	r20, 0x00	; 0
 946:	e1 f7       	brne	.-8      	; 0x940 <blink+0xe>
 948:	00 c0       	rjmp	.+0      	; 0x94a <blink+0x18>
 94a:	00 00       	nop
	_delay_ms(200);
	for (int i = 0; i < x; i++) {
 94c:	20 e0       	ldi	r18, 0x00	; 0
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	99 27       	eor	r25, r25
 952:	87 fd       	sbrc	r24, 7
 954:	90 95       	com	r25
 956:	1c c0       	rjmp	.+56     	; 0x990 <blink+0x5e>
		ledOn(0);
 958:	10 9a       	sbi	0x02, 0	; 2
		ledOn(1);
 95a:	11 9a       	sbi	0x02, 1	; 2
		ledOn(2);
 95c:	12 9a       	sbi	0x02, 2	; 2
		ledOn(3);
 95e:	13 9a       	sbi	0x02, 3	; 2
 960:	5f ef       	ldi	r21, 0xFF	; 255
 962:	63 ec       	ldi	r22, 0xC3	; 195
 964:	49 e0       	ldi	r20, 0x09	; 9
 966:	51 50       	subi	r21, 0x01	; 1
 968:	60 40       	sbci	r22, 0x00	; 0
 96a:	40 40       	sbci	r20, 0x00	; 0
 96c:	e1 f7       	brne	.-8      	; 0x966 <blink+0x34>
 96e:	00 c0       	rjmp	.+0      	; 0x970 <blink+0x3e>
 970:	00 00       	nop
		_delay_ms(200);
		ledOff(0);
 972:	10 98       	cbi	0x02, 0	; 2
		ledOff(1);
 974:	11 98       	cbi	0x02, 1	; 2
		ledOff(2);
 976:	12 98       	cbi	0x02, 2	; 2
		ledOff(3);
 978:	13 98       	cbi	0x02, 3	; 2
 97a:	5f ef       	ldi	r21, 0xFF	; 255
 97c:	63 ec       	ldi	r22, 0xC3	; 195
 97e:	49 e0       	ldi	r20, 0x09	; 9
 980:	51 50       	subi	r21, 0x01	; 1
 982:	60 40       	sbci	r22, 0x00	; 0
 984:	40 40       	sbci	r20, 0x00	; 0
 986:	e1 f7       	brne	.-8      	; 0x980 <blink+0x4e>
 988:	00 c0       	rjmp	.+0      	; 0x98a <blink+0x58>
 98a:	00 00       	nop
	ledOff(0);
	ledOff(1);
	ledOff(2);
	ledOff(3);
	_delay_ms(200);
	for (int i = 0; i < x; i++) {
 98c:	2f 5f       	subi	r18, 0xFF	; 255
 98e:	3f 4f       	sbci	r19, 0xFF	; 255
 990:	28 17       	cp	r18, r24
 992:	39 07       	cpc	r19, r25
 994:	0c f3       	brlt	.-62     	; 0x958 <blink+0x26>
		ledOff(2);
		ledOff(3);
		_delay_ms(200);
	}

}
 996:	08 95       	ret

00000998 <display>:

void display(int16_t number) {
 998:	ef 92       	push	r14
 99a:	ff 92       	push	r15
 99c:	7c 01       	movw	r14, r24
	blink(1);
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	0e 94 99 04 	call	0x932	; 0x932 <blink>
	ledOff(0);
 9a4:	10 98       	cbi	0x02, 0	; 2
	ledOff(1);
 9a6:	11 98       	cbi	0x02, 1	; 2
	ledOff(2);
 9a8:	12 98       	cbi	0x02, 2	; 2
	ledOff(3);
 9aa:	13 98       	cbi	0x02, 3	; 2
	if (number & (1 << 0)) {
 9ac:	e0 fc       	sbrc	r14, 0
		ledOn(0);
 9ae:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 1)) {
 9b0:	e1 fc       	sbrc	r14, 1
		ledOn(1);
 9b2:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 2)) {
 9b4:	e2 fc       	sbrc	r14, 2
		ledOn(2);
 9b6:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 3)) {
 9b8:	e3 fc       	sbrc	r14, 3
		ledOn(3);
 9ba:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	0e 94 1e 02 	call	0x43c	; 0x43c <pushButton>
 9c2:	88 23       	and	r24, r24
 9c4:	d9 f3       	breq	.-10     	; 0x9bc <display+0x24>
			break;
	}
	blink(2);
 9c6:	82 e0       	ldi	r24, 0x02	; 2
 9c8:	0e 94 99 04 	call	0x932	; 0x932 <blink>
	if (number & (1 << 4)) {
 9cc:	e4 fc       	sbrc	r14, 4
		ledOn(0);
 9ce:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 5)) {
 9d0:	e5 fc       	sbrc	r14, 5
		ledOn(1);
 9d2:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 6)) {
 9d4:	e6 fc       	sbrc	r14, 6
		ledOn(2);
 9d6:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 7)) {
 9d8:	e7 fc       	sbrc	r14, 7
		ledOn(3);
 9da:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	0e 94 1e 02 	call	0x43c	; 0x43c <pushButton>
 9e2:	88 23       	and	r24, r24
 9e4:	d9 f3       	breq	.-10     	; 0x9dc <display+0x44>
			break;
	}
	blink(3);
 9e6:	83 e0       	ldi	r24, 0x03	; 3
 9e8:	0e 94 99 04 	call	0x932	; 0x932 <blink>
	if (number & (1 << 8)) {
 9ec:	f0 fc       	sbrc	r15, 0
		ledOn(0);
 9ee:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 9)) {
 9f0:	f1 fc       	sbrc	r15, 1
		ledOn(1);
 9f2:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 10)) {
 9f4:	f2 fc       	sbrc	r15, 2
		ledOn(2);
 9f6:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 11)) {
 9f8:	f3 fc       	sbrc	r15, 3
		ledOn(3);
 9fa:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	0e 94 1e 02 	call	0x43c	; 0x43c <pushButton>
 a02:	88 23       	and	r24, r24
 a04:	d9 f3       	breq	.-10     	; 0x9fc <display+0x64>
			break;
	}
	blink(4);
 a06:	84 e0       	ldi	r24, 0x04	; 4
 a08:	0e 94 99 04 	call	0x932	; 0x932 <blink>
	if (number & (1 << 12)) {
 a0c:	f4 fc       	sbrc	r15, 4
		ledOn(0);
 a0e:	10 9a       	sbi	0x02, 0	; 2
	}
	if (number & (1 << 13)) {
 a10:	f5 fc       	sbrc	r15, 5
		ledOn(1);
 a12:	11 9a       	sbi	0x02, 1	; 2
	}
	if (number & (1 << 14)) {
 a14:	f6 fc       	sbrc	r15, 6
		ledOn(2);
 a16:	12 9a       	sbi	0x02, 2	; 2
	}
	if (number & (1 << 15)) {
 a18:	f7 fc       	sbrc	r15, 7
		ledOn(3);
 a1a:	13 9a       	sbi	0x02, 3	; 2
	}
	while (1) {
		if (pushButton(0))
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	0e 94 1e 02 	call	0x43c	; 0x43c <pushButton>
 a22:	88 23       	and	r24, r24
 a24:	d9 f3       	breq	.-10     	; 0xa1c <display+0x84>
			break;
	}

}
 a26:	ff 90       	pop	r15
 a28:	ef 90       	pop	r14
 a2a:	08 95       	ret

00000a2c <bar>:

void bar(int8_t channel){
 a2c:	cf 92       	push	r12
 a2e:	df 92       	push	r13
 a30:	ef 92       	push	r14
 a32:	ff 92       	push	r15
	setADC(channel);
 a34:	0e 94 77 02 	call	0x4ee	; 0x4ee <setADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a38:	83 ef       	ldi	r24, 0xF3	; 243
 a3a:	91 e0       	ldi	r25, 0x01	; 1
 a3c:	01 97       	sbiw	r24, 0x01	; 1
 a3e:	f1 f7       	brne	.-4      	; 0xa3c <bar+0x10>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <bar+0x16>
 a42:	00 00       	nop
 a44:	58 e0       	ldi	r21, 0x08	; 8
 a46:	c5 2e       	mov	r12, r21
 a48:	d1 2c       	mov	r13, r1
	int16_t data=0;
 a4a:	e1 2c       	mov	r14, r1
 a4c:	f1 2c       	mov	r15, r1
	_delay_us(125);
	for (int i = 0; i < 8; i++) {
			data += getData();
 a4e:	0e 94 8b 02 	call	0x516	; 0x516 <getData>
 a52:	e8 0e       	add	r14, r24
 a54:	f9 1e       	adc	r15, r25
 a56:	91 e0       	ldi	r25, 0x01	; 1
 a58:	c9 1a       	sub	r12, r25
 a5a:	d1 08       	sbc	r13, r1

void bar(int8_t channel){
	setADC(channel);
	int16_t data=0;
	_delay_us(125);
	for (int i = 0; i < 8; i++) {
 a5c:	c1 f7       	brne	.-16     	; 0xa4e <bar+0x22>
			data += getData();
		}
		data >>= 3;
 a5e:	c7 01       	movw	r24, r14
 a60:	43 e0       	ldi	r20, 0x03	; 3
 a62:	95 95       	asr	r25
 a64:	87 95       	ror	r24
 a66:	4a 95       	dec	r20
 a68:	e1 f7       	brne	.-8      	; 0xa62 <bar+0x36>
	if (data < 100) {
 a6a:	84 36       	cpi	r24, 0x64	; 100
 a6c:	91 05       	cpc	r25, r1
 a6e:	24 f4       	brge	.+8      	; 0xa78 <bar+0x4c>
				ledOff(0);
 a70:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 a72:	11 98       	cbi	0x02, 1	; 2
				ledOff(2);
 a74:	12 98       	cbi	0x02, 2	; 2
				ledOff(3);
 a76:	13 98       	cbi	0x02, 3	; 2
			}
			if (data < 300 && data >= 100) {
 a78:	9c 01       	movw	r18, r24
 a7a:	24 56       	subi	r18, 0x64	; 100
 a7c:	31 09       	sbc	r19, r1
 a7e:	28 3c       	cpi	r18, 0xC8	; 200
 a80:	31 05       	cpc	r19, r1
 a82:	20 f4       	brcc	.+8      	; 0xa8c <bar+0x60>
				ledOff(0);
 a84:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 a86:	11 98       	cbi	0x02, 1	; 2
				ledOff(2);
 a88:	12 98       	cbi	0x02, 2	; 2
				ledOn(3);
 a8a:	13 9a       	sbi	0x02, 3	; 2
			}
			if (data < 500 && data >= 300) {
 a8c:	9c 01       	movw	r18, r24
 a8e:	2c 52       	subi	r18, 0x2C	; 44
 a90:	31 40       	sbci	r19, 0x01	; 1
 a92:	28 3c       	cpi	r18, 0xC8	; 200
 a94:	31 05       	cpc	r19, r1
 a96:	20 f4       	brcc	.+8      	; 0xaa0 <bar+0x74>
				ledOff(0);
 a98:	10 98       	cbi	0x02, 0	; 2
				ledOff(1);
 a9a:	11 98       	cbi	0x02, 1	; 2
				ledOn(2);
 a9c:	12 9a       	sbi	0x02, 2	; 2
				ledOn(3);
 a9e:	13 9a       	sbi	0x02, 3	; 2
			}
			if (data < 800 && data >= 500) {
 aa0:	9c 01       	movw	r18, r24
 aa2:	24 5f       	subi	r18, 0xF4	; 244
 aa4:	31 40       	sbci	r19, 0x01	; 1
 aa6:	2c 32       	cpi	r18, 0x2C	; 44
 aa8:	31 40       	sbci	r19, 0x01	; 1
 aaa:	10 f4       	brcc	.+4      	; 0xab0 <bar+0x84>
				ledOff(0);
 aac:	10 98       	cbi	0x02, 0	; 2
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <bar+0x8c>
				ledOn(1);
				ledOn(2);
				ledOn(3);
			}
			if (data >= 800) {
 ab0:	80 32       	cpi	r24, 0x20	; 32
 ab2:	93 40       	sbci	r25, 0x03	; 3
 ab4:	24 f0       	brlt	.+8      	; 0xabe <bar+0x92>
				ledOn(0);
 ab6:	10 9a       	sbi	0x02, 0	; 2
				ledOn(1);
 ab8:	11 9a       	sbi	0x02, 1	; 2
				ledOn(2);
 aba:	12 9a       	sbi	0x02, 2	; 2
				ledOn(3);
 abc:	13 9a       	sbi	0x02, 3	; 2
			}
}
 abe:	ff 90       	pop	r15
 ac0:	ef 90       	pop	r14
 ac2:	df 90       	pop	r13
 ac4:	cf 90       	pop	r12
 ac6:	08 95       	ret

00000ac8 <USART0_Transmit>:
 *      Author: time
 */

void USART0_Transmit(unsigned char data) {

	while (!(UCSR0A & (1 << UDRE0)))
 ac8:	90 91 c0 00 	lds	r25, 0x00C0
 acc:	95 ff       	sbrs	r25, 5
 ace:	fc cf       	rjmp	.-8      	; 0xac8 <USART0_Transmit>
		; // Wait for empty transmit buffer

	UDR0 = data; // Put data into buffer, sends the data
 ad0:	80 93 c6 00 	sts	0x00C6, r24
 ad4:	08 95       	ret

00000ad6 <USART0_Receive>:
}

unsigned char USART0_Receive(void) {

	while (!(UCSR0A & (1 << RXC0)))
 ad6:	80 91 c0 00 	lds	r24, 0x00C0
 ada:	87 ff       	sbrs	r24, 7
 adc:	fc cf       	rjmp	.-8      	; 0xad6 <USART0_Receive>
		; // Wait for data to be received

	return UDR0; // Get and return received data from buffer
 ade:	80 91 c6 00 	lds	r24, 0x00C6
}
 ae2:	08 95       	ret

00000ae4 <uart_puts>:

void uart_puts(char *s) {
 ae4:	ef 92       	push	r14
 ae6:	ff 92       	push	r15
 ae8:	7c 01       	movw	r14, r24
	while (*s) { /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <uart_puts+0xc>
		USART0_Transmit(*s);
 aec:	0e 94 64 05 	call	0xac8	; 0xac8 <USART0_Transmit>

	return UDR0; // Get and return received data from buffer
}

void uart_puts(char *s) {
	while (*s) { /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
 af0:	f7 01       	movw	r30, r14
 af2:	81 91       	ld	r24, Z+
 af4:	7f 01       	movw	r14, r30
 af6:	81 11       	cpse	r24, r1
 af8:	f9 cf       	rjmp	.-14     	; 0xaec <uart_puts+0x8>
		USART0_Transmit(*s);
		s++;
	}
}
 afa:	ff 90       	pop	r15
 afc:	ef 90       	pop	r14
 afe:	08 95       	ret

00000b00 <handle_command>:

void handle_command(char com[]) {
 b00:	af 92       	push	r10
 b02:	bf 92       	push	r11
 b04:	cf 92       	push	r12
 b06:	df 92       	push	r13
 b08:	ef 92       	push	r14
 b0a:	ff 92       	push	r15
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
 b14:	63 97       	sbiw	r28, 0x13	; 19
 b16:	0f b6       	in	r0, 0x3f	; 63
 b18:	f8 94       	cli
 b1a:	de bf       	out	0x3e, r29	; 62
 b1c:	0f be       	out	0x3f, r0	; 63
 b1e:	cd bf       	out	0x3d, r28	; 61
 b20:	7c 01       	movw	r14, r24
	if (com[0] == 'b') { //Version Handler
 b22:	fc 01       	movw	r30, r24
 b24:	80 81       	ld	r24, Z
 b26:	82 36       	cpi	r24, 0x62	; 98
 b28:	21 f4       	brne	.+8      	; 0xb32 <handle_command+0x32>
		uart_puts("Robby serial Interface");
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	91 e0       	ldi	r25, 0x01	; 1
 b2e:	0e 94 72 05 	call	0xae4	; 0xae4 <uart_puts>
	}
	if (com[0] == 'D') {
 b32:	f7 01       	movw	r30, r14
 b34:	80 81       	ld	r24, Z
 b36:	84 34       	cpi	r24, 0x44	; 68
 b38:	09 f0       	breq	.+2      	; 0xb3c <handle_command+0x3c>
 b3a:	42 c0       	rjmp	.+132    	; 0xbc0 <handle_command+0xc0>
		if (!com[1]) {
 b3c:	81 81       	ldd	r24, Z+1	; 0x01
 b3e:	88 23       	and	r24, r24
 b40:	09 f4       	brne	.+2      	; 0xb44 <handle_command+0x44>
 b42:	79 c0       	rjmp	.+242    	; 0xc36 <handle_command+0x136>
		USART0_Transmit(*s);
		s++;
	}
}

void handle_command(char com[]) {
 b44:	d7 01       	movw	r26, r14
 b46:	12 96       	adiw	r26, 0x02	; 2
 b48:	a1 2c       	mov	r10, r1
 b4a:	b1 2c       	mov	r11, r1
			uart_puts("error");
			return;
		}
		int l = 0, r = 0, i = 2;
		while (com[i] >= '0' && com[i] <= '9') {
			l *= 10;
 b4c:	2a e0       	ldi	r18, 0x0A	; 10
 b4e:	0a c0       	rjmp	.+20     	; 0xb64 <handle_command+0x64>
 b50:	a5 01       	movw	r20, r10
 b52:	24 9f       	mul	r18, r20
 b54:	50 01       	movw	r10, r0
 b56:	25 9f       	mul	r18, r21
 b58:	b0 0c       	add	r11, r0
 b5a:	11 24       	eor	r1, r1
			l += (com[i] - '0');
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	c0 97       	sbiw	r24, 0x30	; 48
 b60:	a8 0e       	add	r10, r24
 b62:	b9 1e       	adc	r11, r25
		USART0_Transmit(*s);
		s++;
	}
}

void handle_command(char com[]) {
 b64:	fd 01       	movw	r30, r26
 b66:	ee 19       	sub	r30, r14
 b68:	ff 09       	sbc	r31, r15
		if (!com[1]) {
			uart_puts("error");
			return;
		}
		int l = 0, r = 0, i = 2;
		while (com[i] >= '0' && com[i] <= '9') {
 b6a:	8d 91       	ld	r24, X+
 b6c:	98 2f       	mov	r25, r24
 b6e:	90 53       	subi	r25, 0x30	; 48
 b70:	9a 30       	cpi	r25, 0x0A	; 10
 b72:	70 f3       	brcs	.-36     	; 0xb50 <handle_command+0x50>
			l *= 10;
			l += (com[i] - '0');
			i++;
		}
		i++;
 b74:	31 96       	adiw	r30, 0x01	; 1
		USART0_Transmit(*s);
		s++;
	}
}

void handle_command(char com[]) {
 b76:	ee 0d       	add	r30, r14
 b78:	ff 1d       	adc	r31, r15
	if (com[0] == 'D') {
		if (!com[1]) {
			uart_puts("error");
			return;
		}
		int l = 0, r = 0, i = 2;
 b7a:	c1 2c       	mov	r12, r1
 b7c:	d1 2c       	mov	r13, r1
			l += (com[i] - '0');
			i++;
		}
		i++;
		while (com[i] >= '0' && com[i] <= '9') {
			r *= 10;
 b7e:	2a e0       	ldi	r18, 0x0A	; 10
			l *= 10;
			l += (com[i] - '0');
			i++;
		}
		i++;
		while (com[i] >= '0' && com[i] <= '9') {
 b80:	0a c0       	rjmp	.+20     	; 0xb96 <handle_command+0x96>
			r *= 10;
 b82:	a6 01       	movw	r20, r12
 b84:	24 9f       	mul	r18, r20
 b86:	60 01       	movw	r12, r0
 b88:	25 9f       	mul	r18, r21
 b8a:	d0 0c       	add	r13, r0
 b8c:	11 24       	eor	r1, r1
			r += (com[i] - '0');
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	c0 97       	sbiw	r24, 0x30	; 48
 b92:	c8 0e       	add	r12, r24
 b94:	d9 1e       	adc	r13, r25
			l *= 10;
			l += (com[i] - '0');
			i++;
		}
		i++;
		while (com[i] >= '0' && com[i] <= '9') {
 b96:	81 91       	ld	r24, Z+
 b98:	98 2f       	mov	r25, r24
 b9a:	90 53       	subi	r25, 0x30	; 48
 b9c:	9a 30       	cpi	r25, 0x0A	; 10
 b9e:	88 f3       	brcs	.-30     	; 0xb82 <handle_command+0x82>
			r *= 10;
			r += (com[i] - '0');
			i++;
		}
		char s[8];
		uart_puts(itoa(r, s, 10));
 ba0:	4a e0       	ldi	r20, 0x0A	; 10
 ba2:	50 e0       	ldi	r21, 0x00	; 0
 ba4:	be 01       	movw	r22, r28
 ba6:	6f 5f       	subi	r22, 0xFF	; 255
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	c6 01       	movw	r24, r12
 bac:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <itoa>
 bb0:	0e 94 72 05 	call	0xae4	; 0xae4 <uart_puts>
		setMotorBaseSpeed_1(l);
 bb4:	c5 01       	movw	r24, r10
 bb6:	0e 94 24 01 	call	0x248	; 0x248 <setMotorBaseSpeed_1>
		setMotorBaseSpeed_2(r);
 bba:	c6 01       	movw	r24, r12
 bbc:	0e 94 37 01 	call	0x26e	; 0x26e <setMotorBaseSpeed_2>
	}

	if (com[0] == 'E') {
 bc0:	f7 01       	movw	r30, r14
 bc2:	80 81       	ld	r24, Z
 bc4:	85 34       	cpi	r24, 0x45	; 69
 bc6:	81 f5       	brne	.+96     	; 0xc28 <handle_command+0x128>
		char sr[8];
		char sl[8];
		char dest[] = "e,";
 bc8:	25 e6       	ldi	r18, 0x65	; 101
 bca:	3c e2       	ldi	r19, 0x2C	; 44
 bcc:	40 e0       	ldi	r20, 0x00	; 0
 bce:	29 8b       	std	Y+17, r18	; 0x11
 bd0:	3a 8b       	std	Y+18, r19	; 0x12
 bd2:	4b 8b       	std	Y+19, r20	; 0x13
		strcat(dest, itoa(Motor_1_Speed, sr, 10));
 bd4:	4a e0       	ldi	r20, 0x0A	; 10
 bd6:	50 e0       	ldi	r21, 0x00	; 0
 bd8:	be 01       	movw	r22, r28
 bda:	67 5f       	subi	r22, 0xF7	; 247
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	80 91 2a 01 	lds	r24, 0x012A
 be2:	90 91 2b 01 	lds	r25, 0x012B
 be6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <itoa>
 bea:	bc 01       	movw	r22, r24
 bec:	ce 01       	movw	r24, r28
 bee:	41 96       	adiw	r24, 0x11	; 17
 bf0:	0e 94 ed 06 	call	0xdda	; 0xdda <strcat>
		strcat(dest, ",");
 bf4:	6d e1       	ldi	r22, 0x1D	; 29
 bf6:	71 e0       	ldi	r23, 0x01	; 1
 bf8:	ce 01       	movw	r24, r28
 bfa:	41 96       	adiw	r24, 0x11	; 17
 bfc:	0e 94 ed 06 	call	0xdda	; 0xdda <strcat>
		strcat(dest, itoa(Motor_2_Speed, sl, 10));
 c00:	4a e0       	ldi	r20, 0x0A	; 10
 c02:	50 e0       	ldi	r21, 0x00	; 0
 c04:	be 01       	movw	r22, r28
 c06:	6f 5f       	subi	r22, 0xFF	; 255
 c08:	7f 4f       	sbci	r23, 0xFF	; 255
 c0a:	80 91 28 01 	lds	r24, 0x0128
 c0e:	90 91 29 01 	lds	r25, 0x0129
 c12:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <itoa>
 c16:	bc 01       	movw	r22, r24
 c18:	ce 01       	movw	r24, r28
 c1a:	41 96       	adiw	r24, 0x11	; 17
 c1c:	0e 94 ed 06 	call	0xdda	; 0xdda <strcat>
		uart_puts(dest);
 c20:	ce 01       	movw	r24, r28
 c22:	41 96       	adiw	r24, 0x11	; 17
 c24:	0e 94 72 05 	call	0xae4	; 0xae4 <uart_puts>
	}

	if (com[0] == 'I') {
 c28:	f7 01       	movw	r30, r14
 c2a:	80 81       	ld	r24, Z
 c2c:	89 34       	cpi	r24, 0x49	; 73
 c2e:	19 f5       	brne	.+70     	; 0xc76 <handle_command+0x176>
		if (!com[1]) {
 c30:	81 81       	ldd	r24, Z+1	; 0x01
 c32:	81 11       	cpse	r24, r1
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <handle_command+0x13c>
			uart_puts("error");
 c36:	87 e1       	ldi	r24, 0x17	; 23
 c38:	91 e0       	ldi	r25, 0x01	; 1
 c3a:	1b c0       	rjmp	.+54     	; 0xc72 <handle_command+0x172>
			return;
		}
		setADC(com[2]-'0');
 c3c:	f7 01       	movw	r30, r14
 c3e:	82 81       	ldd	r24, Z+2	; 0x02
 c40:	80 53       	subi	r24, 0x30	; 48
 c42:	0e 94 77 02 	call	0x4ee	; 0x4ee <setADC>
		char s[8];
		char dest[] = "i,";
 c46:	89 e6       	ldi	r24, 0x69	; 105
 c48:	9c e2       	ldi	r25, 0x2C	; 44
 c4a:	a0 e0       	ldi	r26, 0x00	; 0
 c4c:	89 87       	std	Y+9, r24	; 0x09
 c4e:	9a 87       	std	Y+10, r25	; 0x0a
 c50:	ab 87       	std	Y+11, r26	; 0x0b
		strcat(dest,utoa(getData(),s,10));
 c52:	0e 94 8b 02 	call	0x516	; 0x516 <getData>
 c56:	4a e0       	ldi	r20, 0x0A	; 10
 c58:	50 e0       	ldi	r21, 0x00	; 0
 c5a:	be 01       	movw	r22, r28
 c5c:	6f 5f       	subi	r22, 0xFF	; 255
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	0e 94 19 07 	call	0xe32	; 0xe32 <utoa>
 c64:	bc 01       	movw	r22, r24
 c66:	ce 01       	movw	r24, r28
 c68:	09 96       	adiw	r24, 0x09	; 9
 c6a:	0e 94 ed 06 	call	0xdda	; 0xdda <strcat>
		uart_puts(dest);
 c6e:	ce 01       	movw	r24, r28
 c70:	09 96       	adiw	r24, 0x09	; 9
 c72:	0e 94 72 05 	call	0xae4	; 0xae4 <uart_puts>
	}
}
 c76:	63 96       	adiw	r28, 0x13	; 19
 c78:	0f b6       	in	r0, 0x3f	; 63
 c7a:	f8 94       	cli
 c7c:	de bf       	out	0x3e, r29	; 62
 c7e:	0f be       	out	0x3f, r0	; 63
 c80:	cd bf       	out	0x3d, r28	; 61
 c82:	df 91       	pop	r29
 c84:	cf 91       	pop	r28
 c86:	ff 90       	pop	r15
 c88:	ef 90       	pop	r14
 c8a:	df 90       	pop	r13
 c8c:	cf 90       	pop	r12
 c8e:	bf 90       	pop	r11
 c90:	af 90       	pop	r10
 c92:	08 95       	ret

00000c94 <USART_RXC_vect>:

ISR(USART_RXC_vect)
{
 c94:	1f 92       	push	r1
 c96:	0f 92       	push	r0
 c98:	0f b6       	in	r0, 0x3f	; 63
 c9a:	0f 92       	push	r0
 c9c:	11 24       	eor	r1, r1
 c9e:	0b b6       	in	r0, 0x3b	; 59
 ca0:	0f 92       	push	r0
 ca2:	2f 93       	push	r18
 ca4:	3f 93       	push	r19
 ca6:	4f 93       	push	r20
 ca8:	5f 93       	push	r21
 caa:	6f 93       	push	r22
 cac:	7f 93       	push	r23
 cae:	8f 93       	push	r24
 cb0:	9f 93       	push	r25
 cb2:	af 93       	push	r26
 cb4:	bf 93       	push	r27
 cb6:	ef 93       	push	r30
 cb8:	ff 93       	push	r31
  unsigned char nextChar;
  // Daten aus dem Puffer lesen
  nextChar = UDR0;
 cba:	80 91 c6 00 	lds	r24, 0x00C6
  if( uart_str_complete == 0 ) {	// wenn uart_string gerade in Verwendung, neues Zeichen verwerfen
 cbe:	90 91 4c 01 	lds	r25, 0x014C
 cc2:	91 11       	cpse	r25, r1
 cc4:	23 c0       	rjmp	.+70     	; 0xd0c <USART_RXC_vect+0x78>

    // Daten werden erst in uart_string geschrieben, wenn nicht String-Ende/max Zeichenlänge erreicht ist/string gerade verarbeitet wird
    if( nextChar != '\n' &&
 cc6:	8a 30       	cpi	r24, 0x0A	; 10
 cc8:	91 f0       	breq	.+36     	; 0xcee <USART_RXC_vect+0x5a>
 cca:	8d 30       	cpi	r24, 0x0D	; 13
 ccc:	81 f0       	breq	.+32     	; 0xcee <USART_RXC_vect+0x5a>
        nextChar != '\r' &&
        uart_str_count < UART_MAXSTRLEN ) {
 cce:	90 91 4b 01 	lds	r25, 0x014B
  nextChar = UDR0;
  if( uart_str_complete == 0 ) {	// wenn uart_string gerade in Verwendung, neues Zeichen verwerfen

    // Daten werden erst in uart_string geschrieben, wenn nicht String-Ende/max Zeichenlänge erreicht ist/string gerade verarbeitet wird
    if( nextChar != '\n' &&
        nextChar != '\r' &&
 cd2:	9e 31       	cpi	r25, 0x1E	; 30
 cd4:	60 f4       	brcc	.+24     	; 0xcee <USART_RXC_vect+0x5a>
        uart_str_count < UART_MAXSTRLEN ) {
      uart_string[uart_str_count] = nextChar;
 cd6:	e0 91 4b 01 	lds	r30, 0x014B
 cda:	f0 e0       	ldi	r31, 0x00	; 0
 cdc:	e4 5d       	subi	r30, 0xD4	; 212
 cde:	fe 4f       	sbci	r31, 0xFE	; 254
 ce0:	80 83       	st	Z, r24
      uart_str_count++;
 ce2:	80 91 4b 01 	lds	r24, 0x014B
 ce6:	8f 5f       	subi	r24, 0xFF	; 255
 ce8:	80 93 4b 01 	sts	0x014B, r24
 cec:	0f c0       	rjmp	.+30     	; 0xd0c <USART_RXC_vect+0x78>
    }
    else {
      uart_string[uart_str_count] = '\0';
 cee:	e0 91 4b 01 	lds	r30, 0x014B
 cf2:	f0 e0       	ldi	r31, 0x00	; 0
 cf4:	e4 5d       	subi	r30, 0xD4	; 212
 cf6:	fe 4f       	sbci	r31, 0xFE	; 254
 cf8:	10 82       	st	Z, r1
      uart_str_count = 0;
 cfa:	10 92 4b 01 	sts	0x014B, r1
      uart_str_complete = 1;
 cfe:	81 e0       	ldi	r24, 0x01	; 1
 d00:	80 93 4c 01 	sts	0x014C, r24
      handle_command(uart_string);
 d04:	8c e2       	ldi	r24, 0x2C	; 44
 d06:	91 e0       	ldi	r25, 0x01	; 1
 d08:	0e 94 80 05 	call	0xb00	; 0xb00 <handle_command>
    }
  }
}
 d0c:	ff 91       	pop	r31
 d0e:	ef 91       	pop	r30
 d10:	bf 91       	pop	r27
 d12:	af 91       	pop	r26
 d14:	9f 91       	pop	r25
 d16:	8f 91       	pop	r24
 d18:	7f 91       	pop	r23
 d1a:	6f 91       	pop	r22
 d1c:	5f 91       	pop	r21
 d1e:	4f 91       	pop	r20
 d20:	3f 91       	pop	r19
 d22:	2f 91       	pop	r18
 d24:	0f 90       	pop	r0
 d26:	0b be       	out	0x3b, r0	; 59
 d28:	0f 90       	pop	r0
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	0f 90       	pop	r0
 d2e:	1f 90       	pop	r1
 d30:	18 95       	reti

00000d32 <main>:
 d32:	0e 94 6b 00 	call	0xd6	; 0xd6 <init>
 d36:	78 94       	sei
 d38:	46 98       	cbi	0x08, 6	; 8
 d3a:	47 98       	cbi	0x08, 7	; 8
 d3c:	2f ef       	ldi	r18, 0xFF	; 255
 d3e:	81 ee       	ldi	r24, 0xE1	; 225
 d40:	94 e0       	ldi	r25, 0x04	; 4
 d42:	21 50       	subi	r18, 0x01	; 1
 d44:	80 40       	sbci	r24, 0x00	; 0
 d46:	90 40       	sbci	r25, 0x00	; 0
 d48:	e1 f7       	brne	.-8      	; 0xd42 <main+0x10>
 d4a:	00 c0       	rjmp	.+0      	; 0xd4c <main+0x1a>
 d4c:	00 00       	nop
 d4e:	80 91 4f 01 	lds	r24, 0x014F
 d52:	90 91 50 01 	lds	r25, 0x0150
 d56:	88 37       	cpi	r24, 0x78	; 120
 d58:	91 05       	cpc	r25, r1
 d5a:	18 f4       	brcc	.+6      	; 0xd62 <main+0x30>
 d5c:	84 ef       	ldi	r24, 0xF4	; 244
 d5e:	91 e0       	ldi	r25, 0x01	; 1
 d60:	02 c0       	rjmp	.+4      	; 0xd66 <main+0x34>
 d62:	80 e0       	ldi	r24, 0x00	; 0
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	0e 94 24 01 	call	0x248	; 0x248 <setMotorBaseSpeed_1>
 d6a:	80 91 4d 01 	lds	r24, 0x014D
 d6e:	90 91 4e 01 	lds	r25, 0x014E
 d72:	88 37       	cpi	r24, 0x78	; 120
 d74:	91 05       	cpc	r25, r1
 d76:	18 f4       	brcc	.+6      	; 0xd7e <main+0x4c>
 d78:	84 ef       	ldi	r24, 0xF4	; 244
 d7a:	91 e0       	ldi	r25, 0x01	; 1
 d7c:	02 c0       	rjmp	.+4      	; 0xd82 <main+0x50>
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	0e 94 37 01 	call	0x26e	; 0x26e <setMotorBaseSpeed_2>
 d86:	80 e0       	ldi	r24, 0x00	; 0
 d88:	0e 94 1e 02 	call	0x43c	; 0x43c <pushButton>
 d8c:	88 23       	and	r24, r24
 d8e:	41 f0       	breq	.+16     	; 0xda0 <main+0x6e>
 d90:	10 92 50 01 	sts	0x0150, r1
 d94:	10 92 4f 01 	sts	0x014F, r1
 d98:	10 92 4e 01 	sts	0x014E, r1
 d9c:	10 92 4d 01 	sts	0x014D, r1
 da0:	81 e0       	ldi	r24, 0x01	; 1
 da2:	0e 94 1e 02 	call	0x43c	; 0x43c <pushButton>
 da6:	88 23       	and	r24, r24
 da8:	41 f0       	breq	.+16     	; 0xdba <main+0x88>
 daa:	10 92 50 01 	sts	0x0150, r1
 dae:	10 92 4f 01 	sts	0x014F, r1
 db2:	10 92 4e 01 	sts	0x014E, r1
 db6:	10 92 4d 01 	sts	0x014D, r1
 dba:	82 e0       	ldi	r24, 0x02	; 2
 dbc:	0e 94 1e 02 	call	0x43c	; 0x43c <pushButton>
 dc0:	88 23       	and	r24, r24
 dc2:	41 f0       	breq	.+16     	; 0xdd4 <main+0xa2>
 dc4:	10 92 50 01 	sts	0x0150, r1
 dc8:	10 92 4f 01 	sts	0x014F, r1
 dcc:	10 92 4e 01 	sts	0x014E, r1
 dd0:	10 92 4d 01 	sts	0x014D, r1
 dd4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <adjSpeed>
 dd8:	ba cf       	rjmp	.-140    	; 0xd4e <main+0x1c>

00000dda <strcat>:
 dda:	fb 01       	movw	r30, r22
 ddc:	dc 01       	movw	r26, r24
 dde:	0d 90       	ld	r0, X+
 de0:	00 20       	and	r0, r0
 de2:	e9 f7       	brne	.-6      	; 0xdde <strcat+0x4>
 de4:	11 97       	sbiw	r26, 0x01	; 1
 de6:	01 90       	ld	r0, Z+
 de8:	0d 92       	st	X+, r0
 dea:	00 20       	and	r0, r0
 dec:	e1 f7       	brne	.-8      	; 0xde6 <strcat+0xc>
 dee:	08 95       	ret

00000df0 <itoa>:
 df0:	fb 01       	movw	r30, r22
 df2:	9f 01       	movw	r18, r30
 df4:	e8 94       	clt
 df6:	42 30       	cpi	r20, 0x02	; 2
 df8:	c4 f0       	brlt	.+48     	; 0xe2a <itoa+0x3a>
 dfa:	45 32       	cpi	r20, 0x25	; 37
 dfc:	b4 f4       	brge	.+44     	; 0xe2a <itoa+0x3a>
 dfe:	4a 30       	cpi	r20, 0x0A	; 10
 e00:	29 f4       	brne	.+10     	; 0xe0c <itoa+0x1c>
 e02:	97 fb       	bst	r25, 7
 e04:	1e f4       	brtc	.+6      	; 0xe0c <itoa+0x1c>
 e06:	90 95       	com	r25
 e08:	81 95       	neg	r24
 e0a:	9f 4f       	sbci	r25, 0xFF	; 255
 e0c:	64 2f       	mov	r22, r20
 e0e:	77 27       	eor	r23, r23
 e10:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__udivmodhi4>
 e14:	80 5d       	subi	r24, 0xD0	; 208
 e16:	8a 33       	cpi	r24, 0x3A	; 58
 e18:	0c f0       	brlt	.+2      	; 0xe1c <itoa+0x2c>
 e1a:	89 5d       	subi	r24, 0xD9	; 217
 e1c:	81 93       	st	Z+, r24
 e1e:	cb 01       	movw	r24, r22
 e20:	00 97       	sbiw	r24, 0x00	; 0
 e22:	a1 f7       	brne	.-24     	; 0xe0c <itoa+0x1c>
 e24:	16 f4       	brtc	.+4      	; 0xe2a <itoa+0x3a>
 e26:	5d e2       	ldi	r21, 0x2D	; 45
 e28:	51 93       	st	Z+, r21
 e2a:	10 82       	st	Z, r1
 e2c:	c9 01       	movw	r24, r18
 e2e:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <strrev>

00000e32 <utoa>:
 e32:	fb 01       	movw	r30, r22
 e34:	9f 01       	movw	r18, r30
 e36:	42 30       	cpi	r20, 0x02	; 2
 e38:	74 f0       	brlt	.+28     	; 0xe56 <utoa+0x24>
 e3a:	45 32       	cpi	r20, 0x25	; 37
 e3c:	64 f4       	brge	.+24     	; 0xe56 <utoa+0x24>
 e3e:	64 2f       	mov	r22, r20
 e40:	77 27       	eor	r23, r23
 e42:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__udivmodhi4>
 e46:	80 5d       	subi	r24, 0xD0	; 208
 e48:	8a 33       	cpi	r24, 0x3A	; 58
 e4a:	0c f0       	brlt	.+2      	; 0xe4e <utoa+0x1c>
 e4c:	89 5d       	subi	r24, 0xD9	; 217
 e4e:	81 93       	st	Z+, r24
 e50:	cb 01       	movw	r24, r22
 e52:	00 97       	sbiw	r24, 0x00	; 0
 e54:	a1 f7       	brne	.-24     	; 0xe3e <utoa+0xc>
 e56:	10 82       	st	Z, r1
 e58:	c9 01       	movw	r24, r18
 e5a:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <strrev>

00000e5e <strrev>:
 e5e:	dc 01       	movw	r26, r24
 e60:	fc 01       	movw	r30, r24
 e62:	67 2f       	mov	r22, r23
 e64:	71 91       	ld	r23, Z+
 e66:	77 23       	and	r23, r23
 e68:	e1 f7       	brne	.-8      	; 0xe62 <strrev+0x4>
 e6a:	32 97       	sbiw	r30, 0x02	; 2
 e6c:	04 c0       	rjmp	.+8      	; 0xe76 <strrev+0x18>
 e6e:	7c 91       	ld	r23, X
 e70:	6d 93       	st	X+, r22
 e72:	70 83       	st	Z, r23
 e74:	62 91       	ld	r22, -Z
 e76:	ae 17       	cp	r26, r30
 e78:	bf 07       	cpc	r27, r31
 e7a:	c8 f3       	brcs	.-14     	; 0xe6e <strrev+0x10>
 e7c:	08 95       	ret

00000e7e <__udivmodhi4>:
 e7e:	aa 1b       	sub	r26, r26
 e80:	bb 1b       	sub	r27, r27
 e82:	51 e1       	ldi	r21, 0x11	; 17
 e84:	07 c0       	rjmp	.+14     	; 0xe94 <__udivmodhi4_ep>

00000e86 <__udivmodhi4_loop>:
 e86:	aa 1f       	adc	r26, r26
 e88:	bb 1f       	adc	r27, r27
 e8a:	a6 17       	cp	r26, r22
 e8c:	b7 07       	cpc	r27, r23
 e8e:	10 f0       	brcs	.+4      	; 0xe94 <__udivmodhi4_ep>
 e90:	a6 1b       	sub	r26, r22
 e92:	b7 0b       	sbc	r27, r23

00000e94 <__udivmodhi4_ep>:
 e94:	88 1f       	adc	r24, r24
 e96:	99 1f       	adc	r25, r25
 e98:	5a 95       	dec	r21
 e9a:	a9 f7       	brne	.-22     	; 0xe86 <__udivmodhi4_loop>
 e9c:	80 95       	com	r24
 e9e:	90 95       	com	r25
 ea0:	bc 01       	movw	r22, r24
 ea2:	cd 01       	movw	r24, r26
 ea4:	08 95       	ret

00000ea6 <_exit>:
 ea6:	f8 94       	cli

00000ea8 <__stop_program>:
 ea8:	ff cf       	rjmp	.-2      	; 0xea8 <__stop_program>
